// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state (interfaces: Entity)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/state_mocks.go github.com/juju/juju/state Entity
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockEntity is a mock of Entity interface.
type MockEntity struct {
	ctrl     *gomock.Controller
	recorder *MockEntityMockRecorder
}

// MockEntityMockRecorder is the mock recorder for MockEntity.
type MockEntityMockRecorder struct {
	mock *MockEntity
}

// NewMockEntity creates a new mock instance.
func NewMockEntity(ctrl *gomock.Controller) *MockEntity {
	mock := &MockEntity{ctrl: ctrl}
	mock.recorder = &MockEntityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntity) EXPECT() *MockEntityMockRecorder {
	return m.recorder
}

// Tag mocks base method.
func (m *MockEntity) Tag() names.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.Tag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockEntityMockRecorder) Tag() *MockEntityTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockEntity)(nil).Tag))
	return &MockEntityTagCall{Call: call}
}

// MockEntityTagCall wrap *gomock.Call
type MockEntityTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEntityTagCall) Return(arg0 names.Tag) *MockEntityTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEntityTagCall) Do(f func() names.Tag) *MockEntityTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEntityTagCall) DoAndReturn(f func() names.Tag) *MockEntityTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
