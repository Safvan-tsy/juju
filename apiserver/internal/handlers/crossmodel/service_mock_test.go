// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/internal/handlers/crossmodel (interfaces: OfferAuthContext)
//
// Generated by this command:
//
//	mockgen -typed -package crossmodel -destination service_mock_test.go github.com/juju/juju/apiserver/internal/handlers/crossmodel OfferAuthContext
//

// Package crossmodel is a generated GoMock package.
package crossmodel

import (
	context "context"
	reflect "reflect"

	bakery "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery"
	checkers "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery/checkers"
	crossmodel "github.com/juju/juju/apiserver/internal/crossmodel"
	gomock "go.uber.org/mock/gomock"
)

// MockOfferAuthContext is a mock of OfferAuthContext interface.
type MockOfferAuthContext struct {
	ctrl     *gomock.Controller
	recorder *MockOfferAuthContextMockRecorder
}

// MockOfferAuthContextMockRecorder is the mock recorder for MockOfferAuthContext.
type MockOfferAuthContextMockRecorder struct {
	mock *MockOfferAuthContext
}

// NewMockOfferAuthContext creates a new mock instance.
func NewMockOfferAuthContext(ctrl *gomock.Controller) *MockOfferAuthContext {
	mock := &MockOfferAuthContext{ctrl: ctrl}
	mock.recorder = &MockOfferAuthContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfferAuthContext) EXPECT() *MockOfferAuthContextMockRecorder {
	return m.recorder
}

// CheckLocalAccessRequest mocks base method.
func (m *MockOfferAuthContext) CheckLocalAccessRequest(arg0 context.Context, arg1 crossmodel.OfferAccessDetails) ([]checkers.Caveat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLocalAccessRequest", arg0, arg1)
	ret0, _ := ret[0].([]checkers.Caveat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLocalAccessRequest indicates an expected call of CheckLocalAccessRequest.
func (mr *MockOfferAuthContextMockRecorder) CheckLocalAccessRequest(arg0, arg1 any) *MockOfferAuthContextCheckLocalAccessRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLocalAccessRequest", reflect.TypeOf((*MockOfferAuthContext)(nil).CheckLocalAccessRequest), arg0, arg1)
	return &MockOfferAuthContextCheckLocalAccessRequestCall{Call: call}
}

// MockOfferAuthContextCheckLocalAccessRequestCall wrap *gomock.Call
type MockOfferAuthContextCheckLocalAccessRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferAuthContextCheckLocalAccessRequestCall) Return(arg0 []checkers.Caveat, arg1 error) *MockOfferAuthContextCheckLocalAccessRequestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferAuthContextCheckLocalAccessRequestCall) Do(f func(context.Context, crossmodel.OfferAccessDetails) ([]checkers.Caveat, error)) *MockOfferAuthContextCheckLocalAccessRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferAuthContextCheckLocalAccessRequestCall) DoAndReturn(f func(context.Context, crossmodel.OfferAccessDetails) ([]checkers.Caveat, error)) *MockOfferAuthContextCheckLocalAccessRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckOfferAccessCaveat mocks base method.
func (m *MockOfferAuthContext) CheckOfferAccessCaveat(arg0 context.Context, arg1 string) (crossmodel.OfferAccessDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOfferAccessCaveat", arg0, arg1)
	ret0, _ := ret[0].(crossmodel.OfferAccessDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOfferAccessCaveat indicates an expected call of CheckOfferAccessCaveat.
func (mr *MockOfferAuthContextMockRecorder) CheckOfferAccessCaveat(arg0, arg1 any) *MockOfferAuthContextCheckOfferAccessCaveatCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOfferAccessCaveat", reflect.TypeOf((*MockOfferAuthContext)(nil).CheckOfferAccessCaveat), arg0, arg1)
	return &MockOfferAuthContextCheckOfferAccessCaveatCall{Call: call}
}

// MockOfferAuthContextCheckOfferAccessCaveatCall wrap *gomock.Call
type MockOfferAuthContextCheckOfferAccessCaveatCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferAuthContextCheckOfferAccessCaveatCall) Return(arg0 crossmodel.OfferAccessDetails, arg1 error) *MockOfferAuthContextCheckOfferAccessCaveatCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferAuthContextCheckOfferAccessCaveatCall) Do(f func(context.Context, string) (crossmodel.OfferAccessDetails, error)) *MockOfferAuthContextCheckOfferAccessCaveatCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferAuthContextCheckOfferAccessCaveatCall) DoAndReturn(f func(context.Context, string) (crossmodel.OfferAccessDetails, error)) *MockOfferAuthContextCheckOfferAccessCaveatCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OfferThirdPartyKey mocks base method.
func (m *MockOfferAuthContext) OfferThirdPartyKey() *bakery.KeyPair {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferThirdPartyKey")
	ret0, _ := ret[0].(*bakery.KeyPair)
	return ret0
}

// OfferThirdPartyKey indicates an expected call of OfferThirdPartyKey.
func (mr *MockOfferAuthContextMockRecorder) OfferThirdPartyKey() *MockOfferAuthContextOfferThirdPartyKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferThirdPartyKey", reflect.TypeOf((*MockOfferAuthContext)(nil).OfferThirdPartyKey))
	return &MockOfferAuthContextOfferThirdPartyKeyCall{Call: call}
}

// MockOfferAuthContextOfferThirdPartyKeyCall wrap *gomock.Call
type MockOfferAuthContextOfferThirdPartyKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferAuthContextOfferThirdPartyKeyCall) Return(arg0 *bakery.KeyPair) *MockOfferAuthContextOfferThirdPartyKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferAuthContextOfferThirdPartyKeyCall) Do(f func() *bakery.KeyPair) *MockOfferAuthContextOfferThirdPartyKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferAuthContextOfferThirdPartyKeyCall) DoAndReturn(f func() *bakery.KeyPair) *MockOfferAuthContextOfferThirdPartyKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
