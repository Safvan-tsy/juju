// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/internal/crossmodel (interfaces: AccessService,OfferBakery)
//
// Generated by this command:
//
//	mockgen -typed -package crossmodel -destination service_mock_test.go github.com/juju/juju/apiserver/internal/crossmodel AccessService,OfferBakery
//

// Package crossmodel is a generated GoMock package.
package crossmodel

import (
	context "context"
	reflect "reflect"

	bakery "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery"
	checkers "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery/checkers"
	bakery0 "github.com/juju/juju/apiserver/internal/crossmodel/bakery"
	permission "github.com/juju/juju/core/permission"
	user "github.com/juju/juju/core/user"
	gomock "go.uber.org/mock/gomock"
	macaroon "gopkg.in/macaroon.v2"
)

// MockAccessService is a mock of AccessService interface.
type MockAccessService struct {
	ctrl     *gomock.Controller
	recorder *MockAccessServiceMockRecorder
}

// MockAccessServiceMockRecorder is the mock recorder for MockAccessService.
type MockAccessServiceMockRecorder struct {
	mock *MockAccessService
}

// NewMockAccessService creates a new mock instance.
func NewMockAccessService(ctrl *gomock.Controller) *MockAccessService {
	mock := &MockAccessService{ctrl: ctrl}
	mock.recorder = &MockAccessServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessService) EXPECT() *MockAccessServiceMockRecorder {
	return m.recorder
}

// ReadUserAccessLevelForTarget mocks base method.
func (m *MockAccessService) ReadUserAccessLevelForTarget(arg0 context.Context, arg1 user.Name, arg2 permission.ID) (permission.Access, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserAccessLevelForTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.Access)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserAccessLevelForTarget indicates an expected call of ReadUserAccessLevelForTarget.
func (mr *MockAccessServiceMockRecorder) ReadUserAccessLevelForTarget(arg0, arg1, arg2 any) *MockAccessServiceReadUserAccessLevelForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserAccessLevelForTarget", reflect.TypeOf((*MockAccessService)(nil).ReadUserAccessLevelForTarget), arg0, arg1, arg2)
	return &MockAccessServiceReadUserAccessLevelForTargetCall{Call: call}
}

// MockAccessServiceReadUserAccessLevelForTargetCall wrap *gomock.Call
type MockAccessServiceReadUserAccessLevelForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceReadUserAccessLevelForTargetCall) Return(arg0 permission.Access, arg1 error) *MockAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceReadUserAccessLevelForTargetCall) Do(f func(context.Context, user.Name, permission.ID) (permission.Access, error)) *MockAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceReadUserAccessLevelForTargetCall) DoAndReturn(f func(context.Context, user.Name, permission.ID) (permission.Access, error)) *MockAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockOfferBakery is a mock of OfferBakery interface.
type MockOfferBakery struct {
	ctrl     *gomock.Controller
	recorder *MockOfferBakeryMockRecorder
}

// MockOfferBakeryMockRecorder is the mock recorder for MockOfferBakery.
type MockOfferBakeryMockRecorder struct {
	mock *MockOfferBakery
}

// NewMockOfferBakery creates a new mock instance.
func NewMockOfferBakery(ctrl *gomock.Controller) *MockOfferBakery {
	mock := &MockOfferBakery{ctrl: ctrl}
	mock.recorder = &MockOfferBakeryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfferBakery) EXPECT() *MockOfferBakeryMockRecorder {
	return m.recorder
}

// CreateDischargeMacaroon mocks base method.
func (m *MockOfferBakery) CreateDischargeMacaroon(arg0 context.Context, arg1, arg2 string, arg3, arg4 map[string]string, arg5 bakery.Op, arg6 bakery.Version) (*bakery.Macaroon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDischargeMacaroon", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*bakery.Macaroon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDischargeMacaroon indicates an expected call of CreateDischargeMacaroon.
func (mr *MockOfferBakeryMockRecorder) CreateDischargeMacaroon(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *MockOfferBakeryCreateDischargeMacaroonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDischargeMacaroon", reflect.TypeOf((*MockOfferBakery)(nil).CreateDischargeMacaroon), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	return &MockOfferBakeryCreateDischargeMacaroonCall{Call: call}
}

// MockOfferBakeryCreateDischargeMacaroonCall wrap *gomock.Call
type MockOfferBakeryCreateDischargeMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferBakeryCreateDischargeMacaroonCall) Return(arg0 *bakery.Macaroon, arg1 error) *MockOfferBakeryCreateDischargeMacaroonCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferBakeryCreateDischargeMacaroonCall) Do(f func(context.Context, string, string, map[string]string, map[string]string, bakery.Op, bakery.Version) (*bakery.Macaroon, error)) *MockOfferBakeryCreateDischargeMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferBakeryCreateDischargeMacaroonCall) DoAndReturn(f func(context.Context, string, string, map[string]string, map[string]string, bakery.Op, bakery.Version) (*bakery.Macaroon, error)) *MockOfferBakeryCreateDischargeMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConsumeOfferCaveats mocks base method.
func (m *MockOfferBakery) GetConsumeOfferCaveats(arg0, arg1, arg2, arg3 string) []checkers.Caveat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumeOfferCaveats", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]checkers.Caveat)
	return ret0
}

// GetConsumeOfferCaveats indicates an expected call of GetConsumeOfferCaveats.
func (mr *MockOfferBakeryMockRecorder) GetConsumeOfferCaveats(arg0, arg1, arg2, arg3 any) *MockOfferBakeryGetConsumeOfferCaveatsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumeOfferCaveats", reflect.TypeOf((*MockOfferBakery)(nil).GetConsumeOfferCaveats), arg0, arg1, arg2, arg3)
	return &MockOfferBakeryGetConsumeOfferCaveatsCall{Call: call}
}

// MockOfferBakeryGetConsumeOfferCaveatsCall wrap *gomock.Call
type MockOfferBakeryGetConsumeOfferCaveatsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferBakeryGetConsumeOfferCaveatsCall) Return(arg0 []checkers.Caveat) *MockOfferBakeryGetConsumeOfferCaveatsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferBakeryGetConsumeOfferCaveatsCall) Do(f func(string, string, string, string) []checkers.Caveat) *MockOfferBakeryGetConsumeOfferCaveatsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferBakeryGetConsumeOfferCaveatsCall) DoAndReturn(f func(string, string, string, string) []checkers.Caveat) *MockOfferBakeryGetConsumeOfferCaveatsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InferDeclaredFromMacaroon mocks base method.
func (m *MockOfferBakery) InferDeclaredFromMacaroon(arg0 macaroon.Slice, arg1 map[string]string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferDeclaredFromMacaroon", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// InferDeclaredFromMacaroon indicates an expected call of InferDeclaredFromMacaroon.
func (mr *MockOfferBakeryMockRecorder) InferDeclaredFromMacaroon(arg0, arg1 any) *MockOfferBakeryInferDeclaredFromMacaroonCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferDeclaredFromMacaroon", reflect.TypeOf((*MockOfferBakery)(nil).InferDeclaredFromMacaroon), arg0, arg1)
	return &MockOfferBakeryInferDeclaredFromMacaroonCall{Call: call}
}

// MockOfferBakeryInferDeclaredFromMacaroonCall wrap *gomock.Call
type MockOfferBakeryInferDeclaredFromMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferBakeryInferDeclaredFromMacaroonCall) Return(arg0 map[string]string) *MockOfferBakeryInferDeclaredFromMacaroonCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferBakeryInferDeclaredFromMacaroonCall) Do(f func(macaroon.Slice, map[string]string) map[string]string) *MockOfferBakeryInferDeclaredFromMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferBakeryInferDeclaredFromMacaroonCall) DoAndReturn(f func(macaroon.Slice, map[string]string) map[string]string) *MockOfferBakeryInferDeclaredFromMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ParseCaveat mocks base method.
func (m *MockOfferBakery) ParseCaveat(arg0 string) (bakery0.OfferAccessDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseCaveat", arg0)
	ret0, _ := ret[0].(bakery0.OfferAccessDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseCaveat indicates an expected call of ParseCaveat.
func (mr *MockOfferBakeryMockRecorder) ParseCaveat(arg0 any) *MockOfferBakeryParseCaveatCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseCaveat", reflect.TypeOf((*MockOfferBakery)(nil).ParseCaveat), arg0)
	return &MockOfferBakeryParseCaveatCall{Call: call}
}

// MockOfferBakeryParseCaveatCall wrap *gomock.Call
type MockOfferBakeryParseCaveatCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferBakeryParseCaveatCall) Return(arg0 bakery0.OfferAccessDetails, arg1 error) *MockOfferBakeryParseCaveatCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferBakeryParseCaveatCall) Do(f func(string) (bakery0.OfferAccessDetails, error)) *MockOfferBakeryParseCaveatCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferBakeryParseCaveatCall) DoAndReturn(f func(string) (bakery0.OfferAccessDetails, error)) *MockOfferBakeryParseCaveatCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
