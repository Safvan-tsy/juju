// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/internal/crossmodel/bakery (interfaces: BakeryStore,Oven,HTTPClient)
//
// Generated by this command:
//
//	mockgen -typed -package bakery -destination service_mock_test.go github.com/juju/juju/apiserver/internal/crossmodel/bakery BakeryStore,Oven,HTTPClient
//

// Package bakery is a generated GoMock package.
package bakery

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	bakery "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery"
	checkers "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery/checkers"
	dbrootkeystore "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery/dbrootkeystore"
	gomock "go.uber.org/mock/gomock"
)

// MockBakeryStore is a mock of BakeryStore interface.
type MockBakeryStore struct {
	ctrl     *gomock.Controller
	recorder *MockBakeryStoreMockRecorder
}

// MockBakeryStoreMockRecorder is the mock recorder for MockBakeryStore.
type MockBakeryStoreMockRecorder struct {
	mock *MockBakeryStore
}

// NewMockBakeryStore creates a new mock instance.
func NewMockBakeryStore(ctrl *gomock.Controller) *MockBakeryStore {
	mock := &MockBakeryStore{ctrl: ctrl}
	mock.recorder = &MockBakeryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBakeryStore) EXPECT() *MockBakeryStoreMockRecorder {
	return m.recorder
}

// FindLatestKeyContext mocks base method.
func (m *MockBakeryStore) FindLatestKeyContext(arg0 context.Context, arg1, arg2, arg3 time.Time) (dbrootkeystore.RootKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestKeyContext", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(dbrootkeystore.RootKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestKeyContext indicates an expected call of FindLatestKeyContext.
func (mr *MockBakeryStoreMockRecorder) FindLatestKeyContext(arg0, arg1, arg2, arg3 any) *MockBakeryStoreFindLatestKeyContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestKeyContext", reflect.TypeOf((*MockBakeryStore)(nil).FindLatestKeyContext), arg0, arg1, arg2, arg3)
	return &MockBakeryStoreFindLatestKeyContextCall{Call: call}
}

// MockBakeryStoreFindLatestKeyContextCall wrap *gomock.Call
type MockBakeryStoreFindLatestKeyContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBakeryStoreFindLatestKeyContextCall) Return(arg0 dbrootkeystore.RootKey, arg1 error) *MockBakeryStoreFindLatestKeyContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBakeryStoreFindLatestKeyContextCall) Do(f func(context.Context, time.Time, time.Time, time.Time) (dbrootkeystore.RootKey, error)) *MockBakeryStoreFindLatestKeyContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBakeryStoreFindLatestKeyContextCall) DoAndReturn(f func(context.Context, time.Time, time.Time, time.Time) (dbrootkeystore.RootKey, error)) *MockBakeryStoreFindLatestKeyContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetKeyContext mocks base method.
func (m *MockBakeryStore) GetKeyContext(arg0 context.Context, arg1 []byte) (dbrootkeystore.RootKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyContext", arg0, arg1)
	ret0, _ := ret[0].(dbrootkeystore.RootKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyContext indicates an expected call of GetKeyContext.
func (mr *MockBakeryStoreMockRecorder) GetKeyContext(arg0, arg1 any) *MockBakeryStoreGetKeyContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyContext", reflect.TypeOf((*MockBakeryStore)(nil).GetKeyContext), arg0, arg1)
	return &MockBakeryStoreGetKeyContextCall{Call: call}
}

// MockBakeryStoreGetKeyContextCall wrap *gomock.Call
type MockBakeryStoreGetKeyContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBakeryStoreGetKeyContextCall) Return(arg0 dbrootkeystore.RootKey, arg1 error) *MockBakeryStoreGetKeyContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBakeryStoreGetKeyContextCall) Do(f func(context.Context, []byte) (dbrootkeystore.RootKey, error)) *MockBakeryStoreGetKeyContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBakeryStoreGetKeyContextCall) DoAndReturn(f func(context.Context, []byte) (dbrootkeystore.RootKey, error)) *MockBakeryStoreGetKeyContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOffersThirdPartyKey mocks base method.
func (m *MockBakeryStore) GetOffersThirdPartyKey(arg0 context.Context) (*bakery.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffersThirdPartyKey", arg0)
	ret0, _ := ret[0].(*bakery.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffersThirdPartyKey indicates an expected call of GetOffersThirdPartyKey.
func (mr *MockBakeryStoreMockRecorder) GetOffersThirdPartyKey(arg0 any) *MockBakeryStoreGetOffersThirdPartyKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffersThirdPartyKey", reflect.TypeOf((*MockBakeryStore)(nil).GetOffersThirdPartyKey), arg0)
	return &MockBakeryStoreGetOffersThirdPartyKeyCall{Call: call}
}

// MockBakeryStoreGetOffersThirdPartyKeyCall wrap *gomock.Call
type MockBakeryStoreGetOffersThirdPartyKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBakeryStoreGetOffersThirdPartyKeyCall) Return(arg0 *bakery.KeyPair, arg1 error) *MockBakeryStoreGetOffersThirdPartyKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBakeryStoreGetOffersThirdPartyKeyCall) Do(f func(context.Context) (*bakery.KeyPair, error)) *MockBakeryStoreGetOffersThirdPartyKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBakeryStoreGetOffersThirdPartyKeyCall) DoAndReturn(f func(context.Context) (*bakery.KeyPair, error)) *MockBakeryStoreGetOffersThirdPartyKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InsertKeyContext mocks base method.
func (m *MockBakeryStore) InsertKeyContext(arg0 context.Context, arg1 dbrootkeystore.RootKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertKeyContext", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertKeyContext indicates an expected call of InsertKeyContext.
func (mr *MockBakeryStoreMockRecorder) InsertKeyContext(arg0, arg1 any) *MockBakeryStoreInsertKeyContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertKeyContext", reflect.TypeOf((*MockBakeryStore)(nil).InsertKeyContext), arg0, arg1)
	return &MockBakeryStoreInsertKeyContextCall{Call: call}
}

// MockBakeryStoreInsertKeyContextCall wrap *gomock.Call
type MockBakeryStoreInsertKeyContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBakeryStoreInsertKeyContextCall) Return(arg0 error) *MockBakeryStoreInsertKeyContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBakeryStoreInsertKeyContextCall) Do(f func(context.Context, dbrootkeystore.RootKey) error) *MockBakeryStoreInsertKeyContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBakeryStoreInsertKeyContextCall) DoAndReturn(f func(context.Context, dbrootkeystore.RootKey) error) *MockBakeryStoreInsertKeyContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockOven is a mock of Oven interface.
type MockOven struct {
	ctrl     *gomock.Controller
	recorder *MockOvenMockRecorder
}

// MockOvenMockRecorder is the mock recorder for MockOven.
type MockOvenMockRecorder struct {
	mock *MockOven
}

// NewMockOven creates a new mock instance.
func NewMockOven(ctrl *gomock.Controller) *MockOven {
	mock := &MockOven{ctrl: ctrl}
	mock.recorder = &MockOvenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOven) EXPECT() *MockOvenMockRecorder {
	return m.recorder
}

// NewMacaroon mocks base method.
func (m *MockOven) NewMacaroon(arg0 context.Context, arg1 bakery.Version, arg2 []checkers.Caveat, arg3 ...bakery.Op) (*bakery.Macaroon, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewMacaroon", varargs...)
	ret0, _ := ret[0].(*bakery.Macaroon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMacaroon indicates an expected call of NewMacaroon.
func (mr *MockOvenMockRecorder) NewMacaroon(arg0, arg1, arg2 any, arg3 ...any) *MockOvenNewMacaroonCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMacaroon", reflect.TypeOf((*MockOven)(nil).NewMacaroon), varargs...)
	return &MockOvenNewMacaroonCall{Call: call}
}

// MockOvenNewMacaroonCall wrap *gomock.Call
type MockOvenNewMacaroonCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOvenNewMacaroonCall) Return(arg0 *bakery.Macaroon, arg1 error) *MockOvenNewMacaroonCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOvenNewMacaroonCall) Do(f func(context.Context, bakery.Version, []checkers.Caveat, ...bakery.Op) (*bakery.Macaroon, error)) *MockOvenNewMacaroonCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOvenNewMacaroonCall) DoAndReturn(f func(context.Context, bakery.Version, []checkers.Caveat, ...bakery.Op) (*bakery.Macaroon, error)) *MockOvenNewMacaroonCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(arg0 any) *MockHTTPClientDoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), arg0)
	return &MockHTTPClientDoCall{Call: call}
}

// MockHTTPClientDoCall wrap *gomock.Call
type MockHTTPClientDoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHTTPClientDoCall) Return(arg0 *http.Response, arg1 error) *MockHTTPClientDoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHTTPClientDoCall) Do(f func(*http.Request) (*http.Response, error)) *MockHTTPClientDoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHTTPClientDoCall) DoAndReturn(f func(*http.Request) (*http.Response, error)) *MockHTTPClientDoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
