// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery (interfaces: OpsAuthorizer)
//
// Generated by this command:
//
//	mockgen -typed -package bakery -destination bakery_mock_test.go github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery OpsAuthorizer
//

// Package bakery is a generated GoMock package.
package bakery

import (
	context "context"
	reflect "reflect"

	bakery "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery"
	checkers "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery/checkers"
	gomock "go.uber.org/mock/gomock"
)

// MockOpsAuthorizer is a mock of OpsAuthorizer interface.
type MockOpsAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockOpsAuthorizerMockRecorder
}

// MockOpsAuthorizerMockRecorder is the mock recorder for MockOpsAuthorizer.
type MockOpsAuthorizerMockRecorder struct {
	mock *MockOpsAuthorizer
}

// NewMockOpsAuthorizer creates a new mock instance.
func NewMockOpsAuthorizer(ctrl *gomock.Controller) *MockOpsAuthorizer {
	mock := &MockOpsAuthorizer{ctrl: ctrl}
	mock.recorder = &MockOpsAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpsAuthorizer) EXPECT() *MockOpsAuthorizerMockRecorder {
	return m.recorder
}

// AuthorizeOps mocks base method.
func (m *MockOpsAuthorizer) AuthorizeOps(arg0 context.Context, arg1 bakery.Op, arg2 []bakery.Op) ([]bool, []checkers.Caveat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeOps", arg0, arg1, arg2)
	ret0, _ := ret[0].([]bool)
	ret1, _ := ret[1].([]checkers.Caveat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AuthorizeOps indicates an expected call of AuthorizeOps.
func (mr *MockOpsAuthorizerMockRecorder) AuthorizeOps(arg0, arg1, arg2 any) *MockOpsAuthorizerAuthorizeOpsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeOps", reflect.TypeOf((*MockOpsAuthorizer)(nil).AuthorizeOps), arg0, arg1, arg2)
	return &MockOpsAuthorizerAuthorizeOpsCall{Call: call}
}

// MockOpsAuthorizerAuthorizeOpsCall wrap *gomock.Call
type MockOpsAuthorizerAuthorizeOpsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOpsAuthorizerAuthorizeOpsCall) Return(arg0 []bool, arg1 []checkers.Caveat, arg2 error) *MockOpsAuthorizerAuthorizeOpsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOpsAuthorizerAuthorizeOpsCall) Do(f func(context.Context, bakery.Op, []bakery.Op) ([]bool, []checkers.Caveat, error)) *MockOpsAuthorizerAuthorizeOpsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOpsAuthorizerAuthorizeOpsCall) DoAndReturn(f func(context.Context, bakery.Op, []bakery.Op) ([]bool, []checkers.Caveat, error)) *MockOpsAuthorizerAuthorizeOpsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
