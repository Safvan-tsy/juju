// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/unitassigner (interfaces: StatusService,MachineService)
//
// Generated by this command:
//
//	mockgen -typed -package unitassigner -destination services_mock_test.go github.com/juju/juju/apiserver/facades/agent/unitassigner StatusService,MachineService
//

// Package unitassigner is a generated GoMock package.
package unitassigner

import (
	context "context"
	reflect "reflect"

	machine "github.com/juju/juju/core/machine"
	status "github.com/juju/juju/core/status"
	unit "github.com/juju/juju/core/unit"
	service "github.com/juju/juju/domain/machine/service"
	gomock "go.uber.org/mock/gomock"
)

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// SetUnitAgentStatus mocks base method.
func (m *MockStatusService) SetUnitAgentStatus(arg0 context.Context, arg1 unit.Name, arg2 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitAgentStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitAgentStatus indicates an expected call of SetUnitAgentStatus.
func (mr *MockStatusServiceMockRecorder) SetUnitAgentStatus(arg0, arg1, arg2 any) *MockStatusServiceSetUnitAgentStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitAgentStatus", reflect.TypeOf((*MockStatusService)(nil).SetUnitAgentStatus), arg0, arg1, arg2)
	return &MockStatusServiceSetUnitAgentStatusCall{Call: call}
}

// MockStatusServiceSetUnitAgentStatusCall wrap *gomock.Call
type MockStatusServiceSetUnitAgentStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceSetUnitAgentStatusCall) Return(arg0 error) *MockStatusServiceSetUnitAgentStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceSetUnitAgentStatusCall) Do(f func(context.Context, unit.Name, status.StatusInfo) error) *MockStatusServiceSetUnitAgentStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceSetUnitAgentStatusCall) DoAndReturn(f func(context.Context, unit.Name, status.StatusInfo) error) *MockStatusServiceSetUnitAgentStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// CreateMachine mocks base method.
func (m *MockMachineService) CreateMachine(arg0 context.Context, arg1 service.CreateMachineArgs) (machine.UUID, machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMachine", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(machine.Name)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMachine indicates an expected call of CreateMachine.
func (mr *MockMachineServiceMockRecorder) CreateMachine(arg0, arg1 any) *MockMachineServiceCreateMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMachine", reflect.TypeOf((*MockMachineService)(nil).CreateMachine), arg0, arg1)
	return &MockMachineServiceCreateMachineCall{Call: call}
}

// MockMachineServiceCreateMachineCall wrap *gomock.Call
type MockMachineServiceCreateMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceCreateMachineCall) Return(arg0 machine.UUID, arg1 machine.Name, arg2 error) *MockMachineServiceCreateMachineCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceCreateMachineCall) Do(f func(context.Context, service.CreateMachineArgs) (machine.UUID, machine.Name, error)) *MockMachineServiceCreateMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceCreateMachineCall) DoAndReturn(f func(context.Context, service.CreateMachineArgs) (machine.UUID, machine.Name, error)) *MockMachineServiceCreateMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
