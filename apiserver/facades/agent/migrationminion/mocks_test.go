// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/migrationminion (interfaces: ModelMigrationService,ControllerNodeService,ControllerConfigService)
//
// Generated by this command:
//
//	mockgen -typed -package migrationminion_test -destination mocks_test.go github.com/juju/juju/apiserver/facades/agent/migrationminion ModelMigrationService,ControllerNodeService,ControllerConfigService
//

// Package migrationminion_test is a generated GoMock package.
package migrationminion_test

import (
	context "context"
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	machine "github.com/juju/juju/core/machine"
	migration "github.com/juju/juju/core/migration"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	modelmigration "github.com/juju/juju/domain/modelmigration"
	gomock "go.uber.org/mock/gomock"
)

// MockModelMigrationService is a mock of ModelMigrationService interface.
type MockModelMigrationService struct {
	ctrl     *gomock.Controller
	recorder *MockModelMigrationServiceMockRecorder
}

// MockModelMigrationServiceMockRecorder is the mock recorder for MockModelMigrationService.
type MockModelMigrationServiceMockRecorder struct {
	mock *MockModelMigrationService
}

// NewMockModelMigrationService creates a new mock instance.
func NewMockModelMigrationService(ctrl *gomock.Controller) *MockModelMigrationService {
	mock := &MockModelMigrationService{ctrl: ctrl}
	mock.recorder = &MockModelMigrationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelMigrationService) EXPECT() *MockModelMigrationServiceMockRecorder {
	return m.recorder
}

// Migration mocks base method.
func (m *MockModelMigrationService) Migration(arg0 context.Context) (modelmigration.Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migration", arg0)
	ret0, _ := ret[0].(modelmigration.Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Migration indicates an expected call of Migration.
func (mr *MockModelMigrationServiceMockRecorder) Migration(arg0 any) *MockModelMigrationServiceMigrationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migration", reflect.TypeOf((*MockModelMigrationService)(nil).Migration), arg0)
	return &MockModelMigrationServiceMigrationCall{Call: call}
}

// MockModelMigrationServiceMigrationCall wrap *gomock.Call
type MockModelMigrationServiceMigrationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationServiceMigrationCall) Return(arg0 modelmigration.Migration, arg1 error) *MockModelMigrationServiceMigrationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationServiceMigrationCall) Do(f func(context.Context) (modelmigration.Migration, error)) *MockModelMigrationServiceMigrationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationServiceMigrationCall) DoAndReturn(f func(context.Context) (modelmigration.Migration, error)) *MockModelMigrationServiceMigrationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReportFromMachine mocks base method.
func (m *MockModelMigrationService) ReportFromMachine(arg0 context.Context, arg1 machine.Name, arg2 migration.Phase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportFromMachine", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportFromMachine indicates an expected call of ReportFromMachine.
func (mr *MockModelMigrationServiceMockRecorder) ReportFromMachine(arg0, arg1, arg2 any) *MockModelMigrationServiceReportFromMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportFromMachine", reflect.TypeOf((*MockModelMigrationService)(nil).ReportFromMachine), arg0, arg1, arg2)
	return &MockModelMigrationServiceReportFromMachineCall{Call: call}
}

// MockModelMigrationServiceReportFromMachineCall wrap *gomock.Call
type MockModelMigrationServiceReportFromMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationServiceReportFromMachineCall) Return(arg0 error) *MockModelMigrationServiceReportFromMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationServiceReportFromMachineCall) Do(f func(context.Context, machine.Name, migration.Phase) error) *MockModelMigrationServiceReportFromMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationServiceReportFromMachineCall) DoAndReturn(f func(context.Context, machine.Name, migration.Phase) error) *MockModelMigrationServiceReportFromMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReportFromUnit mocks base method.
func (m *MockModelMigrationService) ReportFromUnit(arg0 context.Context, arg1 unit.Name, arg2 migration.Phase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportFromUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportFromUnit indicates an expected call of ReportFromUnit.
func (mr *MockModelMigrationServiceMockRecorder) ReportFromUnit(arg0, arg1, arg2 any) *MockModelMigrationServiceReportFromUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportFromUnit", reflect.TypeOf((*MockModelMigrationService)(nil).ReportFromUnit), arg0, arg1, arg2)
	return &MockModelMigrationServiceReportFromUnitCall{Call: call}
}

// MockModelMigrationServiceReportFromUnitCall wrap *gomock.Call
type MockModelMigrationServiceReportFromUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationServiceReportFromUnitCall) Return(arg0 error) *MockModelMigrationServiceReportFromUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationServiceReportFromUnitCall) Do(f func(context.Context, unit.Name, migration.Phase) error) *MockModelMigrationServiceReportFromUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationServiceReportFromUnitCall) DoAndReturn(f func(context.Context, unit.Name, migration.Phase) error) *MockModelMigrationServiceReportFromUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchForMigration mocks base method.
func (m *MockModelMigrationService) WatchForMigration(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchForMigration", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchForMigration indicates an expected call of WatchForMigration.
func (mr *MockModelMigrationServiceMockRecorder) WatchForMigration(arg0 any) *MockModelMigrationServiceWatchForMigrationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchForMigration", reflect.TypeOf((*MockModelMigrationService)(nil).WatchForMigration), arg0)
	return &MockModelMigrationServiceWatchForMigrationCall{Call: call}
}

// MockModelMigrationServiceWatchForMigrationCall wrap *gomock.Call
type MockModelMigrationServiceWatchForMigrationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationServiceWatchForMigrationCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockModelMigrationServiceWatchForMigrationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationServiceWatchForMigrationCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockModelMigrationServiceWatchForMigrationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationServiceWatchForMigrationCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockModelMigrationServiceWatchForMigrationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerNodeService is a mock of ControllerNodeService interface.
type MockControllerNodeService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerNodeServiceMockRecorder
}

// MockControllerNodeServiceMockRecorder is the mock recorder for MockControllerNodeService.
type MockControllerNodeServiceMockRecorder struct {
	mock *MockControllerNodeService
}

// NewMockControllerNodeService creates a new mock instance.
func NewMockControllerNodeService(ctrl *gomock.Controller) *MockControllerNodeService {
	mock := &MockControllerNodeService{ctrl: ctrl}
	mock.recorder = &MockControllerNodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerNodeService) EXPECT() *MockControllerNodeServiceMockRecorder {
	return m.recorder
}

// GetAllAPIAddressesForClients mocks base method.
func (m *MockControllerNodeService) GetAllAPIAddressesForClients(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIAddressesForClients", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIAddressesForClients indicates an expected call of GetAllAPIAddressesForClients.
func (mr *MockControllerNodeServiceMockRecorder) GetAllAPIAddressesForClients(arg0 any) *MockControllerNodeServiceGetAllAPIAddressesForClientsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIAddressesForClients", reflect.TypeOf((*MockControllerNodeService)(nil).GetAllAPIAddressesForClients), arg0)
	return &MockControllerNodeServiceGetAllAPIAddressesForClientsCall{Call: call}
}

// MockControllerNodeServiceGetAllAPIAddressesForClientsCall wrap *gomock.Call
type MockControllerNodeServiceGetAllAPIAddressesForClientsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceGetAllAPIAddressesForClientsCall) Return(arg0 []string, arg1 error) *MockControllerNodeServiceGetAllAPIAddressesForClientsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceGetAllAPIAddressesForClientsCall) Do(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetAllAPIAddressesForClientsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceGetAllAPIAddressesForClientsCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetAllAPIAddressesForClientsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
