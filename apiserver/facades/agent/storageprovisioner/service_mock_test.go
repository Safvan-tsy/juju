// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/storageprovisioner (interfaces: ApplicationService,MachineService,StorageProvisioningService)
//
// Generated by this command:
//
//	mockgen -typed -package storageprovisioner -destination service_mock_test.go github.com/juju/juju/apiserver/facades/agent/storageprovisioner ApplicationService,MachineService,StorageProvisioningService
//

// Package storageprovisioner is a generated GoMock package.
package storageprovisioner

import (
	context "context"
	reflect "reflect"

	instance "github.com/juju/juju/core/instance"
	life "github.com/juju/juju/core/life"
	machine "github.com/juju/juju/core/machine"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetApplicationLifeByName mocks base method.
func (m *MockApplicationService) GetApplicationLifeByName(arg0 context.Context, arg1 string) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationLifeByName", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationLifeByName indicates an expected call of GetApplicationLifeByName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationLifeByName(arg0, arg1 any) *MockApplicationServiceGetApplicationLifeByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationLifeByName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationLifeByName), arg0, arg1)
	return &MockApplicationServiceGetApplicationLifeByNameCall{Call: call}
}

// MockApplicationServiceGetApplicationLifeByNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationLifeByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationLifeByNameCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetApplicationLifeByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationLifeByNameCall) Do(f func(context.Context, string) (life.Value, error)) *MockApplicationServiceGetApplicationLifeByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationLifeByNameCall) DoAndReturn(f func(context.Context, string) (life.Value, error)) *MockApplicationServiceGetApplicationLifeByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitLife mocks base method.
func (m *MockApplicationService) GetUnitLife(arg0 context.Context, arg1 unit.Name) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitLife indicates an expected call of GetUnitLife.
func (mr *MockApplicationServiceMockRecorder) GetUnitLife(arg0, arg1 any) *MockApplicationServiceGetUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitLife", reflect.TypeOf((*MockApplicationService)(nil).GetUnitLife), arg0, arg1)
	return &MockApplicationServiceGetUnitLifeCall{Call: call}
}

// MockApplicationServiceGetUnitLifeCall wrap *gomock.Call
type MockApplicationServiceGetUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitLifeCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitLifeCall) Do(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitLifeCall) DoAndReturn(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// GetHardwareCharacteristics mocks base method.
func (m *MockMachineService) GetHardwareCharacteristics(arg0 context.Context, arg1 machine.UUID) (*instance.HardwareCharacteristics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHardwareCharacteristics", arg0, arg1)
	ret0, _ := ret[0].(*instance.HardwareCharacteristics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHardwareCharacteristics indicates an expected call of GetHardwareCharacteristics.
func (mr *MockMachineServiceMockRecorder) GetHardwareCharacteristics(arg0, arg1 any) *MockMachineServiceGetHardwareCharacteristicsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHardwareCharacteristics", reflect.TypeOf((*MockMachineService)(nil).GetHardwareCharacteristics), arg0, arg1)
	return &MockMachineServiceGetHardwareCharacteristicsCall{Call: call}
}

// MockMachineServiceGetHardwareCharacteristicsCall wrap *gomock.Call
type MockMachineServiceGetHardwareCharacteristicsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetHardwareCharacteristicsCall) Return(arg0 *instance.HardwareCharacteristics, arg1 error) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetHardwareCharacteristicsCall) Do(f func(context.Context, machine.UUID) (*instance.HardwareCharacteristics, error)) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetHardwareCharacteristicsCall) DoAndReturn(f func(context.Context, machine.UUID) (*instance.HardwareCharacteristics, error)) *MockMachineServiceGetHardwareCharacteristicsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceID mocks base method.
func (m *MockMachineService) GetInstanceID(arg0 context.Context, arg1 machine.UUID) (instance.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceID", arg0, arg1)
	ret0, _ := ret[0].(instance.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceID indicates an expected call of GetInstanceID.
func (mr *MockMachineServiceMockRecorder) GetInstanceID(arg0, arg1 any) *MockMachineServiceGetInstanceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceID", reflect.TypeOf((*MockMachineService)(nil).GetInstanceID), arg0, arg1)
	return &MockMachineServiceGetInstanceIDCall{Call: call}
}

// MockMachineServiceGetInstanceIDCall wrap *gomock.Call
type MockMachineServiceGetInstanceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetInstanceIDCall) Return(arg0 instance.Id, arg1 error) *MockMachineServiceGetInstanceIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetInstanceIDCall) Do(f func(context.Context, machine.UUID) (instance.Id, error)) *MockMachineServiceGetInstanceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetInstanceIDCall) DoAndReturn(f func(context.Context, machine.UUID) (instance.Id, error)) *MockMachineServiceGetInstanceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetInstanceIDAndName mocks base method.
func (m *MockMachineService) GetInstanceIDAndName(arg0 context.Context, arg1 machine.UUID) (instance.Id, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceIDAndName", arg0, arg1)
	ret0, _ := ret[0].(instance.Id)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceIDAndName indicates an expected call of GetInstanceIDAndName.
func (mr *MockMachineServiceMockRecorder) GetInstanceIDAndName(arg0, arg1 any) *MockMachineServiceGetInstanceIDAndNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceIDAndName", reflect.TypeOf((*MockMachineService)(nil).GetInstanceIDAndName), arg0, arg1)
	return &MockMachineServiceGetInstanceIDAndNameCall{Call: call}
}

// MockMachineServiceGetInstanceIDAndNameCall wrap *gomock.Call
type MockMachineServiceGetInstanceIDAndNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetInstanceIDAndNameCall) Return(arg0 instance.Id, arg1 string, arg2 error) *MockMachineServiceGetInstanceIDAndNameCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetInstanceIDAndNameCall) Do(f func(context.Context, machine.UUID) (instance.Id, string, error)) *MockMachineServiceGetInstanceIDAndNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetInstanceIDAndNameCall) DoAndReturn(f func(context.Context, machine.UUID) (instance.Id, string, error)) *MockMachineServiceGetInstanceIDAndNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineLife mocks base method.
func (m *MockMachineService) GetMachineLife(arg0 context.Context, arg1 machine.Name) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLife indicates an expected call of GetMachineLife.
func (mr *MockMachineServiceMockRecorder) GetMachineLife(arg0, arg1 any) *MockMachineServiceGetMachineLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLife", reflect.TypeOf((*MockMachineService)(nil).GetMachineLife), arg0, arg1)
	return &MockMachineServiceGetMachineLifeCall{Call: call}
}

// MockMachineServiceGetMachineLifeCall wrap *gomock.Call
type MockMachineServiceGetMachineLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineLifeCall) Return(arg0 life.Value, arg1 error) *MockMachineServiceGetMachineLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineLifeCall) Do(f func(context.Context, machine.Name) (life.Value, error)) *MockMachineServiceGetMachineLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineLifeCall) DoAndReturn(f func(context.Context, machine.Name) (life.Value, error)) *MockMachineServiceGetMachineLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockMachineService) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockMachineServiceMockRecorder) GetMachineUUID(arg0, arg1 any) *MockMachineServiceGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockMachineService)(nil).GetMachineUUID), arg0, arg1)
	return &MockMachineServiceGetMachineUUIDCall{Call: call}
}

// MockMachineServiceGetMachineUUIDCall wrap *gomock.Call
type MockMachineServiceGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockMachineServiceGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStorageProvisioningService is a mock of StorageProvisioningService interface.
type MockStorageProvisioningService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProvisioningServiceMockRecorder
}

// MockStorageProvisioningServiceMockRecorder is the mock recorder for MockStorageProvisioningService.
type MockStorageProvisioningServiceMockRecorder struct {
	mock *MockStorageProvisioningService
}

// NewMockStorageProvisioningService creates a new mock instance.
func NewMockStorageProvisioningService(ctrl *gomock.Controller) *MockStorageProvisioningService {
	mock := &MockStorageProvisioningService{ctrl: ctrl}
	mock.recorder = &MockStorageProvisioningServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageProvisioningService) EXPECT() *MockStorageProvisioningServiceMockRecorder {
	return m.recorder
}

// WatchMachineProvisionedFilesystems mocks base method.
func (m *MockStorageProvisioningService) WatchMachineProvisionedFilesystems(arg0 context.Context, arg1 machine.UUID) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineProvisionedFilesystems", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachineProvisionedFilesystems indicates an expected call of WatchMachineProvisionedFilesystems.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchMachineProvisionedFilesystems(arg0, arg1 any) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineProvisionedFilesystems", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchMachineProvisionedFilesystems), arg0, arg1)
	return &MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall{Call: call}
}

// MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall) Do(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall) DoAndReturn(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineProvisionedVolumes mocks base method.
func (m *MockStorageProvisioningService) WatchMachineProvisionedVolumes(arg0 context.Context, arg1 machine.UUID) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineProvisionedVolumes", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachineProvisionedVolumes indicates an expected call of WatchMachineProvisionedVolumes.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchMachineProvisionedVolumes(arg0, arg1 any) *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineProvisionedVolumes", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchMachineProvisionedVolumes), arg0, arg1)
	return &MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall{Call: call}
}

// MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall) Do(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall) DoAndReturn(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelProvisionedFilesystems mocks base method.
func (m *MockStorageProvisioningService) WatchModelProvisionedFilesystems(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelProvisionedFilesystems", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModelProvisionedFilesystems indicates an expected call of WatchModelProvisionedFilesystems.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchModelProvisionedFilesystems(arg0 any) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelProvisionedFilesystems", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchModelProvisionedFilesystems), arg0)
	return &MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall{Call: call}
}

// MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelProvisionedVolumes mocks base method.
func (m *MockStorageProvisioningService) WatchModelProvisionedVolumes(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelProvisionedVolumes", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModelProvisionedVolumes indicates an expected call of WatchModelProvisionedVolumes.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchModelProvisionedVolumes(arg0 any) *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelProvisionedVolumes", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchModelProvisionedVolumes), arg0)
	return &MockStorageProvisioningServiceWatchModelProvisionedVolumesCall{Call: call}
}

// MockStorageProvisioningServiceWatchModelProvisionedVolumesCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchModelProvisionedVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchVolumeAttachmentPlans mocks base method.
func (m *MockStorageProvisioningService) WatchVolumeAttachmentPlans(arg0 context.Context, arg1 machine.UUID) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchVolumeAttachmentPlans", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchVolumeAttachmentPlans indicates an expected call of WatchVolumeAttachmentPlans.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchVolumeAttachmentPlans(arg0, arg1 any) *MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchVolumeAttachmentPlans", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchVolumeAttachmentPlans), arg0, arg1)
	return &MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall{Call: call}
}

// MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall) Do(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall) DoAndReturn(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchVolumeAttachmentPlansCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
