// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/storageprovisioner (interfaces: BlockDeviceService,StorageProvisioningService)
//
// Generated by this command:
//
//	mockgen -typed -package storageprovisioner_test -destination blockdevice_mock_test.go github.com/juju/juju/apiserver/facades/agent/storageprovisioner BlockDeviceService,StorageProvisioningService
//

// Package storageprovisioner_test is a generated GoMock package.
package storageprovisioner_test

import (
	context "context"
	reflect "reflect"

	blockdevice "github.com/juju/juju/core/blockdevice"
	machine "github.com/juju/juju/core/machine"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockDeviceService is a mock of BlockDeviceService interface.
type MockBlockDeviceService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockDeviceServiceMockRecorder
}

// MockBlockDeviceServiceMockRecorder is the mock recorder for MockBlockDeviceService.
type MockBlockDeviceServiceMockRecorder struct {
	mock *MockBlockDeviceService
}

// NewMockBlockDeviceService creates a new mock instance.
func NewMockBlockDeviceService(ctrl *gomock.Controller) *MockBlockDeviceService {
	mock := &MockBlockDeviceService{ctrl: ctrl}
	mock.recorder = &MockBlockDeviceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockDeviceService) EXPECT() *MockBlockDeviceServiceMockRecorder {
	return m.recorder
}

// BlockDevices mocks base method.
func (m *MockBlockDeviceService) BlockDevices(arg0 context.Context, arg1 string) ([]blockdevice.BlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockDevices", arg0, arg1)
	ret0, _ := ret[0].([]blockdevice.BlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockDevices indicates an expected call of BlockDevices.
func (mr *MockBlockDeviceServiceMockRecorder) BlockDevices(arg0, arg1 any) *MockBlockDeviceServiceBlockDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockDevices", reflect.TypeOf((*MockBlockDeviceService)(nil).BlockDevices), arg0, arg1)
	return &MockBlockDeviceServiceBlockDevicesCall{Call: call}
}

// MockBlockDeviceServiceBlockDevicesCall wrap *gomock.Call
type MockBlockDeviceServiceBlockDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceServiceBlockDevicesCall) Return(arg0 []blockdevice.BlockDevice, arg1 error) *MockBlockDeviceServiceBlockDevicesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceServiceBlockDevicesCall) Do(f func(context.Context, string) ([]blockdevice.BlockDevice, error)) *MockBlockDeviceServiceBlockDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceServiceBlockDevicesCall) DoAndReturn(f func(context.Context, string) ([]blockdevice.BlockDevice, error)) *MockBlockDeviceServiceBlockDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchBlockDevices mocks base method.
func (m *MockBlockDeviceService) WatchBlockDevices(arg0 context.Context, arg1 string) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchBlockDevices", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchBlockDevices indicates an expected call of WatchBlockDevices.
func (mr *MockBlockDeviceServiceMockRecorder) WatchBlockDevices(arg0, arg1 any) *MockBlockDeviceServiceWatchBlockDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchBlockDevices", reflect.TypeOf((*MockBlockDeviceService)(nil).WatchBlockDevices), arg0, arg1)
	return &MockBlockDeviceServiceWatchBlockDevicesCall{Call: call}
}

// MockBlockDeviceServiceWatchBlockDevicesCall wrap *gomock.Call
type MockBlockDeviceServiceWatchBlockDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceServiceWatchBlockDevicesCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockBlockDeviceServiceWatchBlockDevicesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceServiceWatchBlockDevicesCall) Do(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockBlockDeviceServiceWatchBlockDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceServiceWatchBlockDevicesCall) DoAndReturn(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockBlockDeviceServiceWatchBlockDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStorageProvisioningService is a mock of StorageProvisioningService interface.
type MockStorageProvisioningService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProvisioningServiceMockRecorder
}

// MockStorageProvisioningServiceMockRecorder is the mock recorder for MockStorageProvisioningService.
type MockStorageProvisioningServiceMockRecorder struct {
	mock *MockStorageProvisioningService
}

// NewMockStorageProvisioningService creates a new mock instance.
func NewMockStorageProvisioningService(ctrl *gomock.Controller) *MockStorageProvisioningService {
	mock := &MockStorageProvisioningService{ctrl: ctrl}
	mock.recorder = &MockStorageProvisioningServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageProvisioningService) EXPECT() *MockStorageProvisioningServiceMockRecorder {
	return m.recorder
}

// WatchMachineProvisionedFilesystems mocks base method.
func (m *MockStorageProvisioningService) WatchMachineProvisionedFilesystems(arg0 context.Context, arg1 machine.UUID) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineProvisionedFilesystems", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachineProvisionedFilesystems indicates an expected call of WatchMachineProvisionedFilesystems.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchMachineProvisionedFilesystems(arg0, arg1 any) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineProvisionedFilesystems", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchMachineProvisionedFilesystems), arg0, arg1)
	return &MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall{Call: call}
}

// MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall) Do(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall) DoAndReturn(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMachineProvisionedVolumes mocks base method.
func (m *MockStorageProvisioningService) WatchMachineProvisionedVolumes(arg0 context.Context, arg1 machine.UUID) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachineProvisionedVolumes", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachineProvisionedVolumes indicates an expected call of WatchMachineProvisionedVolumes.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchMachineProvisionedVolumes(arg0, arg1 any) *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachineProvisionedVolumes", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchMachineProvisionedVolumes), arg0, arg1)
	return &MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall{Call: call}
}

// MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall) Do(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall) DoAndReturn(f func(context.Context, machine.UUID) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchMachineProvisionedVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelProvisionedFilesystems mocks base method.
func (m *MockStorageProvisioningService) WatchModelProvisionedFilesystems(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelProvisionedFilesystems", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModelProvisionedFilesystems indicates an expected call of WatchModelProvisionedFilesystems.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchModelProvisionedFilesystems(arg0 any) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelProvisionedFilesystems", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchModelProvisionedFilesystems), arg0)
	return &MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall{Call: call}
}

// MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedFilesystemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchModelProvisionedVolumes mocks base method.
func (m *MockStorageProvisioningService) WatchModelProvisionedVolumes(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelProvisionedVolumes", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModelProvisionedVolumes indicates an expected call of WatchModelProvisionedVolumes.
func (mr *MockStorageProvisioningServiceMockRecorder) WatchModelProvisionedVolumes(arg0 any) *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelProvisionedVolumes", reflect.TypeOf((*MockStorageProvisioningService)(nil).WatchModelProvisionedVolumes), arg0)
	return &MockStorageProvisioningServiceWatchModelProvisionedVolumesCall{Call: call}
}

// MockStorageProvisioningServiceWatchModelProvisionedVolumesCall wrap *gomock.Call
type MockStorageProvisioningServiceWatchModelProvisionedVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockStorageProvisioningServiceWatchModelProvisionedVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
