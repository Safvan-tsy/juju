// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facade (interfaces: Resources,FacadeRegistry)
//
// Generated by this command:
//
//	mockgen -typed -package storageprovisioner -destination facade_mock_test.go github.com/juju/juju/apiserver/facade Resources,FacadeRegistry
//

// Package storageprovisioner is a generated GoMock package.
package storageprovisioner

import (
	reflect "reflect"

	facade "github.com/juju/juju/apiserver/facade"
	worker "github.com/juju/worker/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockResources is a mock of Resources interface.
type MockResources struct {
	ctrl     *gomock.Controller
	recorder *MockResourcesMockRecorder
}

// MockResourcesMockRecorder is the mock recorder for MockResources.
type MockResourcesMockRecorder struct {
	mock *MockResources
}

// NewMockResources creates a new mock instance.
func NewMockResources(ctrl *gomock.Controller) *MockResources {
	mock := &MockResources{ctrl: ctrl}
	mock.recorder = &MockResourcesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResources) EXPECT() *MockResourcesMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockResources) Get(arg0 string) worker.Worker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(worker.Worker)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockResourcesMockRecorder) Get(arg0 any) *MockResourcesGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResources)(nil).Get), arg0)
	return &MockResourcesGetCall{Call: call}
}

// MockResourcesGetCall wrap *gomock.Call
type MockResourcesGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesGetCall) Return(arg0 worker.Worker) *MockResourcesGetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesGetCall) Do(f func(string) worker.Worker) *MockResourcesGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesGetCall) DoAndReturn(f func(string) worker.Worker) *MockResourcesGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Register mocks base method.
func (m *MockResources) Register(arg0 worker.Worker) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockResourcesMockRecorder) Register(arg0 any) *MockResourcesRegisterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockResources)(nil).Register), arg0)
	return &MockResourcesRegisterCall{Call: call}
}

// MockResourcesRegisterCall wrap *gomock.Call
type MockResourcesRegisterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesRegisterCall) Return(arg0 string) *MockResourcesRegisterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesRegisterCall) Do(f func(worker.Worker) string) *MockResourcesRegisterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesRegisterCall) DoAndReturn(f func(worker.Worker) string) *MockResourcesRegisterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *MockResources) Stop(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockResourcesMockRecorder) Stop(arg0 any) *MockResourcesStopCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockResources)(nil).Stop), arg0)
	return &MockResourcesStopCall{Call: call}
}

// MockResourcesStopCall wrap *gomock.Call
type MockResourcesStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesStopCall) Return(arg0 error) *MockResourcesStopCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesStopCall) Do(f func(string) error) *MockResourcesStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesStopCall) DoAndReturn(f func(string) error) *MockResourcesStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFacadeRegistry is a mock of FacadeRegistry interface.
type MockFacadeRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockFacadeRegistryMockRecorder
}

// MockFacadeRegistryMockRecorder is the mock recorder for MockFacadeRegistry.
type MockFacadeRegistryMockRecorder struct {
	mock *MockFacadeRegistry
}

// NewMockFacadeRegistry creates a new mock instance.
func NewMockFacadeRegistry(ctrl *gomock.Controller) *MockFacadeRegistry {
	mock := &MockFacadeRegistry{ctrl: ctrl}
	mock.recorder = &MockFacadeRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacadeRegistry) EXPECT() *MockFacadeRegistryMockRecorder {
	return m.recorder
}

// MustRegister mocks base method.
func (m *MockFacadeRegistry) MustRegister(arg0 string, arg1 int, arg2 facade.Factory, arg3 reflect.Type) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustRegister", arg0, arg1, arg2, arg3)
}

// MustRegister indicates an expected call of MustRegister.
func (mr *MockFacadeRegistryMockRecorder) MustRegister(arg0, arg1, arg2, arg3 any) *MockFacadeRegistryMustRegisterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustRegister", reflect.TypeOf((*MockFacadeRegistry)(nil).MustRegister), arg0, arg1, arg2, arg3)
	return &MockFacadeRegistryMustRegisterCall{Call: call}
}

// MockFacadeRegistryMustRegisterCall wrap *gomock.Call
type MockFacadeRegistryMustRegisterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeRegistryMustRegisterCall) Return() *MockFacadeRegistryMustRegisterCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeRegistryMustRegisterCall) Do(f func(string, int, facade.Factory, reflect.Type)) *MockFacadeRegistryMustRegisterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeRegistryMustRegisterCall) DoAndReturn(f func(string, int, facade.Factory, reflect.Type)) *MockFacadeRegistryMustRegisterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MustRegisterForMultiModel mocks base method.
func (m *MockFacadeRegistry) MustRegisterForMultiModel(arg0 string, arg1 int, arg2 facade.MultiModelFactory, arg3 reflect.Type) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustRegisterForMultiModel", arg0, arg1, arg2, arg3)
}

// MustRegisterForMultiModel indicates an expected call of MustRegisterForMultiModel.
func (mr *MockFacadeRegistryMockRecorder) MustRegisterForMultiModel(arg0, arg1, arg2, arg3 any) *MockFacadeRegistryMustRegisterForMultiModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustRegisterForMultiModel", reflect.TypeOf((*MockFacadeRegistry)(nil).MustRegisterForMultiModel), arg0, arg1, arg2, arg3)
	return &MockFacadeRegistryMustRegisterForMultiModelCall{Call: call}
}

// MockFacadeRegistryMustRegisterForMultiModelCall wrap *gomock.Call
type MockFacadeRegistryMustRegisterForMultiModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeRegistryMustRegisterForMultiModelCall) Return() *MockFacadeRegistryMustRegisterForMultiModelCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeRegistryMustRegisterForMultiModelCall) Do(f func(string, int, facade.MultiModelFactory, reflect.Type)) *MockFacadeRegistryMustRegisterForMultiModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeRegistryMustRegisterForMultiModelCall) DoAndReturn(f func(string, int, facade.MultiModelFactory, reflect.Type)) *MockFacadeRegistryMustRegisterForMultiModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
