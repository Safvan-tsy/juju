// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/watcher (interfaces: StringsWatcher,MachineStorageIDsWatcher)
//
// Generated by this command:
//
//	mockgen -typed -package storageprovisioner -destination watcher_mock_test.go github.com/juju/juju/core/watcher StringsWatcher,MachineStorageIDsWatcher
//

// Package storageprovisioner is a generated GoMock package.
package storageprovisioner

import (
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockStringsWatcher is a mock of StringsWatcher interface.
type MockStringsWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockStringsWatcherMockRecorder
}

// MockStringsWatcherMockRecorder is the mock recorder for MockStringsWatcher.
type MockStringsWatcherMockRecorder struct {
	mock *MockStringsWatcher
}

// NewMockStringsWatcher creates a new mock instance.
func NewMockStringsWatcher(ctrl *gomock.Controller) *MockStringsWatcher {
	mock := &MockStringsWatcher{ctrl: ctrl}
	mock.recorder = &MockStringsWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringsWatcher) EXPECT() *MockStringsWatcherMockRecorder {
	return m.recorder
}

// Changes mocks base method.
func (m *MockStringsWatcher) Changes() <-chan []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(<-chan []string)
	return ret0
}

// Changes indicates an expected call of Changes.
func (mr *MockStringsWatcherMockRecorder) Changes() *MockStringsWatcherChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockStringsWatcher)(nil).Changes))
	return &MockStringsWatcherChangesCall{Call: call}
}

// MockStringsWatcherChangesCall wrap *gomock.Call
type MockStringsWatcherChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStringsWatcherChangesCall) Return(arg0 <-chan []string) *MockStringsWatcherChangesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStringsWatcherChangesCall) Do(f func() <-chan []string) *MockStringsWatcherChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStringsWatcherChangesCall) DoAndReturn(f func() <-chan []string) *MockStringsWatcherChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Kill mocks base method.
func (m *MockStringsWatcher) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockStringsWatcherMockRecorder) Kill() *MockStringsWatcherKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockStringsWatcher)(nil).Kill))
	return &MockStringsWatcherKillCall{Call: call}
}

// MockStringsWatcherKillCall wrap *gomock.Call
type MockStringsWatcherKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStringsWatcherKillCall) Return() *MockStringsWatcherKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStringsWatcherKillCall) Do(f func()) *MockStringsWatcherKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStringsWatcherKillCall) DoAndReturn(f func()) *MockStringsWatcherKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockStringsWatcher) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockStringsWatcherMockRecorder) Wait() *MockStringsWatcherWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockStringsWatcher)(nil).Wait))
	return &MockStringsWatcherWaitCall{Call: call}
}

// MockStringsWatcherWaitCall wrap *gomock.Call
type MockStringsWatcherWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStringsWatcherWaitCall) Return(arg0 error) *MockStringsWatcherWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStringsWatcherWaitCall) Do(f func() error) *MockStringsWatcherWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStringsWatcherWaitCall) DoAndReturn(f func() error) *MockStringsWatcherWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineStorageIDsWatcher is a mock of MachineStorageIDsWatcher interface.
type MockMachineStorageIDsWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMachineStorageIDsWatcherMockRecorder
}

// MockMachineStorageIDsWatcherMockRecorder is the mock recorder for MockMachineStorageIDsWatcher.
type MockMachineStorageIDsWatcherMockRecorder struct {
	mock *MockMachineStorageIDsWatcher
}

// NewMockMachineStorageIDsWatcher creates a new mock instance.
func NewMockMachineStorageIDsWatcher(ctrl *gomock.Controller) *MockMachineStorageIDsWatcher {
	mock := &MockMachineStorageIDsWatcher{ctrl: ctrl}
	mock.recorder = &MockMachineStorageIDsWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineStorageIDsWatcher) EXPECT() *MockMachineStorageIDsWatcherMockRecorder {
	return m.recorder
}

// Changes mocks base method.
func (m *MockMachineStorageIDsWatcher) Changes() <-chan []watcher.MachineStorageID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(<-chan []watcher.MachineStorageID)
	return ret0
}

// Changes indicates an expected call of Changes.
func (mr *MockMachineStorageIDsWatcherMockRecorder) Changes() *MockMachineStorageIDsWatcherChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockMachineStorageIDsWatcher)(nil).Changes))
	return &MockMachineStorageIDsWatcherChangesCall{Call: call}
}

// MockMachineStorageIDsWatcherChangesCall wrap *gomock.Call
type MockMachineStorageIDsWatcherChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineStorageIDsWatcherChangesCall) Return(arg0 <-chan []watcher.MachineStorageID) *MockMachineStorageIDsWatcherChangesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineStorageIDsWatcherChangesCall) Do(f func() <-chan []watcher.MachineStorageID) *MockMachineStorageIDsWatcherChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineStorageIDsWatcherChangesCall) DoAndReturn(f func() <-chan []watcher.MachineStorageID) *MockMachineStorageIDsWatcherChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Kill mocks base method.
func (m *MockMachineStorageIDsWatcher) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockMachineStorageIDsWatcherMockRecorder) Kill() *MockMachineStorageIDsWatcherKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockMachineStorageIDsWatcher)(nil).Kill))
	return &MockMachineStorageIDsWatcherKillCall{Call: call}
}

// MockMachineStorageIDsWatcherKillCall wrap *gomock.Call
type MockMachineStorageIDsWatcherKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineStorageIDsWatcherKillCall) Return() *MockMachineStorageIDsWatcherKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineStorageIDsWatcherKillCall) Do(f func()) *MockMachineStorageIDsWatcherKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineStorageIDsWatcherKillCall) DoAndReturn(f func()) *MockMachineStorageIDsWatcherKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockMachineStorageIDsWatcher) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockMachineStorageIDsWatcherMockRecorder) Wait() *MockMachineStorageIDsWatcherWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockMachineStorageIDsWatcher)(nil).Wait))
	return &MockMachineStorageIDsWatcherWaitCall{Call: call}
}

// MockMachineStorageIDsWatcherWaitCall wrap *gomock.Call
type MockMachineStorageIDsWatcherWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineStorageIDsWatcherWaitCall) Return(arg0 error) *MockMachineStorageIDsWatcherWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineStorageIDsWatcherWaitCall) Do(f func() error) *MockMachineStorageIDsWatcherWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineStorageIDsWatcherWaitCall) DoAndReturn(f func() error) *MockMachineStorageIDsWatcherWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
