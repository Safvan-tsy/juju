// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/migrationflag (interfaces: ModelMigrationService)
//
// Generated by this command:
//
//	mockgen -typed -package migrationflag_test -destination mocks_test.go github.com/juju/juju/apiserver/facades/agent/migrationflag ModelMigrationService
//

// Package migrationflag_test is a generated GoMock package.
package migrationflag_test

import (
	context "context"
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	modelmigration "github.com/juju/juju/domain/modelmigration"
	gomock "go.uber.org/mock/gomock"
)

// MockModelMigrationService is a mock of ModelMigrationService interface.
type MockModelMigrationService struct {
	ctrl     *gomock.Controller
	recorder *MockModelMigrationServiceMockRecorder
}

// MockModelMigrationServiceMockRecorder is the mock recorder for MockModelMigrationService.
type MockModelMigrationServiceMockRecorder struct {
	mock *MockModelMigrationService
}

// NewMockModelMigrationService creates a new mock instance.
func NewMockModelMigrationService(ctrl *gomock.Controller) *MockModelMigrationService {
	mock := &MockModelMigrationService{ctrl: ctrl}
	mock.recorder = &MockModelMigrationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelMigrationService) EXPECT() *MockModelMigrationServiceMockRecorder {
	return m.recorder
}

// Migration mocks base method.
func (m *MockModelMigrationService) Migration(arg0 context.Context) (modelmigration.Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migration", arg0)
	ret0, _ := ret[0].(modelmigration.Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Migration indicates an expected call of Migration.
func (mr *MockModelMigrationServiceMockRecorder) Migration(arg0 any) *MockModelMigrationServiceMigrationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migration", reflect.TypeOf((*MockModelMigrationService)(nil).Migration), arg0)
	return &MockModelMigrationServiceMigrationCall{Call: call}
}

// MockModelMigrationServiceMigrationCall wrap *gomock.Call
type MockModelMigrationServiceMigrationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationServiceMigrationCall) Return(arg0 modelmigration.Migration, arg1 error) *MockModelMigrationServiceMigrationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationServiceMigrationCall) Do(f func(context.Context) (modelmigration.Migration, error)) *MockModelMigrationServiceMigrationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationServiceMigrationCall) DoAndReturn(f func(context.Context) (modelmigration.Migration, error)) *MockModelMigrationServiceMigrationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMigrationPhase mocks base method.
func (m *MockModelMigrationService) WatchMigrationPhase(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMigrationPhase", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMigrationPhase indicates an expected call of WatchMigrationPhase.
func (mr *MockModelMigrationServiceMockRecorder) WatchMigrationPhase(arg0 any) *MockModelMigrationServiceWatchMigrationPhaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMigrationPhase", reflect.TypeOf((*MockModelMigrationService)(nil).WatchMigrationPhase), arg0)
	return &MockModelMigrationServiceWatchMigrationPhaseCall{Call: call}
}

// MockModelMigrationServiceWatchMigrationPhaseCall wrap *gomock.Call
type MockModelMigrationServiceWatchMigrationPhaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationServiceWatchMigrationPhaseCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockModelMigrationServiceWatchMigrationPhaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationServiceWatchMigrationPhaseCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockModelMigrationServiceWatchMigrationPhaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationServiceWatchMigrationPhaseCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockModelMigrationServiceWatchMigrationPhaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
