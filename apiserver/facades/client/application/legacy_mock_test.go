// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/application (interfaces: Backend,Application,CaasBrokerInterface)
//
// Generated by this command:
//
//	mockgen -typed -package application -destination legacy_mock_test.go github.com/juju/juju/apiserver/facades/client/application Backend,Application,CaasBrokerInterface
//

// Package application is a generated GoMock package.
package application

import (
	context "context"
	reflect "reflect"

	config "github.com/juju/juju/core/config"
	constraints "github.com/juju/juju/core/constraints"
	objectstore "github.com/juju/juju/core/objectstore"
	charm "github.com/juju/juju/internal/charm"
	configschema "github.com/juju/juju/internal/configschema"
	state "github.com/juju/juju/state"
	schema "github.com/juju/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// AddApplication mocks base method.
func (m *MockBackend) AddApplication(arg0 state.AddApplicationArgs, arg1 objectstore.ObjectStore) (Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplication", arg0, arg1)
	ret0, _ := ret[0].(Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApplication indicates an expected call of AddApplication.
func (mr *MockBackendMockRecorder) AddApplication(arg0, arg1 any) *MockBackendAddApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplication", reflect.TypeOf((*MockBackend)(nil).AddApplication), arg0, arg1)
	return &MockBackendAddApplicationCall{Call: call}
}

// MockBackendAddApplicationCall wrap *gomock.Call
type MockBackendAddApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAddApplicationCall) Return(arg0 Application, arg1 error) *MockBackendAddApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAddApplicationCall) Do(f func(state.AddApplicationArgs, objectstore.ObjectStore) (Application, error)) *MockBackendAddApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAddApplicationCall) DoAndReturn(f func(state.AddApplicationArgs, objectstore.ObjectStore) (Application, error)) *MockBackendAddApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Application mocks base method.
func (m *MockBackend) Application(arg0 string) (Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application", arg0)
	ret0, _ := ret[0].(Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application.
func (mr *MockBackendMockRecorder) Application(arg0 any) *MockBackendApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockBackend)(nil).Application), arg0)
	return &MockBackendApplicationCall{Call: call}
}

// MockBackendApplicationCall wrap *gomock.Call
type MockBackendApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendApplicationCall) Return(arg0 Application, arg1 error) *MockBackendApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendApplicationCall) Do(f func(string) (Application, error)) *MockBackendApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendApplicationCall) DoAndReturn(f func(string) (Application, error)) *MockBackendApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyOperation mocks base method.
func (m *MockBackend) ApplyOperation(arg0 state.ModelOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyOperation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyOperation indicates an expected call of ApplyOperation.
func (mr *MockBackendMockRecorder) ApplyOperation(arg0 any) *MockBackendApplyOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyOperation", reflect.TypeOf((*MockBackend)(nil).ApplyOperation), arg0)
	return &MockBackendApplyOperationCall{Call: call}
}

// MockBackendApplyOperationCall wrap *gomock.Call
type MockBackendApplyOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendApplyOperationCall) Return(arg0 error) *MockBackendApplyOperationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendApplyOperationCall) Do(f func(state.ModelOperation) error) *MockBackendApplyOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendApplyOperationCall) DoAndReturn(f func(state.ModelOperation) error) *MockBackendApplyOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Machine mocks base method.
func (m *MockBackend) Machine(arg0 string) (Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockBackendMockRecorder) Machine(arg0 any) *MockBackendMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockBackend)(nil).Machine), arg0)
	return &MockBackendMachineCall{Call: call}
}

// MockBackendMachineCall wrap *gomock.Call
type MockBackendMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendMachineCall) Return(arg0 Machine, arg1 error) *MockBackendMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendMachineCall) Do(f func(string) (Machine, error)) *MockBackendMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendMachineCall) DoAndReturn(f func(string) (Machine, error)) *MockBackendMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// SetCharm mocks base method.
func (m *MockApplication) SetCharm(arg0 state.SetCharmConfig, arg1 objectstore.ObjectStore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCharm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCharm indicates an expected call of SetCharm.
func (mr *MockApplicationMockRecorder) SetCharm(arg0, arg1 any) *MockApplicationSetCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharm", reflect.TypeOf((*MockApplication)(nil).SetCharm), arg0, arg1)
	return &MockApplicationSetCharmCall{Call: call}
}

// MockApplicationSetCharmCall wrap *gomock.Call
type MockApplicationSetCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationSetCharmCall) Return(arg0 error) *MockApplicationSetCharmCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationSetCharmCall) Do(f func(state.SetCharmConfig, objectstore.ObjectStore) error) *MockApplicationSetCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationSetCharmCall) DoAndReturn(f func(state.SetCharmConfig, objectstore.ObjectStore) error) *MockApplicationSetCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetConstraints mocks base method.
func (m *MockApplication) SetConstraints(arg0 constraints.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConstraints", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConstraints indicates an expected call of SetConstraints.
func (mr *MockApplicationMockRecorder) SetConstraints(arg0 any) *MockApplicationSetConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConstraints", reflect.TypeOf((*MockApplication)(nil).SetConstraints), arg0)
	return &MockApplicationSetConstraintsCall{Call: call}
}

// MockApplicationSetConstraintsCall wrap *gomock.Call
type MockApplicationSetConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationSetConstraintsCall) Return(arg0 error) *MockApplicationSetConstraintsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationSetConstraintsCall) Do(f func(constraints.Value) error) *MockApplicationSetConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationSetConstraintsCall) DoAndReturn(f func(constraints.Value) error) *MockApplicationSetConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateApplicationConfig mocks base method.
func (m *MockApplication) UpdateApplicationConfig(arg0 config.ConfigAttributes, arg1 []string, arg2 configschema.Fields, arg3 schema.Defaults) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationConfig", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplicationConfig indicates an expected call of UpdateApplicationConfig.
func (mr *MockApplicationMockRecorder) UpdateApplicationConfig(arg0, arg1, arg2, arg3 any) *MockApplicationUpdateApplicationConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationConfig", reflect.TypeOf((*MockApplication)(nil).UpdateApplicationConfig), arg0, arg1, arg2, arg3)
	return &MockApplicationUpdateApplicationConfigCall{Call: call}
}

// MockApplicationUpdateApplicationConfigCall wrap *gomock.Call
type MockApplicationUpdateApplicationConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationUpdateApplicationConfigCall) Return(arg0 error) *MockApplicationUpdateApplicationConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationUpdateApplicationConfigCall) Do(f func(config.ConfigAttributes, []string, configschema.Fields, schema.Defaults) error) *MockApplicationUpdateApplicationConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationUpdateApplicationConfigCall) DoAndReturn(f func(config.ConfigAttributes, []string, configschema.Fields, schema.Defaults) error) *MockApplicationUpdateApplicationConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCharmConfig mocks base method.
func (m *MockApplication) UpdateCharmConfig(arg0 charm.Settings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCharmConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCharmConfig indicates an expected call of UpdateCharmConfig.
func (mr *MockApplicationMockRecorder) UpdateCharmConfig(arg0 any) *MockApplicationUpdateCharmConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCharmConfig", reflect.TypeOf((*MockApplication)(nil).UpdateCharmConfig), arg0)
	return &MockApplicationUpdateCharmConfigCall{Call: call}
}

// MockApplicationUpdateCharmConfigCall wrap *gomock.Call
type MockApplicationUpdateCharmConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationUpdateCharmConfigCall) Return(arg0 error) *MockApplicationUpdateCharmConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationUpdateCharmConfigCall) Do(f func(charm.Settings) error) *MockApplicationUpdateCharmConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationUpdateCharmConfigCall) DoAndReturn(f func(charm.Settings) error) *MockApplicationUpdateCharmConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCaasBrokerInterface is a mock of CaasBrokerInterface interface.
type MockCaasBrokerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCaasBrokerInterfaceMockRecorder
}

// MockCaasBrokerInterfaceMockRecorder is the mock recorder for MockCaasBrokerInterface.
type MockCaasBrokerInterfaceMockRecorder struct {
	mock *MockCaasBrokerInterface
}

// NewMockCaasBrokerInterface creates a new mock instance.
func NewMockCaasBrokerInterface(ctrl *gomock.Controller) *MockCaasBrokerInterface {
	mock := &MockCaasBrokerInterface{ctrl: ctrl}
	mock.recorder = &MockCaasBrokerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaasBrokerInterface) EXPECT() *MockCaasBrokerInterfaceMockRecorder {
	return m.recorder
}

// ValidateStorageClass mocks base method.
func (m *MockCaasBrokerInterface) ValidateStorageClass(arg0 context.Context, arg1 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateStorageClass", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateStorageClass indicates an expected call of ValidateStorageClass.
func (mr *MockCaasBrokerInterfaceMockRecorder) ValidateStorageClass(arg0, arg1 any) *MockCaasBrokerInterfaceValidateStorageClassCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateStorageClass", reflect.TypeOf((*MockCaasBrokerInterface)(nil).ValidateStorageClass), arg0, arg1)
	return &MockCaasBrokerInterfaceValidateStorageClassCall{Call: call}
}

// MockCaasBrokerInterfaceValidateStorageClassCall wrap *gomock.Call
type MockCaasBrokerInterfaceValidateStorageClassCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCaasBrokerInterfaceValidateStorageClassCall) Return(arg0 error) *MockCaasBrokerInterfaceValidateStorageClassCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCaasBrokerInterfaceValidateStorageClassCall) Do(f func(context.Context, map[string]any) error) *MockCaasBrokerInterfaceValidateStorageClassCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCaasBrokerInterfaceValidateStorageClassCall) DoAndReturn(f func(context.Context, map[string]any) error) *MockCaasBrokerInterfaceValidateStorageClassCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
