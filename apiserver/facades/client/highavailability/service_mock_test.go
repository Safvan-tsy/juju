// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/highavailability (interfaces: ControllerNodeService,BlockCommandService,ApplicationService)
//
// Generated by this command:
//
//	mockgen -typed -package highavailability -destination service_mock_test.go github.com/juju/juju/apiserver/facades/client/highavailability ControllerNodeService,BlockCommandService,ApplicationService
//

// Package highavailability is a generated GoMock package.
package highavailability

import (
	context "context"
	reflect "reflect"

	machine "github.com/juju/juju/core/machine"
	network "github.com/juju/juju/core/network"
	service "github.com/juju/juju/domain/application/service"
	blockcommand "github.com/juju/juju/domain/blockcommand"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerNodeService is a mock of ControllerNodeService interface.
type MockControllerNodeService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerNodeServiceMockRecorder
}

// MockControllerNodeServiceMockRecorder is the mock recorder for MockControllerNodeService.
type MockControllerNodeServiceMockRecorder struct {
	mock *MockControllerNodeService
}

// NewMockControllerNodeService creates a new mock instance.
func NewMockControllerNodeService(ctrl *gomock.Controller) *MockControllerNodeService {
	mock := &MockControllerNodeService{ctrl: ctrl}
	mock.recorder = &MockControllerNodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerNodeService) EXPECT() *MockControllerNodeServiceMockRecorder {
	return m.recorder
}

// CurateNodes mocks base method.
func (m *MockControllerNodeService) CurateNodes(arg0 context.Context, arg1, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurateNodes", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CurateNodes indicates an expected call of CurateNodes.
func (mr *MockControllerNodeServiceMockRecorder) CurateNodes(arg0, arg1, arg2 any) *MockControllerNodeServiceCurateNodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurateNodes", reflect.TypeOf((*MockControllerNodeService)(nil).CurateNodes), arg0, arg1, arg2)
	return &MockControllerNodeServiceCurateNodesCall{Call: call}
}

// MockControllerNodeServiceCurateNodesCall wrap *gomock.Call
type MockControllerNodeServiceCurateNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceCurateNodesCall) Return(arg0 error) *MockControllerNodeServiceCurateNodesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceCurateNodesCall) Do(f func(context.Context, []string, []string) error) *MockControllerNodeServiceCurateNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceCurateNodesCall) DoAndReturn(f func(context.Context, []string, []string) error) *MockControllerNodeServiceCurateNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControllerAPIAddresses mocks base method.
func (m *MockControllerNodeService) GetControllerAPIAddresses(arg0 context.Context) (map[string]network.HostPorts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerAPIAddresses", arg0)
	ret0, _ := ret[0].(map[string]network.HostPorts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerAPIAddresses indicates an expected call of GetControllerAPIAddresses.
func (mr *MockControllerNodeServiceMockRecorder) GetControllerAPIAddresses(arg0 any) *MockControllerNodeServiceGetControllerAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerAPIAddresses", reflect.TypeOf((*MockControllerNodeService)(nil).GetControllerAPIAddresses), arg0)
	return &MockControllerNodeServiceGetControllerAPIAddressesCall{Call: call}
}

// MockControllerNodeServiceGetControllerAPIAddressesCall wrap *gomock.Call
type MockControllerNodeServiceGetControllerAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceGetControllerAPIAddressesCall) Return(arg0 map[string]network.HostPorts, arg1 error) *MockControllerNodeServiceGetControllerAPIAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceGetControllerAPIAddressesCall) Do(f func(context.Context) (map[string]network.HostPorts, error)) *MockControllerNodeServiceGetControllerAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceGetControllerAPIAddressesCall) DoAndReturn(f func(context.Context) (map[string]network.HostPorts, error)) *MockControllerNodeServiceGetControllerAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControllerIDs mocks base method.
func (m *MockControllerNodeService) GetControllerIDs(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerIDs indicates an expected call of GetControllerIDs.
func (mr *MockControllerNodeServiceMockRecorder) GetControllerIDs(arg0 any) *MockControllerNodeServiceGetControllerIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerIDs", reflect.TypeOf((*MockControllerNodeService)(nil).GetControllerIDs), arg0)
	return &MockControllerNodeServiceGetControllerIDsCall{Call: call}
}

// MockControllerNodeServiceGetControllerIDsCall wrap *gomock.Call
type MockControllerNodeServiceGetControllerIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceGetControllerIDsCall) Return(arg0 []string, arg1 error) *MockControllerNodeServiceGetControllerIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceGetControllerIDsCall) Do(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetControllerIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceGetControllerIDsCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetControllerIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBlockCommandService is a mock of BlockCommandService interface.
type MockBlockCommandService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockCommandServiceMockRecorder
}

// MockBlockCommandServiceMockRecorder is the mock recorder for MockBlockCommandService.
type MockBlockCommandServiceMockRecorder struct {
	mock *MockBlockCommandService
}

// NewMockBlockCommandService creates a new mock instance.
func NewMockBlockCommandService(ctrl *gomock.Controller) *MockBlockCommandService {
	mock := &MockBlockCommandService{ctrl: ctrl}
	mock.recorder = &MockBlockCommandServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockCommandService) EXPECT() *MockBlockCommandServiceMockRecorder {
	return m.recorder
}

// GetBlockSwitchedOn mocks base method.
func (m *MockBlockCommandService) GetBlockSwitchedOn(arg0 context.Context, arg1 blockcommand.BlockType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockSwitchedOn", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockSwitchedOn indicates an expected call of GetBlockSwitchedOn.
func (mr *MockBlockCommandServiceMockRecorder) GetBlockSwitchedOn(arg0, arg1 any) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockSwitchedOn", reflect.TypeOf((*MockBlockCommandService)(nil).GetBlockSwitchedOn), arg0, arg1)
	return &MockBlockCommandServiceGetBlockSwitchedOnCall{Call: call}
}

// MockBlockCommandServiceGetBlockSwitchedOnCall wrap *gomock.Call
type MockBlockCommandServiceGetBlockSwitchedOnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockCommandServiceGetBlockSwitchedOnCall) Return(arg0 string, arg1 error) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockCommandServiceGetBlockSwitchedOnCall) Do(f func(context.Context, blockcommand.BlockType) (string, error)) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockCommandServiceGetBlockSwitchedOnCall) DoAndReturn(f func(context.Context, blockcommand.BlockType) (string, error)) *MockBlockCommandServiceGetBlockSwitchedOnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlocks mocks base method.
func (m *MockBlockCommandService) GetBlocks(arg0 context.Context) ([]blockcommand.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocks", arg0)
	ret0, _ := ret[0].([]blockcommand.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocks indicates an expected call of GetBlocks.
func (mr *MockBlockCommandServiceMockRecorder) GetBlocks(arg0 any) *MockBlockCommandServiceGetBlocksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocks", reflect.TypeOf((*MockBlockCommandService)(nil).GetBlocks), arg0)
	return &MockBlockCommandServiceGetBlocksCall{Call: call}
}

// MockBlockCommandServiceGetBlocksCall wrap *gomock.Call
type MockBlockCommandServiceGetBlocksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockCommandServiceGetBlocksCall) Return(arg0 []blockcommand.Block, arg1 error) *MockBlockCommandServiceGetBlocksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockCommandServiceGetBlocksCall) Do(f func(context.Context) ([]blockcommand.Block, error)) *MockBlockCommandServiceGetBlocksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockCommandServiceGetBlocksCall) DoAndReturn(f func(context.Context) ([]blockcommand.Block, error)) *MockBlockCommandServiceGetBlocksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// AddControllerIAASUnits mocks base method.
func (m *MockApplicationService) AddControllerIAASUnits(arg0 context.Context, arg1 []string, arg2 []service.AddIAASUnitArg) ([]machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddControllerIAASUnits", arg0, arg1, arg2)
	ret0, _ := ret[0].([]machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddControllerIAASUnits indicates an expected call of AddControllerIAASUnits.
func (mr *MockApplicationServiceMockRecorder) AddControllerIAASUnits(arg0, arg1, arg2 any) *MockApplicationServiceAddControllerIAASUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddControllerIAASUnits", reflect.TypeOf((*MockApplicationService)(nil).AddControllerIAASUnits), arg0, arg1, arg2)
	return &MockApplicationServiceAddControllerIAASUnitsCall{Call: call}
}

// MockApplicationServiceAddControllerIAASUnitsCall wrap *gomock.Call
type MockApplicationServiceAddControllerIAASUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceAddControllerIAASUnitsCall) Return(arg0 []machine.Name, arg1 error) *MockApplicationServiceAddControllerIAASUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceAddControllerIAASUnitsCall) Do(f func(context.Context, []string, []service.AddIAASUnitArg) ([]machine.Name, error)) *MockApplicationServiceAddControllerIAASUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceAddControllerIAASUnitsCall) DoAndReturn(f func(context.Context, []string, []service.AddIAASUnitArg) ([]machine.Name, error)) *MockApplicationServiceAddControllerIAASUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
