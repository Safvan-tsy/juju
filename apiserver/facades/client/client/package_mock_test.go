// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/client (interfaces: Backend)
//
// Generated by this command:
//
//	mockgen -typed -package client_test -destination package_mock_test.go github.com/juju/juju/apiserver/facades/client/client Backend
//

// Package client_test is a generated GoMock package.
package client_test

import (
	reflect "reflect"

	state "github.com/juju/juju/state"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// AllIPAddresses mocks base method.
func (m *MockBackend) AllIPAddresses() ([]*state.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllIPAddresses")
	ret0, _ := ret[0].([]*state.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllIPAddresses indicates an expected call of AllIPAddresses.
func (mr *MockBackendMockRecorder) AllIPAddresses() *MockBackendAllIPAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllIPAddresses", reflect.TypeOf((*MockBackend)(nil).AllIPAddresses))
	return &MockBackendAllIPAddressesCall{Call: call}
}

// MockBackendAllIPAddressesCall wrap *gomock.Call
type MockBackendAllIPAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAllIPAddressesCall) Return(arg0 []*state.Address, arg1 error) *MockBackendAllIPAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAllIPAddressesCall) Do(f func() ([]*state.Address, error)) *MockBackendAllIPAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAllIPAddressesCall) DoAndReturn(f func() ([]*state.Address, error)) *MockBackendAllIPAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllLinkLayerDevices mocks base method.
func (m *MockBackend) AllLinkLayerDevices() ([]*state.LinkLayerDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllLinkLayerDevices")
	ret0, _ := ret[0].([]*state.LinkLayerDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllLinkLayerDevices indicates an expected call of AllLinkLayerDevices.
func (mr *MockBackendMockRecorder) AllLinkLayerDevices() *MockBackendAllLinkLayerDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllLinkLayerDevices", reflect.TypeOf((*MockBackend)(nil).AllLinkLayerDevices))
	return &MockBackendAllLinkLayerDevicesCall{Call: call}
}

// MockBackendAllLinkLayerDevicesCall wrap *gomock.Call
type MockBackendAllLinkLayerDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAllLinkLayerDevicesCall) Return(arg0 []*state.LinkLayerDevice, arg1 error) *MockBackendAllLinkLayerDevicesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAllLinkLayerDevicesCall) Do(f func() ([]*state.LinkLayerDevice, error)) *MockBackendAllLinkLayerDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAllLinkLayerDevicesCall) DoAndReturn(f func() ([]*state.LinkLayerDevice, error)) *MockBackendAllLinkLayerDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
