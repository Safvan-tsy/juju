// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/client (interfaces: Backend)
//
// Generated by this command:
//
//	mockgen -typed -package client_test -destination package_mock_test.go github.com/juju/juju/apiserver/facades/client/client Backend
//

// Package client_test is a generated GoMock package.
package client_test

import (
	reflect "reflect"

	state "github.com/juju/juju/state"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// AllMachines mocks base method.
func (m *MockBackend) AllMachines() ([]*state.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllMachines")
	ret0, _ := ret[0].([]*state.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllMachines indicates an expected call of AllMachines.
func (mr *MockBackendMockRecorder) AllMachines() *MockBackendAllMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllMachines", reflect.TypeOf((*MockBackend)(nil).AllMachines))
	return &MockBackendAllMachinesCall{Call: call}
}

// MockBackendAllMachinesCall wrap *gomock.Call
type MockBackendAllMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAllMachinesCall) Return(arg0 []*state.Machine, arg1 error) *MockBackendAllMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAllMachinesCall) Do(f func() ([]*state.Machine, error)) *MockBackendAllMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAllMachinesCall) DoAndReturn(f func() ([]*state.Machine, error)) *MockBackendAllMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllStatus mocks base method.
func (m *MockBackend) AllStatus() (*state.AllStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllStatus")
	ret0, _ := ret[0].(*state.AllStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllStatus indicates an expected call of AllStatus.
func (mr *MockBackendMockRecorder) AllStatus() *MockBackendAllStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllStatus", reflect.TypeOf((*MockBackend)(nil).AllStatus))
	return &MockBackendAllStatusCall{Call: call}
}

// MockBackendAllStatusCall wrap *gomock.Call
type MockBackendAllStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAllStatusCall) Return(arg0 *state.AllStatus, arg1 error) *MockBackendAllStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAllStatusCall) Do(f func() (*state.AllStatus, error)) *MockBackendAllStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAllStatusCall) DoAndReturn(f func() (*state.AllStatus, error)) *MockBackendAllStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
