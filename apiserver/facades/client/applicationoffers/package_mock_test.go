// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/applicationoffers (interfaces: AccessService,ModelService,OfferService)
//
// Generated by this command:
//
//	mockgen -typed -package applicationoffers -destination package_mock_test.go github.com/juju/juju/apiserver/facades/client/applicationoffers AccessService,ModelService,OfferService
//

// Package applicationoffers is a generated GoMock package.
package applicationoffers

import (
	context "context"
	reflect "reflect"

	crossmodel "github.com/juju/juju/core/crossmodel"
	model "github.com/juju/juju/core/model"
	permission "github.com/juju/juju/core/permission"
	access "github.com/juju/juju/domain/access"
	offer "github.com/juju/juju/domain/offer"
	uuid "github.com/juju/juju/internal/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockAccessService is a mock of AccessService interface.
type MockAccessService struct {
	ctrl     *gomock.Controller
	recorder *MockAccessServiceMockRecorder
}

// MockAccessServiceMockRecorder is the mock recorder for MockAccessService.
type MockAccessServiceMockRecorder struct {
	mock *MockAccessService
}

// NewMockAccessService creates a new mock instance.
func NewMockAccessService(ctrl *gomock.Controller) *MockAccessService {
	mock := &MockAccessService{ctrl: ctrl}
	mock.recorder = &MockAccessServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessService) EXPECT() *MockAccessServiceMockRecorder {
	return m.recorder
}

// CreatePermission mocks base method.
func (m *MockAccessService) CreatePermission(arg0 context.Context, arg1 permission.UserAccessSpec) (permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1)
	ret0, _ := ret[0].(permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockAccessServiceMockRecorder) CreatePermission(arg0, arg1 any) *MockAccessServiceCreatePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockAccessService)(nil).CreatePermission), arg0, arg1)
	return &MockAccessServiceCreatePermissionCall{Call: call}
}

// MockAccessServiceCreatePermissionCall wrap *gomock.Call
type MockAccessServiceCreatePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceCreatePermissionCall) Return(arg0 permission.UserAccess, arg1 error) *MockAccessServiceCreatePermissionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceCreatePermissionCall) Do(f func(context.Context, permission.UserAccessSpec) (permission.UserAccess, error)) *MockAccessServiceCreatePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceCreatePermissionCall) DoAndReturn(f func(context.Context, permission.UserAccessSpec) (permission.UserAccess, error)) *MockAccessServiceCreatePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePermission mocks base method.
func (m *MockAccessService) UpdatePermission(arg0 context.Context, arg1 access.UpdatePermissionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockAccessServiceMockRecorder) UpdatePermission(arg0, arg1 any) *MockAccessServiceUpdatePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockAccessService)(nil).UpdatePermission), arg0, arg1)
	return &MockAccessServiceUpdatePermissionCall{Call: call}
}

// MockAccessServiceUpdatePermissionCall wrap *gomock.Call
type MockAccessServiceUpdatePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceUpdatePermissionCall) Return(arg0 error) *MockAccessServiceUpdatePermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceUpdatePermissionCall) Do(f func(context.Context, access.UpdatePermissionArgs) error) *MockAccessServiceUpdatePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceUpdatePermissionCall) DoAndReturn(f func(context.Context, access.UpdatePermissionArgs) error) *MockAccessServiceUpdatePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// GetModelByNameAndQualifier mocks base method.
func (m *MockModelService) GetModelByNameAndQualifier(arg0 context.Context, arg1 string, arg2 model.Qualifier) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelByNameAndQualifier", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelByNameAndQualifier indicates an expected call of GetModelByNameAndQualifier.
func (mr *MockModelServiceMockRecorder) GetModelByNameAndQualifier(arg0, arg1, arg2 any) *MockModelServiceGetModelByNameAndQualifierCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelByNameAndQualifier", reflect.TypeOf((*MockModelService)(nil).GetModelByNameAndQualifier), arg0, arg1, arg2)
	return &MockModelServiceGetModelByNameAndQualifierCall{Call: call}
}

// MockModelServiceGetModelByNameAndQualifierCall wrap *gomock.Call
type MockModelServiceGetModelByNameAndQualifierCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceGetModelByNameAndQualifierCall) Return(arg0 model.Model, arg1 error) *MockModelServiceGetModelByNameAndQualifierCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceGetModelByNameAndQualifierCall) Do(f func(context.Context, string, model.Qualifier) (model.Model, error)) *MockModelServiceGetModelByNameAndQualifierCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceGetModelByNameAndQualifierCall) DoAndReturn(f func(context.Context, string, model.Qualifier) (model.Model, error)) *MockModelServiceGetModelByNameAndQualifierCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockOfferService is a mock of OfferService interface.
type MockOfferService struct {
	ctrl     *gomock.Controller
	recorder *MockOfferServiceMockRecorder
}

// MockOfferServiceMockRecorder is the mock recorder for MockOfferService.
type MockOfferServiceMockRecorder struct {
	mock *MockOfferService
}

// NewMockOfferService creates a new mock instance.
func NewMockOfferService(ctrl *gomock.Controller) *MockOfferService {
	mock := &MockOfferService{ctrl: ctrl}
	mock.recorder = &MockOfferServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfferService) EXPECT() *MockOfferServiceMockRecorder {
	return m.recorder
}

// GetOfferUUID mocks base method.
func (m *MockOfferService) GetOfferUUID(arg0 context.Context, arg1 *crossmodel.OfferURL) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferUUID", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferUUID indicates an expected call of GetOfferUUID.
func (mr *MockOfferServiceMockRecorder) GetOfferUUID(arg0, arg1 any) *MockOfferServiceGetOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferUUID", reflect.TypeOf((*MockOfferService)(nil).GetOfferUUID), arg0, arg1)
	return &MockOfferServiceGetOfferUUIDCall{Call: call}
}

// MockOfferServiceGetOfferUUIDCall wrap *gomock.Call
type MockOfferServiceGetOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferServiceGetOfferUUIDCall) Return(arg0 uuid.UUID, arg1 error) *MockOfferServiceGetOfferUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferServiceGetOfferUUIDCall) Do(f func(context.Context, *crossmodel.OfferURL) (uuid.UUID, error)) *MockOfferServiceGetOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferServiceGetOfferUUIDCall) DoAndReturn(f func(context.Context, *crossmodel.OfferURL) (uuid.UUID, error)) *MockOfferServiceGetOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Offer mocks base method.
func (m *MockOfferService) Offer(arg0 context.Context, arg1 offer.ApplicationOfferArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Offer indicates an expected call of Offer.
func (mr *MockOfferServiceMockRecorder) Offer(arg0, arg1 any) *MockOfferServiceOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offer", reflect.TypeOf((*MockOfferService)(nil).Offer), arg0, arg1)
	return &MockOfferServiceOfferCall{Call: call}
}

// MockOfferServiceOfferCall wrap *gomock.Call
type MockOfferServiceOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferServiceOfferCall) Return(arg0 error) *MockOfferServiceOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferServiceOfferCall) Do(f func(context.Context, offer.ApplicationOfferArgs) error) *MockOfferServiceOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferServiceOfferCall) DoAndReturn(f func(context.Context, offer.ApplicationOfferArgs) error) *MockOfferServiceOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
