// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/controller/migrationmaster (interfaces: ModelExporter,UpgradeService,ControllerConfigService,ControllerNodeService,CredentialService,ModelInfoService,ModelService,ApplicationService,RelationService,StatusService,ModelAgentService,ModelMigrationService,MachineService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/backend.go github.com/juju/juju/apiserver/facades/controller/migrationmaster ModelExporter,UpgradeService,ControllerConfigService,ControllerNodeService,CredentialService,ModelInfoService,ModelService,ApplicationService,RelationService,StatusService,ModelAgentService,ModelMigrationService,MachineService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	description "github.com/juju/description/v10"
	cloud "github.com/juju/juju/cloud"
	controller "github.com/juju/juju/controller"
	base "github.com/juju/juju/core/base"
	credential "github.com/juju/juju/core/credential"
	life "github.com/juju/juju/core/life"
	machine "github.com/juju/juju/core/machine"
	migration "github.com/juju/juju/core/migration"
	model "github.com/juju/juju/core/model"
	objectstore "github.com/juju/juju/core/objectstore"
	semversion "github.com/juju/juju/core/semversion"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	modelmigration "github.com/juju/juju/domain/modelmigration"
	relation "github.com/juju/juju/domain/relation"
	gomock "go.uber.org/mock/gomock"
)

// MockModelExporter is a mock of ModelExporter interface.
type MockModelExporter struct {
	ctrl     *gomock.Controller
	recorder *MockModelExporterMockRecorder
}

// MockModelExporterMockRecorder is the mock recorder for MockModelExporter.
type MockModelExporterMockRecorder struct {
	mock *MockModelExporter
}

// NewMockModelExporter creates a new mock instance.
func NewMockModelExporter(ctrl *gomock.Controller) *MockModelExporter {
	mock := &MockModelExporter{ctrl: ctrl}
	mock.recorder = &MockModelExporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelExporter) EXPECT() *MockModelExporterMockRecorder {
	return m.recorder
}

// ExportModel mocks base method.
func (m *MockModelExporter) ExportModel(arg0 context.Context, arg1 objectstore.ObjectStore) (description.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportModel", arg0, arg1)
	ret0, _ := ret[0].(description.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportModel indicates an expected call of ExportModel.
func (mr *MockModelExporterMockRecorder) ExportModel(arg0, arg1 any) *MockModelExporterExportModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportModel", reflect.TypeOf((*MockModelExporter)(nil).ExportModel), arg0, arg1)
	return &MockModelExporterExportModelCall{Call: call}
}

// MockModelExporterExportModelCall wrap *gomock.Call
type MockModelExporterExportModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelExporterExportModelCall) Return(arg0 description.Model, arg1 error) *MockModelExporterExportModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelExporterExportModelCall) Do(f func(context.Context, objectstore.ObjectStore) (description.Model, error)) *MockModelExporterExportModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelExporterExportModelCall) DoAndReturn(f func(context.Context, objectstore.ObjectStore) (description.Model, error)) *MockModelExporterExportModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUpgradeService is a mock of UpgradeService interface.
type MockUpgradeService struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeServiceMockRecorder
}

// MockUpgradeServiceMockRecorder is the mock recorder for MockUpgradeService.
type MockUpgradeServiceMockRecorder struct {
	mock *MockUpgradeService
}

// NewMockUpgradeService creates a new mock instance.
func NewMockUpgradeService(ctrl *gomock.Controller) *MockUpgradeService {
	mock := &MockUpgradeService{ctrl: ctrl}
	mock.recorder = &MockUpgradeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgradeService) EXPECT() *MockUpgradeServiceMockRecorder {
	return m.recorder
}

// IsUpgrading mocks base method.
func (m *MockUpgradeService) IsUpgrading(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpgrading", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUpgrading indicates an expected call of IsUpgrading.
func (mr *MockUpgradeServiceMockRecorder) IsUpgrading(arg0 any) *MockUpgradeServiceIsUpgradingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpgrading", reflect.TypeOf((*MockUpgradeService)(nil).IsUpgrading), arg0)
	return &MockUpgradeServiceIsUpgradingCall{Call: call}
}

// MockUpgradeServiceIsUpgradingCall wrap *gomock.Call
type MockUpgradeServiceIsUpgradingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeServiceIsUpgradingCall) Return(arg0 bool, arg1 error) *MockUpgradeServiceIsUpgradingCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeServiceIsUpgradingCall) Do(f func(context.Context) (bool, error)) *MockUpgradeServiceIsUpgradingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeServiceIsUpgradingCall) DoAndReturn(f func(context.Context) (bool, error)) *MockUpgradeServiceIsUpgradingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerNodeService is a mock of ControllerNodeService interface.
type MockControllerNodeService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerNodeServiceMockRecorder
}

// MockControllerNodeServiceMockRecorder is the mock recorder for MockControllerNodeService.
type MockControllerNodeServiceMockRecorder struct {
	mock *MockControllerNodeService
}

// NewMockControllerNodeService creates a new mock instance.
func NewMockControllerNodeService(ctrl *gomock.Controller) *MockControllerNodeService {
	mock := &MockControllerNodeService{ctrl: ctrl}
	mock.recorder = &MockControllerNodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerNodeService) EXPECT() *MockControllerNodeServiceMockRecorder {
	return m.recorder
}

// GetAllAPIAddressesForClients mocks base method.
func (m *MockControllerNodeService) GetAllAPIAddressesForClients(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIAddressesForClients", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIAddressesForClients indicates an expected call of GetAllAPIAddressesForClients.
func (mr *MockControllerNodeServiceMockRecorder) GetAllAPIAddressesForClients(arg0 any) *MockControllerNodeServiceGetAllAPIAddressesForClientsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIAddressesForClients", reflect.TypeOf((*MockControllerNodeService)(nil).GetAllAPIAddressesForClients), arg0)
	return &MockControllerNodeServiceGetAllAPIAddressesForClientsCall{Call: call}
}

// MockControllerNodeServiceGetAllAPIAddressesForClientsCall wrap *gomock.Call
type MockControllerNodeServiceGetAllAPIAddressesForClientsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceGetAllAPIAddressesForClientsCall) Return(arg0 []string, arg1 error) *MockControllerNodeServiceGetAllAPIAddressesForClientsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceGetAllAPIAddressesForClientsCall) Do(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetAllAPIAddressesForClientsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceGetAllAPIAddressesForClientsCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetAllAPIAddressesForClientsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCredentialService is a mock of CredentialService interface.
type MockCredentialService struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialServiceMockRecorder
}

// MockCredentialServiceMockRecorder is the mock recorder for MockCredentialService.
type MockCredentialServiceMockRecorder struct {
	mock *MockCredentialService
}

// NewMockCredentialService creates a new mock instance.
func NewMockCredentialService(ctrl *gomock.Controller) *MockCredentialService {
	mock := &MockCredentialService{ctrl: ctrl}
	mock.recorder = &MockCredentialServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialService) EXPECT() *MockCredentialServiceMockRecorder {
	return m.recorder
}

// CloudCredential mocks base method.
func (m *MockCredentialService) CloudCredential(arg0 context.Context, arg1 credential.Key) (cloud.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudCredential", arg0, arg1)
	ret0, _ := ret[0].(cloud.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudCredential indicates an expected call of CloudCredential.
func (mr *MockCredentialServiceMockRecorder) CloudCredential(arg0, arg1 any) *MockCredentialServiceCloudCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudCredential", reflect.TypeOf((*MockCredentialService)(nil).CloudCredential), arg0, arg1)
	return &MockCredentialServiceCloudCredentialCall{Call: call}
}

// MockCredentialServiceCloudCredentialCall wrap *gomock.Call
type MockCredentialServiceCloudCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCredentialServiceCloudCredentialCall) Return(arg0 cloud.Credential, arg1 error) *MockCredentialServiceCloudCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCredentialServiceCloudCredentialCall) Do(f func(context.Context, credential.Key) (cloud.Credential, error)) *MockCredentialServiceCloudCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCredentialServiceCloudCredentialCall) DoAndReturn(f func(context.Context, credential.Key) (cloud.Credential, error)) *MockCredentialServiceCloudCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelInfoService is a mock of ModelInfoService interface.
type MockModelInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockModelInfoServiceMockRecorder
}

// MockModelInfoServiceMockRecorder is the mock recorder for MockModelInfoService.
type MockModelInfoServiceMockRecorder struct {
	mock *MockModelInfoService
}

// NewMockModelInfoService creates a new mock instance.
func NewMockModelInfoService(ctrl *gomock.Controller) *MockModelInfoService {
	mock := &MockModelInfoService{ctrl: ctrl}
	mock.recorder = &MockModelInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelInfoService) EXPECT() *MockModelInfoServiceMockRecorder {
	return m.recorder
}

// GetModelInfo mocks base method.
func (m *MockModelInfoService) GetModelInfo(arg0 context.Context) (model.ModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInfo", arg0)
	ret0, _ := ret[0].(model.ModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInfo indicates an expected call of GetModelInfo.
func (mr *MockModelInfoServiceMockRecorder) GetModelInfo(arg0 any) *MockModelInfoServiceGetModelInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInfo", reflect.TypeOf((*MockModelInfoService)(nil).GetModelInfo), arg0)
	return &MockModelInfoServiceGetModelInfoCall{Call: call}
}

// MockModelInfoServiceGetModelInfoCall wrap *gomock.Call
type MockModelInfoServiceGetModelInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceGetModelInfoCall) Return(arg0 model.ModelInfo, arg1 error) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceGetModelInfoCall) Do(f func(context.Context) (model.ModelInfo, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceGetModelInfoCall) DoAndReturn(f func(context.Context) (model.ModelInfo, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// ControllerModel mocks base method.
func (m *MockModelService) ControllerModel(arg0 context.Context) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerModel", arg0)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerModel indicates an expected call of ControllerModel.
func (mr *MockModelServiceMockRecorder) ControllerModel(arg0 any) *MockModelServiceControllerModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerModel", reflect.TypeOf((*MockModelService)(nil).ControllerModel), arg0)
	return &MockModelServiceControllerModelCall{Call: call}
}

// MockModelServiceControllerModelCall wrap *gomock.Call
type MockModelServiceControllerModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceControllerModelCall) Return(arg0 model.Model, arg1 error) *MockModelServiceControllerModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceControllerModelCall) Do(f func(context.Context) (model.Model, error)) *MockModelServiceControllerModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceControllerModelCall) DoAndReturn(f func(context.Context) (model.Model, error)) *MockModelServiceControllerModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAllModels mocks base method.
func (m *MockModelService) ListAllModels(arg0 context.Context) ([]model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllModels", arg0)
	ret0, _ := ret[0].([]model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllModels indicates an expected call of ListAllModels.
func (mr *MockModelServiceMockRecorder) ListAllModels(arg0 any) *MockModelServiceListAllModelsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllModels", reflect.TypeOf((*MockModelService)(nil).ListAllModels), arg0)
	return &MockModelServiceListAllModelsCall{Call: call}
}

// MockModelServiceListAllModelsCall wrap *gomock.Call
type MockModelServiceListAllModelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceListAllModelsCall) Return(arg0 []model.Model, arg1 error) *MockModelServiceListAllModelsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceListAllModelsCall) Do(f func(context.Context) ([]model.Model, error)) *MockModelServiceListAllModelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceListAllModelsCall) DoAndReturn(f func(context.Context) ([]model.Model, error)) *MockModelServiceListAllModelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Model mocks base method.
func (m *MockModelService) Model(arg0 context.Context, arg1 model.UUID) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", arg0, arg1)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Model indicates an expected call of Model.
func (mr *MockModelServiceMockRecorder) Model(arg0, arg1 any) *MockModelServiceModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockModelService)(nil).Model), arg0, arg1)
	return &MockModelServiceModelCall{Call: call}
}

// MockModelServiceModelCall wrap *gomock.Call
type MockModelServiceModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceModelCall) Return(arg0 model.Model, arg1 error) *MockModelServiceModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceModelCall) Do(f func(context.Context, model.UUID) (model.Model, error)) *MockModelServiceModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceModelCall) DoAndReturn(f func(context.Context, model.UUID) (model.Model, error)) *MockModelServiceModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// CheckAllApplicationsAndUnitsAreAlive mocks base method.
func (m *MockApplicationService) CheckAllApplicationsAndUnitsAreAlive(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAllApplicationsAndUnitsAreAlive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAllApplicationsAndUnitsAreAlive indicates an expected call of CheckAllApplicationsAndUnitsAreAlive.
func (mr *MockApplicationServiceMockRecorder) CheckAllApplicationsAndUnitsAreAlive(arg0 any) *MockApplicationServiceCheckAllApplicationsAndUnitsAreAliveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAllApplicationsAndUnitsAreAlive", reflect.TypeOf((*MockApplicationService)(nil).CheckAllApplicationsAndUnitsAreAlive), arg0)
	return &MockApplicationServiceCheckAllApplicationsAndUnitsAreAliveCall{Call: call}
}

// MockApplicationServiceCheckAllApplicationsAndUnitsAreAliveCall wrap *gomock.Call
type MockApplicationServiceCheckAllApplicationsAndUnitsAreAliveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceCheckAllApplicationsAndUnitsAreAliveCall) Return(arg0 error) *MockApplicationServiceCheckAllApplicationsAndUnitsAreAliveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceCheckAllApplicationsAndUnitsAreAliveCall) Do(f func(context.Context) error) *MockApplicationServiceCheckAllApplicationsAndUnitsAreAliveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceCheckAllApplicationsAndUnitsAreAliveCall) DoAndReturn(f func(context.Context) error) *MockApplicationServiceCheckAllApplicationsAndUnitsAreAliveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitNamesForApplication mocks base method.
func (m *MockApplicationService) GetUnitNamesForApplication(arg0 context.Context, arg1 string) ([]unit.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitNamesForApplication", arg0, arg1)
	ret0, _ := ret[0].([]unit.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitNamesForApplication indicates an expected call of GetUnitNamesForApplication.
func (mr *MockApplicationServiceMockRecorder) GetUnitNamesForApplication(arg0, arg1 any) *MockApplicationServiceGetUnitNamesForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitNamesForApplication", reflect.TypeOf((*MockApplicationService)(nil).GetUnitNamesForApplication), arg0, arg1)
	return &MockApplicationServiceGetUnitNamesForApplicationCall{Call: call}
}

// MockApplicationServiceGetUnitNamesForApplicationCall wrap *gomock.Call
type MockApplicationServiceGetUnitNamesForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitNamesForApplicationCall) Return(arg0 []unit.Name, arg1 error) *MockApplicationServiceGetUnitNamesForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitNamesForApplicationCall) Do(f func(context.Context, string) ([]unit.Name, error)) *MockApplicationServiceGetUnitNamesForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitNamesForApplicationCall) DoAndReturn(f func(context.Context, string) ([]unit.Name, error)) *MockApplicationServiceGetUnitNamesForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelationService is a mock of RelationService interface.
type MockRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockRelationServiceMockRecorder
}

// MockRelationServiceMockRecorder is the mock recorder for MockRelationService.
type MockRelationServiceMockRecorder struct {
	mock *MockRelationService
}

// NewMockRelationService creates a new mock instance.
func NewMockRelationService(ctrl *gomock.Controller) *MockRelationService {
	mock := &MockRelationService{ctrl: ctrl}
	mock.recorder = &MockRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationService) EXPECT() *MockRelationServiceMockRecorder {
	return m.recorder
}

// GetAllRelationDetails mocks base method.
func (m *MockRelationService) GetAllRelationDetails(arg0 context.Context) ([]relation.RelationDetailsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRelationDetails", arg0)
	ret0, _ := ret[0].([]relation.RelationDetailsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRelationDetails indicates an expected call of GetAllRelationDetails.
func (mr *MockRelationServiceMockRecorder) GetAllRelationDetails(arg0 any) *MockRelationServiceGetAllRelationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRelationDetails", reflect.TypeOf((*MockRelationService)(nil).GetAllRelationDetails), arg0)
	return &MockRelationServiceGetAllRelationDetailsCall{Call: call}
}

// MockRelationServiceGetAllRelationDetailsCall wrap *gomock.Call
type MockRelationServiceGetAllRelationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetAllRelationDetailsCall) Return(arg0 []relation.RelationDetailsResult, arg1 error) *MockRelationServiceGetAllRelationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetAllRelationDetailsCall) Do(f func(context.Context) ([]relation.RelationDetailsResult, error)) *MockRelationServiceGetAllRelationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetAllRelationDetailsCall) DoAndReturn(f func(context.Context) ([]relation.RelationDetailsResult, error)) *MockRelationServiceGetAllRelationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RelationUnitInScopeByID mocks base method.
func (m *MockRelationService) RelationUnitInScopeByID(arg0 context.Context, arg1 int, arg2 unit.Name) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationUnitInScopeByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelationUnitInScopeByID indicates an expected call of RelationUnitInScopeByID.
func (mr *MockRelationServiceMockRecorder) RelationUnitInScopeByID(arg0, arg1, arg2 any) *MockRelationServiceRelationUnitInScopeByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationUnitInScopeByID", reflect.TypeOf((*MockRelationService)(nil).RelationUnitInScopeByID), arg0, arg1, arg2)
	return &MockRelationServiceRelationUnitInScopeByIDCall{Call: call}
}

// MockRelationServiceRelationUnitInScopeByIDCall wrap *gomock.Call
type MockRelationServiceRelationUnitInScopeByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceRelationUnitInScopeByIDCall) Return(arg0 bool, arg1 error) *MockRelationServiceRelationUnitInScopeByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceRelationUnitInScopeByIDCall) Do(f func(context.Context, int, unit.Name) (bool, error)) *MockRelationServiceRelationUnitInScopeByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceRelationUnitInScopeByIDCall) DoAndReturn(f func(context.Context, int, unit.Name) (bool, error)) *MockRelationServiceRelationUnitInScopeByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// CheckMachineStatusesReadyForMigration mocks base method.
func (m *MockStatusService) CheckMachineStatusesReadyForMigration(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMachineStatusesReadyForMigration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckMachineStatusesReadyForMigration indicates an expected call of CheckMachineStatusesReadyForMigration.
func (mr *MockStatusServiceMockRecorder) CheckMachineStatusesReadyForMigration(arg0 any) *MockStatusServiceCheckMachineStatusesReadyForMigrationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMachineStatusesReadyForMigration", reflect.TypeOf((*MockStatusService)(nil).CheckMachineStatusesReadyForMigration), arg0)
	return &MockStatusServiceCheckMachineStatusesReadyForMigrationCall{Call: call}
}

// MockStatusServiceCheckMachineStatusesReadyForMigrationCall wrap *gomock.Call
type MockStatusServiceCheckMachineStatusesReadyForMigrationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceCheckMachineStatusesReadyForMigrationCall) Return(arg0 error) *MockStatusServiceCheckMachineStatusesReadyForMigrationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceCheckMachineStatusesReadyForMigrationCall) Do(f func(context.Context) error) *MockStatusServiceCheckMachineStatusesReadyForMigrationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceCheckMachineStatusesReadyForMigrationCall) DoAndReturn(f func(context.Context) error) *MockStatusServiceCheckMachineStatusesReadyForMigrationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckUnitStatusesReadyForMigration mocks base method.
func (m *MockStatusService) CheckUnitStatusesReadyForMigration(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUnitStatusesReadyForMigration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUnitStatusesReadyForMigration indicates an expected call of CheckUnitStatusesReadyForMigration.
func (mr *MockStatusServiceMockRecorder) CheckUnitStatusesReadyForMigration(arg0 any) *MockStatusServiceCheckUnitStatusesReadyForMigrationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUnitStatusesReadyForMigration", reflect.TypeOf((*MockStatusService)(nil).CheckUnitStatusesReadyForMigration), arg0)
	return &MockStatusServiceCheckUnitStatusesReadyForMigrationCall{Call: call}
}

// MockStatusServiceCheckUnitStatusesReadyForMigrationCall wrap *gomock.Call
type MockStatusServiceCheckUnitStatusesReadyForMigrationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceCheckUnitStatusesReadyForMigrationCall) Return(arg0 error) *MockStatusServiceCheckUnitStatusesReadyForMigrationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceCheckUnitStatusesReadyForMigrationCall) Do(f func(context.Context) error) *MockStatusServiceCheckUnitStatusesReadyForMigrationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceCheckUnitStatusesReadyForMigrationCall) DoAndReturn(f func(context.Context) error) *MockStatusServiceCheckUnitStatusesReadyForMigrationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelAgentService is a mock of ModelAgentService interface.
type MockModelAgentService struct {
	ctrl     *gomock.Controller
	recorder *MockModelAgentServiceMockRecorder
}

// MockModelAgentServiceMockRecorder is the mock recorder for MockModelAgentService.
type MockModelAgentServiceMockRecorder struct {
	mock *MockModelAgentService
}

// NewMockModelAgentService creates a new mock instance.
func NewMockModelAgentService(ctrl *gomock.Controller) *MockModelAgentService {
	mock := &MockModelAgentService{ctrl: ctrl}
	mock.recorder = &MockModelAgentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelAgentService) EXPECT() *MockModelAgentServiceMockRecorder {
	return m.recorder
}

// GetMachinesNotAtTargetAgentVersion mocks base method.
func (m *MockModelAgentService) GetMachinesNotAtTargetAgentVersion(arg0 context.Context) ([]machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachinesNotAtTargetAgentVersion", arg0)
	ret0, _ := ret[0].([]machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachinesNotAtTargetAgentVersion indicates an expected call of GetMachinesNotAtTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) GetMachinesNotAtTargetAgentVersion(arg0 any) *MockModelAgentServiceGetMachinesNotAtTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachinesNotAtTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).GetMachinesNotAtTargetAgentVersion), arg0)
	return &MockModelAgentServiceGetMachinesNotAtTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceGetMachinesNotAtTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceGetMachinesNotAtTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceGetMachinesNotAtTargetAgentVersionCall) Return(arg0 []machine.Name, arg1 error) *MockModelAgentServiceGetMachinesNotAtTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceGetMachinesNotAtTargetAgentVersionCall) Do(f func(context.Context) ([]machine.Name, error)) *MockModelAgentServiceGetMachinesNotAtTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceGetMachinesNotAtTargetAgentVersionCall) DoAndReturn(f func(context.Context) ([]machine.Name, error)) *MockModelAgentServiceGetMachinesNotAtTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelTargetAgentVersion mocks base method.
func (m *MockModelAgentService) GetModelTargetAgentVersion(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelTargetAgentVersion", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTargetAgentVersion indicates an expected call of GetModelTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) GetModelTargetAgentVersion(arg0 any) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).GetModelTargetAgentVersion), arg0)
	return &MockModelAgentServiceGetModelTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceGetModelTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceGetModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) Return(arg0 semversion.Number, arg1 error) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) Do(f func(context.Context) (semversion.Number, error)) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceGetModelTargetAgentVersionCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockModelAgentServiceGetModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitsNotAtTargetAgentVersion mocks base method.
func (m *MockModelAgentService) GetUnitsNotAtTargetAgentVersion(arg0 context.Context) ([]unit.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitsNotAtTargetAgentVersion", arg0)
	ret0, _ := ret[0].([]unit.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitsNotAtTargetAgentVersion indicates an expected call of GetUnitsNotAtTargetAgentVersion.
func (mr *MockModelAgentServiceMockRecorder) GetUnitsNotAtTargetAgentVersion(arg0 any) *MockModelAgentServiceGetUnitsNotAtTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitsNotAtTargetAgentVersion", reflect.TypeOf((*MockModelAgentService)(nil).GetUnitsNotAtTargetAgentVersion), arg0)
	return &MockModelAgentServiceGetUnitsNotAtTargetAgentVersionCall{Call: call}
}

// MockModelAgentServiceGetUnitsNotAtTargetAgentVersionCall wrap *gomock.Call
type MockModelAgentServiceGetUnitsNotAtTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelAgentServiceGetUnitsNotAtTargetAgentVersionCall) Return(arg0 []unit.Name, arg1 error) *MockModelAgentServiceGetUnitsNotAtTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelAgentServiceGetUnitsNotAtTargetAgentVersionCall) Do(f func(context.Context) ([]unit.Name, error)) *MockModelAgentServiceGetUnitsNotAtTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelAgentServiceGetUnitsNotAtTargetAgentVersionCall) DoAndReturn(f func(context.Context) ([]unit.Name, error)) *MockModelAgentServiceGetUnitsNotAtTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelMigrationService is a mock of ModelMigrationService interface.
type MockModelMigrationService struct {
	ctrl     *gomock.Controller
	recorder *MockModelMigrationServiceMockRecorder
}

// MockModelMigrationServiceMockRecorder is the mock recorder for MockModelMigrationService.
type MockModelMigrationServiceMockRecorder struct {
	mock *MockModelMigrationService
}

// NewMockModelMigrationService creates a new mock instance.
func NewMockModelMigrationService(ctrl *gomock.Controller) *MockModelMigrationService {
	mock := &MockModelMigrationService{ctrl: ctrl}
	mock.recorder = &MockModelMigrationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelMigrationService) EXPECT() *MockModelMigrationServiceMockRecorder {
	return m.recorder
}

// Migration mocks base method.
func (m *MockModelMigrationService) Migration(arg0 context.Context) (modelmigration.Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migration", arg0)
	ret0, _ := ret[0].(modelmigration.Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Migration indicates an expected call of Migration.
func (mr *MockModelMigrationServiceMockRecorder) Migration(arg0 any) *MockModelMigrationServiceMigrationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migration", reflect.TypeOf((*MockModelMigrationService)(nil).Migration), arg0)
	return &MockModelMigrationServiceMigrationCall{Call: call}
}

// MockModelMigrationServiceMigrationCall wrap *gomock.Call
type MockModelMigrationServiceMigrationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationServiceMigrationCall) Return(arg0 modelmigration.Migration, arg1 error) *MockModelMigrationServiceMigrationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationServiceMigrationCall) Do(f func(context.Context) (modelmigration.Migration, error)) *MockModelMigrationServiceMigrationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationServiceMigrationCall) DoAndReturn(f func(context.Context) (modelmigration.Migration, error)) *MockModelMigrationServiceMigrationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MinionReports mocks base method.
func (m *MockModelMigrationService) MinionReports(arg0 context.Context) (migration.MinionReports, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinionReports", arg0)
	ret0, _ := ret[0].(migration.MinionReports)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MinionReports indicates an expected call of MinionReports.
func (mr *MockModelMigrationServiceMockRecorder) MinionReports(arg0 any) *MockModelMigrationServiceMinionReportsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinionReports", reflect.TypeOf((*MockModelMigrationService)(nil).MinionReports), arg0)
	return &MockModelMigrationServiceMinionReportsCall{Call: call}
}

// MockModelMigrationServiceMinionReportsCall wrap *gomock.Call
type MockModelMigrationServiceMinionReportsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationServiceMinionReportsCall) Return(arg0 migration.MinionReports, arg1 error) *MockModelMigrationServiceMinionReportsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationServiceMinionReportsCall) Do(f func(context.Context) (migration.MinionReports, error)) *MockModelMigrationServiceMinionReportsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationServiceMinionReportsCall) DoAndReturn(f func(context.Context) (migration.MinionReports, error)) *MockModelMigrationServiceMinionReportsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelMigrationMode mocks base method.
func (m *MockModelMigrationService) ModelMigrationMode(arg0 context.Context) (modelmigration.MigrationMode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelMigrationMode", arg0)
	ret0, _ := ret[0].(modelmigration.MigrationMode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelMigrationMode indicates an expected call of ModelMigrationMode.
func (mr *MockModelMigrationServiceMockRecorder) ModelMigrationMode(arg0 any) *MockModelMigrationServiceModelMigrationModeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelMigrationMode", reflect.TypeOf((*MockModelMigrationService)(nil).ModelMigrationMode), arg0)
	return &MockModelMigrationServiceModelMigrationModeCall{Call: call}
}

// MockModelMigrationServiceModelMigrationModeCall wrap *gomock.Call
type MockModelMigrationServiceModelMigrationModeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationServiceModelMigrationModeCall) Return(arg0 modelmigration.MigrationMode, arg1 error) *MockModelMigrationServiceModelMigrationModeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationServiceModelMigrationModeCall) Do(f func(context.Context) (modelmigration.MigrationMode, error)) *MockModelMigrationServiceModelMigrationModeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationServiceModelMigrationModeCall) DoAndReturn(f func(context.Context) (modelmigration.MigrationMode, error)) *MockModelMigrationServiceModelMigrationModeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMigrationPhase mocks base method.
func (m *MockModelMigrationService) SetMigrationPhase(arg0 context.Context, arg1 migration.Phase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMigrationPhase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMigrationPhase indicates an expected call of SetMigrationPhase.
func (mr *MockModelMigrationServiceMockRecorder) SetMigrationPhase(arg0, arg1 any) *MockModelMigrationServiceSetMigrationPhaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMigrationPhase", reflect.TypeOf((*MockModelMigrationService)(nil).SetMigrationPhase), arg0, arg1)
	return &MockModelMigrationServiceSetMigrationPhaseCall{Call: call}
}

// MockModelMigrationServiceSetMigrationPhaseCall wrap *gomock.Call
type MockModelMigrationServiceSetMigrationPhaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationServiceSetMigrationPhaseCall) Return(arg0 error) *MockModelMigrationServiceSetMigrationPhaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationServiceSetMigrationPhaseCall) Do(f func(context.Context, migration.Phase) error) *MockModelMigrationServiceSetMigrationPhaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationServiceSetMigrationPhaseCall) DoAndReturn(f func(context.Context, migration.Phase) error) *MockModelMigrationServiceSetMigrationPhaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMigrationStatusMessage mocks base method.
func (m *MockModelMigrationService) SetMigrationStatusMessage(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMigrationStatusMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMigrationStatusMessage indicates an expected call of SetMigrationStatusMessage.
func (mr *MockModelMigrationServiceMockRecorder) SetMigrationStatusMessage(arg0, arg1 any) *MockModelMigrationServiceSetMigrationStatusMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMigrationStatusMessage", reflect.TypeOf((*MockModelMigrationService)(nil).SetMigrationStatusMessage), arg0, arg1)
	return &MockModelMigrationServiceSetMigrationStatusMessageCall{Call: call}
}

// MockModelMigrationServiceSetMigrationStatusMessageCall wrap *gomock.Call
type MockModelMigrationServiceSetMigrationStatusMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationServiceSetMigrationStatusMessageCall) Return(arg0 error) *MockModelMigrationServiceSetMigrationStatusMessageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationServiceSetMigrationStatusMessageCall) Do(f func(context.Context, string) error) *MockModelMigrationServiceSetMigrationStatusMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationServiceSetMigrationStatusMessageCall) DoAndReturn(f func(context.Context, string) error) *MockModelMigrationServiceSetMigrationStatusMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchForMigration mocks base method.
func (m *MockModelMigrationService) WatchForMigration(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchForMigration", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchForMigration indicates an expected call of WatchForMigration.
func (mr *MockModelMigrationServiceMockRecorder) WatchForMigration(arg0 any) *MockModelMigrationServiceWatchForMigrationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchForMigration", reflect.TypeOf((*MockModelMigrationService)(nil).WatchForMigration), arg0)
	return &MockModelMigrationServiceWatchForMigrationCall{Call: call}
}

// MockModelMigrationServiceWatchForMigrationCall wrap *gomock.Call
type MockModelMigrationServiceWatchForMigrationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationServiceWatchForMigrationCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockModelMigrationServiceWatchForMigrationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationServiceWatchForMigrationCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockModelMigrationServiceWatchForMigrationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationServiceWatchForMigrationCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockModelMigrationServiceWatchForMigrationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchMinionReports mocks base method.
func (m *MockModelMigrationService) WatchMinionReports(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMinionReports", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMinionReports indicates an expected call of WatchMinionReports.
func (mr *MockModelMigrationServiceMockRecorder) WatchMinionReports(arg0 any) *MockModelMigrationServiceWatchMinionReportsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMinionReports", reflect.TypeOf((*MockModelMigrationService)(nil).WatchMinionReports), arg0)
	return &MockModelMigrationServiceWatchMinionReportsCall{Call: call}
}

// MockModelMigrationServiceWatchMinionReportsCall wrap *gomock.Call
type MockModelMigrationServiceWatchMinionReportsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelMigrationServiceWatchMinionReportsCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockModelMigrationServiceWatchMinionReportsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelMigrationServiceWatchMinionReportsCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockModelMigrationServiceWatchMinionReportsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelMigrationServiceWatchMinionReportsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockModelMigrationServiceWatchMinionReportsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineService is a mock of MachineService interface.
type MockMachineService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineServiceMockRecorder
}

// MockMachineServiceMockRecorder is the mock recorder for MockMachineService.
type MockMachineServiceMockRecorder struct {
	mock *MockMachineService
}

// NewMockMachineService creates a new mock instance.
func NewMockMachineService(ctrl *gomock.Controller) *MockMachineService {
	mock := &MockMachineService{ctrl: ctrl}
	mock.recorder = &MockMachineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineService) EXPECT() *MockMachineServiceMockRecorder {
	return m.recorder
}

// AllMachineNames mocks base method.
func (m *MockMachineService) AllMachineNames(arg0 context.Context) ([]machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllMachineNames", arg0)
	ret0, _ := ret[0].([]machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllMachineNames indicates an expected call of AllMachineNames.
func (mr *MockMachineServiceMockRecorder) AllMachineNames(arg0 any) *MockMachineServiceAllMachineNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllMachineNames", reflect.TypeOf((*MockMachineService)(nil).AllMachineNames), arg0)
	return &MockMachineServiceAllMachineNamesCall{Call: call}
}

// MockMachineServiceAllMachineNamesCall wrap *gomock.Call
type MockMachineServiceAllMachineNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceAllMachineNamesCall) Return(arg0 []machine.Name, arg1 error) *MockMachineServiceAllMachineNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceAllMachineNamesCall) Do(f func(context.Context) ([]machine.Name, error)) *MockMachineServiceAllMachineNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceAllMachineNamesCall) DoAndReturn(f func(context.Context) ([]machine.Name, error)) *MockMachineServiceAllMachineNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineBase mocks base method.
func (m *MockMachineService) GetMachineBase(arg0 context.Context, arg1 machine.Name) (base.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineBase", arg0, arg1)
	ret0, _ := ret[0].(base.Base)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineBase indicates an expected call of GetMachineBase.
func (mr *MockMachineServiceMockRecorder) GetMachineBase(arg0, arg1 any) *MockMachineServiceGetMachineBaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineBase", reflect.TypeOf((*MockMachineService)(nil).GetMachineBase), arg0, arg1)
	return &MockMachineServiceGetMachineBaseCall{Call: call}
}

// MockMachineServiceGetMachineBaseCall wrap *gomock.Call
type MockMachineServiceGetMachineBaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineBaseCall) Return(arg0 base.Base, arg1 error) *MockMachineServiceGetMachineBaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineBaseCall) Do(f func(context.Context, machine.Name) (base.Base, error)) *MockMachineServiceGetMachineBaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineBaseCall) DoAndReturn(f func(context.Context, machine.Name) (base.Base, error)) *MockMachineServiceGetMachineBaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineLife mocks base method.
func (m *MockMachineService) GetMachineLife(arg0 context.Context, arg1 machine.Name) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLife indicates an expected call of GetMachineLife.
func (mr *MockMachineServiceMockRecorder) GetMachineLife(arg0, arg1 any) *MockMachineServiceGetMachineLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLife", reflect.TypeOf((*MockMachineService)(nil).GetMachineLife), arg0, arg1)
	return &MockMachineServiceGetMachineLifeCall{Call: call}
}

// MockMachineServiceGetMachineLifeCall wrap *gomock.Call
type MockMachineServiceGetMachineLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineServiceGetMachineLifeCall) Return(arg0 life.Value, arg1 error) *MockMachineServiceGetMachineLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineServiceGetMachineLifeCall) Do(f func(context.Context, machine.Name) (life.Value, error)) *MockMachineServiceGetMachineLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineServiceGetMachineLifeCall) DoAndReturn(f func(context.Context, machine.Name) (life.Value, error)) *MockMachineServiceGetMachineLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
