// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/machineconverter (interfaces: MachineClient,Machine,AgentClient)
//
// Generated by this command:
//
//	mockgen -typed -package machineconverter -destination clients_mock_test.go github.com/juju/juju/internal/worker/machineconverter MachineClient,Machine,AgentClient
//

// Package machineconverter is a generated GoMock package.
package machineconverter

import (
	context "context"
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	watcher "github.com/juju/juju/core/watcher"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockMachineClient is a mock of MachineClient interface.
type MockMachineClient struct {
	ctrl     *gomock.Controller
	recorder *MockMachineClientMockRecorder
}

// MockMachineClientMockRecorder is the mock recorder for MockMachineClient.
type MockMachineClientMockRecorder struct {
	mock *MockMachineClient
}

// NewMockMachineClient creates a new mock instance.
func NewMockMachineClient(ctrl *gomock.Controller) *MockMachineClient {
	mock := &MockMachineClient{ctrl: ctrl}
	mock.recorder = &MockMachineClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineClient) EXPECT() *MockMachineClientMockRecorder {
	return m.recorder
}

// Machine mocks base method.
func (m *MockMachineClient) Machine(arg0 context.Context, arg1 names.MachineTag) (Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0, arg1)
	ret0, _ := ret[0].(Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockMachineClientMockRecorder) Machine(arg0, arg1 any) *MockMachineClientMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockMachineClient)(nil).Machine), arg0, arg1)
	return &MockMachineClientMachineCall{Call: call}
}

// MockMachineClientMachineCall wrap *gomock.Call
type MockMachineClientMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineClientMachineCall) Return(arg0 Machine, arg1 error) *MockMachineClientMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineClientMachineCall) Do(f func(context.Context, names.MachineTag) (Machine, error)) *MockMachineClientMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineClientMachineCall) DoAndReturn(f func(context.Context, names.MachineTag) (Machine, error)) *MockMachineClientMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachine is a mock of Machine interface.
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine.
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance.
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// IsController mocks base method.
func (m *MockMachine) IsController(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsController", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsController indicates an expected call of IsController.
func (mr *MockMachineMockRecorder) IsController(arg0, arg1 any) *MockMachineIsControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsController", reflect.TypeOf((*MockMachine)(nil).IsController), arg0, arg1)
	return &MockMachineIsControllerCall{Call: call}
}

// MockMachineIsControllerCall wrap *gomock.Call
type MockMachineIsControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineIsControllerCall) Return(arg0 bool, arg1 error) *MockMachineIsControllerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineIsControllerCall) Do(f func(context.Context, string) (bool, error)) *MockMachineIsControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineIsControllerCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockMachineIsControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockMachine) Watch(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockMachineMockRecorder) Watch(arg0 any) *MockMachineWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMachine)(nil).Watch), arg0)
	return &MockMachineWatchCall{Call: call}
}

// MockMachineWatchCall wrap *gomock.Call
type MockMachineWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineWatchCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockMachineWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineWatchCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockMachineWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineWatchCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockMachineWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentClient is a mock of AgentClient interface.
type MockAgentClient struct {
	ctrl     *gomock.Controller
	recorder *MockAgentClientMockRecorder
}

// MockAgentClientMockRecorder is the mock recorder for MockAgentClient.
type MockAgentClientMockRecorder struct {
	mock *MockAgentClient
}

// NewMockAgentClient creates a new mock instance.
func NewMockAgentClient(ctrl *gomock.Controller) *MockAgentClient {
	mock := &MockAgentClient{ctrl: ctrl}
	mock.recorder = &MockAgentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentClient) EXPECT() *MockAgentClientMockRecorder {
	return m.recorder
}

// StateServingInfo mocks base method.
func (m *MockAgentClient) StateServingInfo(arg0 context.Context) (controller.ControllerAgentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateServingInfo", arg0)
	ret0, _ := ret[0].(controller.ControllerAgentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateServingInfo indicates an expected call of StateServingInfo.
func (mr *MockAgentClientMockRecorder) StateServingInfo(arg0 any) *MockAgentClientStateServingInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateServingInfo", reflect.TypeOf((*MockAgentClient)(nil).StateServingInfo), arg0)
	return &MockAgentClientStateServingInfoCall{Call: call}
}

// MockAgentClientStateServingInfoCall wrap *gomock.Call
type MockAgentClientStateServingInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentClientStateServingInfoCall) Return(arg0 controller.ControllerAgentInfo, arg1 error) *MockAgentClientStateServingInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentClientStateServingInfoCall) Do(f func(context.Context) (controller.ControllerAgentInfo, error)) *MockAgentClientStateServingInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentClientStateServingInfoCall) DoAndReturn(f func(context.Context) (controller.ControllerAgentInfo, error)) *MockAgentClientStateServingInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
