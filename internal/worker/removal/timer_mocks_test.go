// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/clock (interfaces: Timer)
//
// Generated by this command:
//
//	mockgen -typed -package removal -destination timer_mocks_test.go github.com/juju/clock Timer
//

// Package removal is a generated GoMock package.
package removal

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTimer is a mock of Timer interface.
type MockTimer struct {
	ctrl     *gomock.Controller
	recorder *MockTimerMockRecorder
}

// MockTimerMockRecorder is the mock recorder for MockTimer.
type MockTimerMockRecorder struct {
	mock *MockTimer
}

// NewMockTimer creates a new mock instance.
func NewMockTimer(ctrl *gomock.Controller) *MockTimer {
	mock := &MockTimer{ctrl: ctrl}
	mock.recorder = &MockTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimer) EXPECT() *MockTimerMockRecorder {
	return m.recorder
}

// Chan mocks base method.
func (m *MockTimer) Chan() <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chan")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// Chan indicates an expected call of Chan.
func (mr *MockTimerMockRecorder) Chan() *MockTimerChanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chan", reflect.TypeOf((*MockTimer)(nil).Chan))
	return &MockTimerChanCall{Call: call}
}

// MockTimerChanCall wrap *gomock.Call
type MockTimerChanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTimerChanCall) Return(arg0 <-chan time.Time) *MockTimerChanCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTimerChanCall) Do(f func() <-chan time.Time) *MockTimerChanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTimerChanCall) DoAndReturn(f func() <-chan time.Time) *MockTimerChanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Reset mocks base method.
func (m *MockTimer) Reset(arg0 time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockTimerMockRecorder) Reset(arg0 any) *MockTimerResetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockTimer)(nil).Reset), arg0)
	return &MockTimerResetCall{Call: call}
}

// MockTimerResetCall wrap *gomock.Call
type MockTimerResetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTimerResetCall) Return(arg0 bool) *MockTimerResetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTimerResetCall) Do(f func(time.Duration) bool) *MockTimerResetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTimerResetCall) DoAndReturn(f func(time.Duration) bool) *MockTimerResetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *MockTimer) Stop() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockTimerMockRecorder) Stop() *MockTimerStopCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTimer)(nil).Stop))
	return &MockTimerStopCall{Call: call}
}

// MockTimerStopCall wrap *gomock.Call
type MockTimerStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTimerStopCall) Return(arg0 bool) *MockTimerStopCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTimerStopCall) Do(f func() bool) *MockTimerStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTimerStopCall) DoAndReturn(f func() bool) *MockTimerStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
