// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/apiaddresssetter (interfaces: ControllerConfigService,ApplicationService,ControllerNodeService,NetworkService,DomainServices)
//
// Generated by this command:
//
//	mockgen -typed -package apiaddresssetter -destination package_mocks_test.go github.com/juju/juju/internal/worker/apiaddresssetter ControllerConfigService,ApplicationService,ControllerNodeService,NetworkService,DomainServices
//

// Package apiaddresssetter is a generated GoMock package.
package apiaddresssetter

import (
	context "context"
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	network "github.com/juju/juju/core/network"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchControllerConfig mocks base method.
func (m *MockControllerConfigService) WatchControllerConfig(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchControllerConfig", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchControllerConfig indicates an expected call of WatchControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) WatchControllerConfig(arg0 any) *MockControllerConfigServiceWatchControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).WatchControllerConfig), arg0)
	return &MockControllerConfigServiceWatchControllerConfigCall{Call: call}
}

// MockControllerConfigServiceWatchControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceWatchControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceWatchControllerConfigCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockControllerConfigServiceWatchControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceWatchControllerConfigCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockControllerConfigServiceWatchControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceWatchControllerConfigCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockControllerConfigServiceWatchControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetUnitNetNodes mocks base method.
func (m *MockApplicationService) GetUnitNetNodes(arg0 context.Context, arg1 unit.Name) ([]network.NetNodeUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitNetNodes", arg0, arg1)
	ret0, _ := ret[0].([]network.NetNodeUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitNetNodes indicates an expected call of GetUnitNetNodes.
func (mr *MockApplicationServiceMockRecorder) GetUnitNetNodes(arg0, arg1 any) *MockApplicationServiceGetUnitNetNodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitNetNodes", reflect.TypeOf((*MockApplicationService)(nil).GetUnitNetNodes), arg0, arg1)
	return &MockApplicationServiceGetUnitNetNodesCall{Call: call}
}

// MockApplicationServiceGetUnitNetNodesCall wrap *gomock.Call
type MockApplicationServiceGetUnitNetNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitNetNodesCall) Return(arg0 []network.NetNodeUUID, arg1 error) *MockApplicationServiceGetUnitNetNodesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitNetNodesCall) Do(f func(context.Context, unit.Name) ([]network.NetNodeUUID, error)) *MockApplicationServiceGetUnitNetNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitNetNodesCall) DoAndReturn(f func(context.Context, unit.Name) ([]network.NetNodeUUID, error)) *MockApplicationServiceGetUnitNetNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitPublicAddresses mocks base method.
func (m *MockApplicationService) GetUnitPublicAddresses(arg0 context.Context, arg1 unit.Name) (network.SpaceAddresses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitPublicAddresses", arg0, arg1)
	ret0, _ := ret[0].(network.SpaceAddresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitPublicAddresses indicates an expected call of GetUnitPublicAddresses.
func (mr *MockApplicationServiceMockRecorder) GetUnitPublicAddresses(arg0, arg1 any) *MockApplicationServiceGetUnitPublicAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitPublicAddresses", reflect.TypeOf((*MockApplicationService)(nil).GetUnitPublicAddresses), arg0, arg1)
	return &MockApplicationServiceGetUnitPublicAddressesCall{Call: call}
}

// MockApplicationServiceGetUnitPublicAddressesCall wrap *gomock.Call
type MockApplicationServiceGetUnitPublicAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitPublicAddressesCall) Return(arg0 network.SpaceAddresses, arg1 error) *MockApplicationServiceGetUnitPublicAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitPublicAddressesCall) Do(f func(context.Context, unit.Name) (network.SpaceAddresses, error)) *MockApplicationServiceGetUnitPublicAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitPublicAddressesCall) DoAndReturn(f func(context.Context, unit.Name) (network.SpaceAddresses, error)) *MockApplicationServiceGetUnitPublicAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchNetNodeAddress mocks base method.
func (m *MockApplicationService) WatchNetNodeAddress(arg0 context.Context, arg1 ...network.NetNodeUUID) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchNetNodeAddress", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchNetNodeAddress indicates an expected call of WatchNetNodeAddress.
func (mr *MockApplicationServiceMockRecorder) WatchNetNodeAddress(arg0 any, arg1 ...any) *MockApplicationServiceWatchNetNodeAddressCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchNetNodeAddress", reflect.TypeOf((*MockApplicationService)(nil).WatchNetNodeAddress), varargs...)
	return &MockApplicationServiceWatchNetNodeAddressCall{Call: call}
}

// MockApplicationServiceWatchNetNodeAddressCall wrap *gomock.Call
type MockApplicationServiceWatchNetNodeAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchNetNodeAddressCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockApplicationServiceWatchNetNodeAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchNetNodeAddressCall) Do(f func(context.Context, ...network.NetNodeUUID) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchNetNodeAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchNetNodeAddressCall) DoAndReturn(f func(context.Context, ...network.NetNodeUUID) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchNetNodeAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerNodeService is a mock of ControllerNodeService interface.
type MockControllerNodeService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerNodeServiceMockRecorder
}

// MockControllerNodeServiceMockRecorder is the mock recorder for MockControllerNodeService.
type MockControllerNodeServiceMockRecorder struct {
	mock *MockControllerNodeService
}

// NewMockControllerNodeService creates a new mock instance.
func NewMockControllerNodeService(ctrl *gomock.Controller) *MockControllerNodeService {
	mock := &MockControllerNodeService{ctrl: ctrl}
	mock.recorder = &MockControllerNodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerNodeService) EXPECT() *MockControllerNodeServiceMockRecorder {
	return m.recorder
}

// GetControllerIDs mocks base method.
func (m *MockControllerNodeService) GetControllerIDs(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerIDs indicates an expected call of GetControllerIDs.
func (mr *MockControllerNodeServiceMockRecorder) GetControllerIDs(arg0 any) *MockControllerNodeServiceGetControllerIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerIDs", reflect.TypeOf((*MockControllerNodeService)(nil).GetControllerIDs), arg0)
	return &MockControllerNodeServiceGetControllerIDsCall{Call: call}
}

// MockControllerNodeServiceGetControllerIDsCall wrap *gomock.Call
type MockControllerNodeServiceGetControllerIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceGetControllerIDsCall) Return(arg0 []string, arg1 error) *MockControllerNodeServiceGetControllerIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceGetControllerIDsCall) Do(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetControllerIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceGetControllerIDsCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetControllerIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAPIAddresses mocks base method.
func (m *MockControllerNodeService) SetAPIAddresses(arg0 context.Context, arg1 string, arg2 network.SpaceHostPorts, arg3 *network.SpaceInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAPIAddresses", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAPIAddresses indicates an expected call of SetAPIAddresses.
func (mr *MockControllerNodeServiceMockRecorder) SetAPIAddresses(arg0, arg1, arg2, arg3 any) *MockControllerNodeServiceSetAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIAddresses", reflect.TypeOf((*MockControllerNodeService)(nil).SetAPIAddresses), arg0, arg1, arg2, arg3)
	return &MockControllerNodeServiceSetAPIAddressesCall{Call: call}
}

// MockControllerNodeServiceSetAPIAddressesCall wrap *gomock.Call
type MockControllerNodeServiceSetAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceSetAPIAddressesCall) Return(arg0 error) *MockControllerNodeServiceSetAPIAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceSetAPIAddressesCall) Do(f func(context.Context, string, network.SpaceHostPorts, *network.SpaceInfo) error) *MockControllerNodeServiceSetAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceSetAPIAddressesCall) DoAndReturn(f func(context.Context, string, network.SpaceHostPorts, *network.SpaceInfo) error) *MockControllerNodeServiceSetAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchControllerNodes mocks base method.
func (m *MockControllerNodeService) WatchControllerNodes(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchControllerNodes", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchControllerNodes indicates an expected call of WatchControllerNodes.
func (mr *MockControllerNodeServiceMockRecorder) WatchControllerNodes(arg0 any) *MockControllerNodeServiceWatchControllerNodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchControllerNodes", reflect.TypeOf((*MockControllerNodeService)(nil).WatchControllerNodes), arg0)
	return &MockControllerNodeServiceWatchControllerNodesCall{Call: call}
}

// MockControllerNodeServiceWatchControllerNodesCall wrap *gomock.Call
type MockControllerNodeServiceWatchControllerNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceWatchControllerNodesCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockControllerNodeServiceWatchControllerNodesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceWatchControllerNodesCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockControllerNodeServiceWatchControllerNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceWatchControllerNodesCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockControllerNodeServiceWatchControllerNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// SpaceByName mocks base method.
func (m *MockNetworkService) SpaceByName(arg0 context.Context, arg1 string) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceByName", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceByName indicates an expected call of SpaceByName.
func (mr *MockNetworkServiceMockRecorder) SpaceByName(arg0, arg1 any) *MockNetworkServiceSpaceByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceByName", reflect.TypeOf((*MockNetworkService)(nil).SpaceByName), arg0, arg1)
	return &MockNetworkServiceSpaceByNameCall{Call: call}
}

// MockNetworkServiceSpaceByNameCall wrap *gomock.Call
type MockNetworkServiceSpaceByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceSpaceByNameCall) Return(arg0 *network.SpaceInfo, arg1 error) *MockNetworkServiceSpaceByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceSpaceByNameCall) Do(f func(context.Context, string) (*network.SpaceInfo, error)) *MockNetworkServiceSpaceByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceSpaceByNameCall) DoAndReturn(f func(context.Context, string) (*network.SpaceInfo, error)) *MockNetworkServiceSpaceByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDomainServices is a mock of DomainServices interface.
type MockDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServicesMockRecorder
}

// MockDomainServicesMockRecorder is the mock recorder for MockDomainServices.
type MockDomainServicesMockRecorder struct {
	mock *MockDomainServices
}

// NewMockDomainServices creates a new mock instance.
func NewMockDomainServices(ctrl *gomock.Controller) *MockDomainServices {
	mock := &MockDomainServices{ctrl: ctrl}
	mock.recorder = &MockDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServices) EXPECT() *MockDomainServicesMockRecorder {
	return m.recorder
}

// Application mocks base method.
func (m *MockDomainServices) Application() ApplicationService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application")
	ret0, _ := ret[0].(ApplicationService)
	return ret0
}

// Application indicates an expected call of Application.
func (mr *MockDomainServicesMockRecorder) Application() *MockDomainServicesApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockDomainServices)(nil).Application))
	return &MockDomainServicesApplicationCall{Call: call}
}

// MockDomainServicesApplicationCall wrap *gomock.Call
type MockDomainServicesApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesApplicationCall) Return(arg0 ApplicationService) *MockDomainServicesApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesApplicationCall) Do(f func() ApplicationService) *MockDomainServicesApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesApplicationCall) DoAndReturn(f func() ApplicationService) *MockDomainServicesApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerConfig mocks base method.
func (m *MockDomainServices) ControllerConfig() ControllerConfigService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(ControllerConfigService)
	return ret0
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockDomainServicesMockRecorder) ControllerConfig() *MockDomainServicesControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockDomainServices)(nil).ControllerConfig))
	return &MockDomainServicesControllerConfigCall{Call: call}
}

// MockDomainServicesControllerConfigCall wrap *gomock.Call
type MockDomainServicesControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesControllerConfigCall) Return(arg0 ControllerConfigService) *MockDomainServicesControllerConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesControllerConfigCall) Do(f func() ControllerConfigService) *MockDomainServicesControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesControllerConfigCall) DoAndReturn(f func() ControllerConfigService) *MockDomainServicesControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerNode mocks base method.
func (m *MockDomainServices) ControllerNode() ControllerNodeService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerNode")
	ret0, _ := ret[0].(ControllerNodeService)
	return ret0
}

// ControllerNode indicates an expected call of ControllerNode.
func (mr *MockDomainServicesMockRecorder) ControllerNode() *MockDomainServicesControllerNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerNode", reflect.TypeOf((*MockDomainServices)(nil).ControllerNode))
	return &MockDomainServicesControllerNodeCall{Call: call}
}

// MockDomainServicesControllerNodeCall wrap *gomock.Call
type MockDomainServicesControllerNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesControllerNodeCall) Return(arg0 ControllerNodeService) *MockDomainServicesControllerNodeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesControllerNodeCall) Do(f func() ControllerNodeService) *MockDomainServicesControllerNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesControllerNodeCall) DoAndReturn(f func() ControllerNodeService) *MockDomainServicesControllerNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Network mocks base method.
func (m *MockDomainServices) Network() NetworkService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(NetworkService)
	return ret0
}

// Network indicates an expected call of Network.
func (mr *MockDomainServicesMockRecorder) Network() *MockDomainServicesNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockDomainServices)(nil).Network))
	return &MockDomainServicesNetworkCall{Call: call}
}

// MockDomainServicesNetworkCall wrap *gomock.Call
type MockDomainServicesNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesNetworkCall) Return(arg0 NetworkService) *MockDomainServicesNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesNetworkCall) Do(f func() NetworkService) *MockDomainServicesNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesNetworkCall) DoAndReturn(f func() NetworkService) *MockDomainServicesNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
