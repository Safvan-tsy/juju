// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/changestreampruner (interfaces: ChangeStreamService)
//
// Generated by this command:
//
//	mockgen -typed -package changestreampruner -destination stream_mock_test.go github.com/juju/juju/internal/worker/changestreampruner ChangeStreamService
//

// Package changestreampruner is a generated GoMock package.
package changestreampruner

import (
	context "context"
	reflect "reflect"

	changestream "github.com/juju/juju/domain/changestream"
	gomock "go.uber.org/mock/gomock"
)

// MockChangeStreamService is a mock of ChangeStreamService interface.
type MockChangeStreamService struct {
	ctrl     *gomock.Controller
	recorder *MockChangeStreamServiceMockRecorder
}

// MockChangeStreamServiceMockRecorder is the mock recorder for MockChangeStreamService.
type MockChangeStreamServiceMockRecorder struct {
	mock *MockChangeStreamService
}

// NewMockChangeStreamService creates a new mock instance.
func NewMockChangeStreamService(ctrl *gomock.Controller) *MockChangeStreamService {
	mock := &MockChangeStreamService{ctrl: ctrl}
	mock.recorder = &MockChangeStreamServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangeStreamService) EXPECT() *MockChangeStreamServiceMockRecorder {
	return m.recorder
}

// Prune mocks base method.
func (m *MockChangeStreamService) Prune(arg0 context.Context, arg1 changestream.Window) (changestream.Window, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prune", arg0, arg1)
	ret0, _ := ret[0].(changestream.Window)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Prune indicates an expected call of Prune.
func (mr *MockChangeStreamServiceMockRecorder) Prune(arg0, arg1 any) *MockChangeStreamServicePruneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prune", reflect.TypeOf((*MockChangeStreamService)(nil).Prune), arg0, arg1)
	return &MockChangeStreamServicePruneCall{Call: call}
}

// MockChangeStreamServicePruneCall wrap *gomock.Call
type MockChangeStreamServicePruneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChangeStreamServicePruneCall) Return(arg0 changestream.Window, arg1 int64, arg2 error) *MockChangeStreamServicePruneCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChangeStreamServicePruneCall) Do(f func(context.Context, changestream.Window) (changestream.Window, int64, error)) *MockChangeStreamServicePruneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChangeStreamServicePruneCall) DoAndReturn(f func(context.Context, changestream.Window) (changestream.Window, int64, error)) *MockChangeStreamServicePruneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
