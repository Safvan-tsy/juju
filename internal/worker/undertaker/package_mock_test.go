// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/undertaker (interfaces: ControllerModelService,RemovalServiceGetter,RemovalService)
//
// Generated by this command:
//
//	mockgen -typed -package undertaker -destination package_mock_test.go github.com/juju/juju/internal/worker/undertaker ControllerModelService,RemovalServiceGetter,RemovalService
//

// Package undertaker is a generated GoMock package.
package undertaker

import (
	context "context"
	reflect "reflect"

	life "github.com/juju/juju/core/life"
	model "github.com/juju/juju/core/model"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerModelService is a mock of ControllerModelService interface.
type MockControllerModelService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerModelServiceMockRecorder
}

// MockControllerModelServiceMockRecorder is the mock recorder for MockControllerModelService.
type MockControllerModelServiceMockRecorder struct {
	mock *MockControllerModelService
}

// NewMockControllerModelService creates a new mock instance.
func NewMockControllerModelService(ctrl *gomock.Controller) *MockControllerModelService {
	mock := &MockControllerModelService{ctrl: ctrl}
	mock.recorder = &MockControllerModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerModelService) EXPECT() *MockControllerModelServiceMockRecorder {
	return m.recorder
}

// GetModelLife mocks base method.
func (m *MockControllerModelService) GetModelLife(arg0 context.Context, arg1 model.UUID) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelLife indicates an expected call of GetModelLife.
func (mr *MockControllerModelServiceMockRecorder) GetModelLife(arg0, arg1 any) *MockControllerModelServiceGetModelLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelLife", reflect.TypeOf((*MockControllerModelService)(nil).GetModelLife), arg0, arg1)
	return &MockControllerModelServiceGetModelLifeCall{Call: call}
}

// MockControllerModelServiceGetModelLifeCall wrap *gomock.Call
type MockControllerModelServiceGetModelLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerModelServiceGetModelLifeCall) Return(arg0 life.Value, arg1 error) *MockControllerModelServiceGetModelLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerModelServiceGetModelLifeCall) Do(f func(context.Context, model.UUID) (life.Value, error)) *MockControllerModelServiceGetModelLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerModelServiceGetModelLifeCall) DoAndReturn(f func(context.Context, model.UUID) (life.Value, error)) *MockControllerModelServiceGetModelLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchActivatedModels mocks base method.
func (m *MockControllerModelService) WatchActivatedModels(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchActivatedModels", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchActivatedModels indicates an expected call of WatchActivatedModels.
func (mr *MockControllerModelServiceMockRecorder) WatchActivatedModels(arg0 any) *MockControllerModelServiceWatchActivatedModelsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchActivatedModels", reflect.TypeOf((*MockControllerModelService)(nil).WatchActivatedModels), arg0)
	return &MockControllerModelServiceWatchActivatedModelsCall{Call: call}
}

// MockControllerModelServiceWatchActivatedModelsCall wrap *gomock.Call
type MockControllerModelServiceWatchActivatedModelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerModelServiceWatchActivatedModelsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockControllerModelServiceWatchActivatedModelsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerModelServiceWatchActivatedModelsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockControllerModelServiceWatchActivatedModelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerModelServiceWatchActivatedModelsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockControllerModelServiceWatchActivatedModelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemovalServiceGetter is a mock of RemovalServiceGetter interface.
type MockRemovalServiceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockRemovalServiceGetterMockRecorder
}

// MockRemovalServiceGetterMockRecorder is the mock recorder for MockRemovalServiceGetter.
type MockRemovalServiceGetterMockRecorder struct {
	mock *MockRemovalServiceGetter
}

// NewMockRemovalServiceGetter creates a new mock instance.
func NewMockRemovalServiceGetter(ctrl *gomock.Controller) *MockRemovalServiceGetter {
	mock := &MockRemovalServiceGetter{ctrl: ctrl}
	mock.recorder = &MockRemovalServiceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemovalServiceGetter) EXPECT() *MockRemovalServiceGetterMockRecorder {
	return m.recorder
}

// GetRemovalService mocks base method.
func (m *MockRemovalServiceGetter) GetRemovalService(arg0 context.Context, arg1 model.UUID) (RemovalService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemovalService", arg0, arg1)
	ret0, _ := ret[0].(RemovalService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemovalService indicates an expected call of GetRemovalService.
func (mr *MockRemovalServiceGetterMockRecorder) GetRemovalService(arg0, arg1 any) *MockRemovalServiceGetterGetRemovalServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemovalService", reflect.TypeOf((*MockRemovalServiceGetter)(nil).GetRemovalService), arg0, arg1)
	return &MockRemovalServiceGetterGetRemovalServiceCall{Call: call}
}

// MockRemovalServiceGetterGetRemovalServiceCall wrap *gomock.Call
type MockRemovalServiceGetterGetRemovalServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemovalServiceGetterGetRemovalServiceCall) Return(arg0 RemovalService, arg1 error) *MockRemovalServiceGetterGetRemovalServiceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemovalServiceGetterGetRemovalServiceCall) Do(f func(context.Context, model.UUID) (RemovalService, error)) *MockRemovalServiceGetterGetRemovalServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemovalServiceGetterGetRemovalServiceCall) DoAndReturn(f func(context.Context, model.UUID) (RemovalService, error)) *MockRemovalServiceGetterGetRemovalServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemovalService is a mock of RemovalService interface.
type MockRemovalService struct {
	ctrl     *gomock.Controller
	recorder *MockRemovalServiceMockRecorder
}

// MockRemovalServiceMockRecorder is the mock recorder for MockRemovalService.
type MockRemovalServiceMockRecorder struct {
	mock *MockRemovalService
}

// NewMockRemovalService creates a new mock instance.
func NewMockRemovalService(ctrl *gomock.Controller) *MockRemovalService {
	mock := &MockRemovalService{ctrl: ctrl}
	mock.recorder = &MockRemovalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemovalService) EXPECT() *MockRemovalServiceMockRecorder {
	return m.recorder
}

// DeleteModel mocks base method.
func (m *MockRemovalService) DeleteModel(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockRemovalServiceMockRecorder) DeleteModel(arg0 any) *MockRemovalServiceDeleteModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockRemovalService)(nil).DeleteModel), arg0)
	return &MockRemovalServiceDeleteModelCall{Call: call}
}

// MockRemovalServiceDeleteModelCall wrap *gomock.Call
type MockRemovalServiceDeleteModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemovalServiceDeleteModelCall) Return(arg0 error) *MockRemovalServiceDeleteModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemovalServiceDeleteModelCall) Do(f func(context.Context) error) *MockRemovalServiceDeleteModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemovalServiceDeleteModelCall) DoAndReturn(f func(context.Context) error) *MockRemovalServiceDeleteModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
