// Code generated by MockGen. DO NOT EDIT.
// Source: worker.go
//
// Generated by this command:
//
//	mockgen -typed -package remoterelationofferrer -destination service_mock_test.go -source worker.go
//

// Package remoterelationofferrer is a generated GoMock package.
package remoterelationofferrer

import (
	context "context"
	reflect "reflect"

	watcher "github.com/juju/juju/api/watcher"
	watcher0 "github.com/juju/juju/core/watcher"
	crossmodelrelation "github.com/juju/juju/domain/crossmodelrelation"
	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
	macaroon "gopkg.in/macaroon.v2"
)

// MockReportableWorker is a mock of ReportableWorker interface.
type MockReportableWorker struct {
	ctrl     *gomock.Controller
	recorder *MockReportableWorkerMockRecorder
}

// MockReportableWorkerMockRecorder is the mock recorder for MockReportableWorker.
type MockReportableWorkerMockRecorder struct {
	mock *MockReportableWorker
}

// NewMockReportableWorker creates a new mock instance.
func NewMockReportableWorker(ctrl *gomock.Controller) *MockReportableWorker {
	mock := &MockReportableWorker{ctrl: ctrl}
	mock.recorder = &MockReportableWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportableWorker) EXPECT() *MockReportableWorkerMockRecorder {
	return m.recorder
}

// Kill mocks base method.
func (m *MockReportableWorker) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockReportableWorkerMockRecorder) Kill() *MockReportableWorkerKillCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockReportableWorker)(nil).Kill))
	return &MockReportableWorkerKillCall{Call: call}
}

// MockReportableWorkerKillCall wrap *gomock.Call
type MockReportableWorkerKillCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReportableWorkerKillCall) Return() *MockReportableWorkerKillCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReportableWorkerKillCall) Do(f func()) *MockReportableWorkerKillCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReportableWorkerKillCall) DoAndReturn(f func()) *MockReportableWorkerKillCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Report mocks base method.
func (m *MockReportableWorker) Report() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockReportableWorkerMockRecorder) Report() *MockReportableWorkerReportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockReportableWorker)(nil).Report))
	return &MockReportableWorkerReportCall{Call: call}
}

// MockReportableWorkerReportCall wrap *gomock.Call
type MockReportableWorkerReportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReportableWorkerReportCall) Return(arg0 map[string]any) *MockReportableWorkerReportCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReportableWorkerReportCall) Do(f func() map[string]any) *MockReportableWorkerReportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReportableWorkerReportCall) DoAndReturn(f func() map[string]any) *MockReportableWorkerReportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockReportableWorker) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockReportableWorkerMockRecorder) Wait() *MockReportableWorkerWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockReportableWorker)(nil).Wait))
	return &MockReportableWorkerWaitCall{Call: call}
}

// MockReportableWorkerWaitCall wrap *gomock.Call
type MockReportableWorkerWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReportableWorkerWaitCall) Return(arg0 error) *MockReportableWorkerWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReportableWorkerWaitCall) Do(f func() error) *MockReportableWorkerWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReportableWorkerWaitCall) DoAndReturn(f func() error) *MockReportableWorkerWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoteApplicationWorker is a mock of RemoteApplicationWorker interface.
type MockRemoteApplicationWorker struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteApplicationWorkerMockRecorder
}

// MockRemoteApplicationWorkerMockRecorder is the mock recorder for MockRemoteApplicationWorker.
type MockRemoteApplicationWorkerMockRecorder struct {
	mock *MockRemoteApplicationWorker
}

// NewMockRemoteApplicationWorker creates a new mock instance.
func NewMockRemoteApplicationWorker(ctrl *gomock.Controller) *MockRemoteApplicationWorker {
	mock := &MockRemoteApplicationWorker{ctrl: ctrl}
	mock.recorder = &MockRemoteApplicationWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteApplicationWorker) EXPECT() *MockRemoteApplicationWorkerMockRecorder {
	return m.recorder
}

// ApplicationName mocks base method.
func (m *MockRemoteApplicationWorker) ApplicationName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ApplicationName indicates an expected call of ApplicationName.
func (mr *MockRemoteApplicationWorkerMockRecorder) ApplicationName() *MockRemoteApplicationWorkerApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationName", reflect.TypeOf((*MockRemoteApplicationWorker)(nil).ApplicationName))
	return &MockRemoteApplicationWorkerApplicationNameCall{Call: call}
}

// MockRemoteApplicationWorkerApplicationNameCall wrap *gomock.Call
type MockRemoteApplicationWorkerApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationWorkerApplicationNameCall) Return(arg0 string) *MockRemoteApplicationWorkerApplicationNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationWorkerApplicationNameCall) Do(f func() string) *MockRemoteApplicationWorkerApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationWorkerApplicationNameCall) DoAndReturn(f func() string) *MockRemoteApplicationWorkerApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConsumeVersion mocks base method.
func (m *MockRemoteApplicationWorker) ConsumeVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// ConsumeVersion indicates an expected call of ConsumeVersion.
func (mr *MockRemoteApplicationWorkerMockRecorder) ConsumeVersion() *MockRemoteApplicationWorkerConsumeVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeVersion", reflect.TypeOf((*MockRemoteApplicationWorker)(nil).ConsumeVersion))
	return &MockRemoteApplicationWorkerConsumeVersionCall{Call: call}
}

// MockRemoteApplicationWorkerConsumeVersionCall wrap *gomock.Call
type MockRemoteApplicationWorkerConsumeVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationWorkerConsumeVersionCall) Return(arg0 int) *MockRemoteApplicationWorkerConsumeVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationWorkerConsumeVersionCall) Do(f func() int) *MockRemoteApplicationWorkerConsumeVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationWorkerConsumeVersionCall) DoAndReturn(f func() int) *MockRemoteApplicationWorkerConsumeVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OfferUUID mocks base method.
func (m *MockRemoteApplicationWorker) OfferUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// OfferUUID indicates an expected call of OfferUUID.
func (mr *MockRemoteApplicationWorkerMockRecorder) OfferUUID() *MockRemoteApplicationWorkerOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferUUID", reflect.TypeOf((*MockRemoteApplicationWorker)(nil).OfferUUID))
	return &MockRemoteApplicationWorkerOfferUUIDCall{Call: call}
}

// MockRemoteApplicationWorkerOfferUUIDCall wrap *gomock.Call
type MockRemoteApplicationWorkerOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteApplicationWorkerOfferUUIDCall) Return(arg0 string) *MockRemoteApplicationWorkerOfferUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteApplicationWorkerOfferUUIDCall) Do(f func() string) *MockRemoteApplicationWorkerOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteApplicationWorkerOfferUUIDCall) DoAndReturn(f func() string) *MockRemoteApplicationWorkerOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRemoteModelRelationsClient is a mock of RemoteModelRelationsClient interface.
type MockRemoteModelRelationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteModelRelationsClientMockRecorder
}

// MockRemoteModelRelationsClientMockRecorder is the mock recorder for MockRemoteModelRelationsClient.
type MockRemoteModelRelationsClientMockRecorder struct {
	mock *MockRemoteModelRelationsClient
}

// NewMockRemoteModelRelationsClient creates a new mock instance.
func NewMockRemoteModelRelationsClient(ctrl *gomock.Controller) *MockRemoteModelRelationsClient {
	mock := &MockRemoteModelRelationsClient{ctrl: ctrl}
	mock.recorder = &MockRemoteModelRelationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteModelRelationsClient) EXPECT() *MockRemoteModelRelationsClientMockRecorder {
	return m.recorder
}

// PublishRelationChange mocks base method.
func (m *MockRemoteModelRelationsClient) PublishRelationChange(arg0 context.Context, arg1 params.RemoteRelationChangeEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRelationChange", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishRelationChange indicates an expected call of PublishRelationChange.
func (mr *MockRemoteModelRelationsClientMockRecorder) PublishRelationChange(arg0, arg1 any) *MockRemoteModelRelationsClientPublishRelationChangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRelationChange", reflect.TypeOf((*MockRemoteModelRelationsClient)(nil).PublishRelationChange), arg0, arg1)
	return &MockRemoteModelRelationsClientPublishRelationChangeCall{Call: call}
}

// MockRemoteModelRelationsClientPublishRelationChangeCall wrap *gomock.Call
type MockRemoteModelRelationsClientPublishRelationChangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteModelRelationsClientPublishRelationChangeCall) Return(arg0 error) *MockRemoteModelRelationsClientPublishRelationChangeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteModelRelationsClientPublishRelationChangeCall) Do(f func(context.Context, params.RemoteRelationChangeEvent) error) *MockRemoteModelRelationsClientPublishRelationChangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteModelRelationsClientPublishRelationChangeCall) DoAndReturn(f func(context.Context, params.RemoteRelationChangeEvent) error) *MockRemoteModelRelationsClientPublishRelationChangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterRemoteRelations mocks base method.
func (m *MockRemoteModelRelationsClient) RegisterRemoteRelations(arg0 context.Context, relations ...params.RegisterRemoteRelationArg) ([]params.RegisterRemoteRelationResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range relations {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterRemoteRelations", varargs...)
	ret0, _ := ret[0].([]params.RegisterRemoteRelationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterRemoteRelations indicates an expected call of RegisterRemoteRelations.
func (mr *MockRemoteModelRelationsClientMockRecorder) RegisterRemoteRelations(arg0 any, relations ...any) *MockRemoteModelRelationsClientRegisterRemoteRelationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, relations...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRemoteRelations", reflect.TypeOf((*MockRemoteModelRelationsClient)(nil).RegisterRemoteRelations), varargs...)
	return &MockRemoteModelRelationsClientRegisterRemoteRelationsCall{Call: call}
}

// MockRemoteModelRelationsClientRegisterRemoteRelationsCall wrap *gomock.Call
type MockRemoteModelRelationsClientRegisterRemoteRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteModelRelationsClientRegisterRemoteRelationsCall) Return(arg0 []params.RegisterRemoteRelationResult, arg1 error) *MockRemoteModelRelationsClientRegisterRemoteRelationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteModelRelationsClientRegisterRemoteRelationsCall) Do(f func(context.Context, ...params.RegisterRemoteRelationArg) ([]params.RegisterRemoteRelationResult, error)) *MockRemoteModelRelationsClientRegisterRemoteRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteModelRelationsClientRegisterRemoteRelationsCall) DoAndReturn(f func(context.Context, ...params.RegisterRemoteRelationArg) ([]params.RegisterRemoteRelationResult, error)) *MockRemoteModelRelationsClientRegisterRemoteRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchConsumedSecretsChanges mocks base method.
func (m *MockRemoteModelRelationsClient) WatchConsumedSecretsChanges(ctx context.Context, applicationToken, relationToken string, mac *macaroon.Macaroon) (watcher0.SecretsRevisionWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchConsumedSecretsChanges", ctx, applicationToken, relationToken, mac)
	ret0, _ := ret[0].(watcher0.SecretsRevisionWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchConsumedSecretsChanges indicates an expected call of WatchConsumedSecretsChanges.
func (mr *MockRemoteModelRelationsClientMockRecorder) WatchConsumedSecretsChanges(ctx, applicationToken, relationToken, mac any) *MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConsumedSecretsChanges", reflect.TypeOf((*MockRemoteModelRelationsClient)(nil).WatchConsumedSecretsChanges), ctx, applicationToken, relationToken, mac)
	return &MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall{Call: call}
}

// MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall wrap *gomock.Call
type MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall) Return(arg0 watcher0.SecretsRevisionWatcher, arg1 error) *MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall) Do(f func(context.Context, string, string, *macaroon.Macaroon) (watcher0.SecretsRevisionWatcher, error)) *MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall) DoAndReturn(f func(context.Context, string, string, *macaroon.Macaroon) (watcher0.SecretsRevisionWatcher, error)) *MockRemoteModelRelationsClientWatchConsumedSecretsChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchOfferStatus mocks base method.
func (m *MockRemoteModelRelationsClient) WatchOfferStatus(arg0 context.Context, arg params.OfferArg) (watcher0.OfferStatusWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchOfferStatus", arg0, arg)
	ret0, _ := ret[0].(watcher0.OfferStatusWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferStatus indicates an expected call of WatchOfferStatus.
func (mr *MockRemoteModelRelationsClientMockRecorder) WatchOfferStatus(arg0, arg any) *MockRemoteModelRelationsClientWatchOfferStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferStatus", reflect.TypeOf((*MockRemoteModelRelationsClient)(nil).WatchOfferStatus), arg0, arg)
	return &MockRemoteModelRelationsClientWatchOfferStatusCall{Call: call}
}

// MockRemoteModelRelationsClientWatchOfferStatusCall wrap *gomock.Call
type MockRemoteModelRelationsClientWatchOfferStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteModelRelationsClientWatchOfferStatusCall) Return(arg0 watcher0.OfferStatusWatcher, arg1 error) *MockRemoteModelRelationsClientWatchOfferStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteModelRelationsClientWatchOfferStatusCall) Do(f func(context.Context, params.OfferArg) (watcher0.OfferStatusWatcher, error)) *MockRemoteModelRelationsClientWatchOfferStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteModelRelationsClientWatchOfferStatusCall) DoAndReturn(f func(context.Context, params.OfferArg) (watcher0.OfferStatusWatcher, error)) *MockRemoteModelRelationsClientWatchOfferStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRelationChanges mocks base method.
func (m *MockRemoteModelRelationsClient) WatchRelationChanges(arg0 context.Context, relationToken, applicationToken string, macs macaroon.Slice) (watcher.RemoteRelationWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRelationChanges", arg0, relationToken, applicationToken, macs)
	ret0, _ := ret[0].(watcher.RemoteRelationWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRelationChanges indicates an expected call of WatchRelationChanges.
func (mr *MockRemoteModelRelationsClientMockRecorder) WatchRelationChanges(arg0, relationToken, applicationToken, macs any) *MockRemoteModelRelationsClientWatchRelationChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRelationChanges", reflect.TypeOf((*MockRemoteModelRelationsClient)(nil).WatchRelationChanges), arg0, relationToken, applicationToken, macs)
	return &MockRemoteModelRelationsClientWatchRelationChangesCall{Call: call}
}

// MockRemoteModelRelationsClientWatchRelationChangesCall wrap *gomock.Call
type MockRemoteModelRelationsClientWatchRelationChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteModelRelationsClientWatchRelationChangesCall) Return(arg0 watcher.RemoteRelationWatcher, arg1 error) *MockRemoteModelRelationsClientWatchRelationChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteModelRelationsClientWatchRelationChangesCall) Do(f func(context.Context, string, string, macaroon.Slice) (watcher.RemoteRelationWatcher, error)) *MockRemoteModelRelationsClientWatchRelationChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteModelRelationsClientWatchRelationChangesCall) DoAndReturn(f func(context.Context, string, string, macaroon.Slice) (watcher.RemoteRelationWatcher, error)) *MockRemoteModelRelationsClientWatchRelationChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRelationSuspendedStatus mocks base method.
func (m *MockRemoteModelRelationsClient) WatchRelationSuspendedStatus(arg0 context.Context, arg params.RemoteEntityArg) (watcher0.RelationStatusWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRelationSuspendedStatus", arg0, arg)
	ret0, _ := ret[0].(watcher0.RelationStatusWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRelationSuspendedStatus indicates an expected call of WatchRelationSuspendedStatus.
func (mr *MockRemoteModelRelationsClientMockRecorder) WatchRelationSuspendedStatus(arg0, arg any) *MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRelationSuspendedStatus", reflect.TypeOf((*MockRemoteModelRelationsClient)(nil).WatchRelationSuspendedStatus), arg0, arg)
	return &MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall{Call: call}
}

// MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall wrap *gomock.Call
type MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall) Return(arg0 watcher0.RelationStatusWatcher, arg1 error) *MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall) Do(f func(context.Context, params.RemoteEntityArg) (watcher0.RelationStatusWatcher, error)) *MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall) DoAndReturn(f func(context.Context, params.RemoteEntityArg) (watcher0.RelationStatusWatcher, error)) *MockRemoteModelRelationsClientWatchRelationSuspendedStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCrossModelRelationService is a mock of CrossModelRelationService interface.
type MockCrossModelRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelRelationServiceMockRecorder
}

// MockCrossModelRelationServiceMockRecorder is the mock recorder for MockCrossModelRelationService.
type MockCrossModelRelationServiceMockRecorder struct {
	mock *MockCrossModelRelationService
}

// NewMockCrossModelRelationService creates a new mock instance.
func NewMockCrossModelRelationService(ctrl *gomock.Controller) *MockCrossModelRelationService {
	mock := &MockCrossModelRelationService{ctrl: ctrl}
	mock.recorder = &MockCrossModelRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelRelationService) EXPECT() *MockCrossModelRelationServiceMockRecorder {
	return m.recorder
}

// GetRemoteApplicationOfferrers mocks base method.
func (m *MockCrossModelRelationService) GetRemoteApplicationOfferrers(arg0 context.Context) ([]crossmodelrelation.RemoteApplicationOfferrer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteApplicationOfferrers", arg0)
	ret0, _ := ret[0].([]crossmodelrelation.RemoteApplicationOfferrer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteApplicationOfferrers indicates an expected call of GetRemoteApplicationOfferrers.
func (mr *MockCrossModelRelationServiceMockRecorder) GetRemoteApplicationOfferrers(arg0 any) *MockCrossModelRelationServiceGetRemoteApplicationOfferrersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteApplicationOfferrers", reflect.TypeOf((*MockCrossModelRelationService)(nil).GetRemoteApplicationOfferrers), arg0)
	return &MockCrossModelRelationServiceGetRemoteApplicationOfferrersCall{Call: call}
}

// MockCrossModelRelationServiceGetRemoteApplicationOfferrersCall wrap *gomock.Call
type MockCrossModelRelationServiceGetRemoteApplicationOfferrersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceGetRemoteApplicationOfferrersCall) Return(arg0 []crossmodelrelation.RemoteApplicationOfferrer, arg1 error) *MockCrossModelRelationServiceGetRemoteApplicationOfferrersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceGetRemoteApplicationOfferrersCall) Do(f func(context.Context) ([]crossmodelrelation.RemoteApplicationOfferrer, error)) *MockCrossModelRelationServiceGetRemoteApplicationOfferrersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceGetRemoteApplicationOfferrersCall) DoAndReturn(f func(context.Context) ([]crossmodelrelation.RemoteApplicationOfferrer, error)) *MockCrossModelRelationServiceGetRemoteApplicationOfferrersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRemoteApplicationOfferrers mocks base method.
func (m *MockCrossModelRelationService) WatchRemoteApplicationOfferrers(ctx context.Context) (watcher0.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRemoteApplicationOfferrers", ctx)
	ret0, _ := ret[0].(watcher0.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRemoteApplicationOfferrers indicates an expected call of WatchRemoteApplicationOfferrers.
func (mr *MockCrossModelRelationServiceMockRecorder) WatchRemoteApplicationOfferrers(ctx any) *MockCrossModelRelationServiceWatchRemoteApplicationOfferrersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRemoteApplicationOfferrers", reflect.TypeOf((*MockCrossModelRelationService)(nil).WatchRemoteApplicationOfferrers), ctx)
	return &MockCrossModelRelationServiceWatchRemoteApplicationOfferrersCall{Call: call}
}

// MockCrossModelRelationServiceWatchRemoteApplicationOfferrersCall wrap *gomock.Call
type MockCrossModelRelationServiceWatchRemoteApplicationOfferrersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCrossModelRelationServiceWatchRemoteApplicationOfferrersCall) Return(arg0 watcher0.NotifyWatcher, arg1 error) *MockCrossModelRelationServiceWatchRemoteApplicationOfferrersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCrossModelRelationServiceWatchRemoteApplicationOfferrersCall) Do(f func(context.Context) (watcher0.NotifyWatcher, error)) *MockCrossModelRelationServiceWatchRemoteApplicationOfferrersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCrossModelRelationServiceWatchRemoteApplicationOfferrersCall) DoAndReturn(f func(context.Context) (watcher0.NotifyWatcher, error)) *MockCrossModelRelationServiceWatchRemoteApplicationOfferrersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
