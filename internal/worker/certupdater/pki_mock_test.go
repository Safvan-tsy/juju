// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/pki (interfaces: Authority,LeafRequest)
//
// Generated by this command:
//
//	mockgen -typed -package certupdater -destination pki_mock_test.go github.com/juju/juju/internal/pki Authority,LeafRequest
//

// Package certupdater is a generated GoMock package.
package certupdater

import (
	crypto "crypto"
	tls "crypto/tls"
	x509 "crypto/x509"
	net "net"
	reflect "reflect"

	pki "github.com/juju/juju/internal/pki"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthority is a mock of Authority interface.
type MockAuthority struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorityMockRecorder
}

// MockAuthorityMockRecorder is the mock recorder for MockAuthority.
type MockAuthorityMockRecorder struct {
	mock *MockAuthority
}

// NewMockAuthority creates a new mock instance.
func NewMockAuthority(ctrl *gomock.Controller) *MockAuthority {
	mock := &MockAuthority{ctrl: ctrl}
	mock.recorder = &MockAuthorityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthority) EXPECT() *MockAuthorityMockRecorder {
	return m.recorder
}

// Certificate mocks base method.
func (m *MockAuthority) Certificate() *x509.Certificate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Certificate")
	ret0, _ := ret[0].(*x509.Certificate)
	return ret0
}

// Certificate indicates an expected call of Certificate.
func (mr *MockAuthorityMockRecorder) Certificate() *MockAuthorityCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Certificate", reflect.TypeOf((*MockAuthority)(nil).Certificate))
	return &MockAuthorityCertificateCall{Call: call}
}

// MockAuthorityCertificateCall wrap *gomock.Call
type MockAuthorityCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthorityCertificateCall) Return(arg0 *x509.Certificate) *MockAuthorityCertificateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthorityCertificateCall) Do(f func() *x509.Certificate) *MockAuthorityCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthorityCertificateCall) DoAndReturn(f func() *x509.Certificate) *MockAuthorityCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Chain mocks base method.
func (m *MockAuthority) Chain() []*x509.Certificate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chain")
	ret0, _ := ret[0].([]*x509.Certificate)
	return ret0
}

// Chain indicates an expected call of Chain.
func (mr *MockAuthorityMockRecorder) Chain() *MockAuthorityChainCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chain", reflect.TypeOf((*MockAuthority)(nil).Chain))
	return &MockAuthorityChainCall{Call: call}
}

// MockAuthorityChainCall wrap *gomock.Call
type MockAuthorityChainCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthorityChainCall) Return(arg0 []*x509.Certificate) *MockAuthorityChainCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthorityChainCall) Do(f func() []*x509.Certificate) *MockAuthorityChainCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthorityChainCall) DoAndReturn(f func() []*x509.Certificate) *MockAuthorityChainCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LeafForGroup mocks base method.
func (m *MockAuthority) LeafForGroup(arg0 string) (pki.Leaf, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeafForGroup", arg0)
	ret0, _ := ret[0].(pki.Leaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeafForGroup indicates an expected call of LeafForGroup.
func (mr *MockAuthorityMockRecorder) LeafForGroup(arg0 any) *MockAuthorityLeafForGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeafForGroup", reflect.TypeOf((*MockAuthority)(nil).LeafForGroup), arg0)
	return &MockAuthorityLeafForGroupCall{Call: call}
}

// MockAuthorityLeafForGroupCall wrap *gomock.Call
type MockAuthorityLeafForGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthorityLeafForGroupCall) Return(arg0 pki.Leaf, arg1 error) *MockAuthorityLeafForGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthorityLeafForGroupCall) Do(f func(string) (pki.Leaf, error)) *MockAuthorityLeafForGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthorityLeafForGroupCall) DoAndReturn(f func(string) (pki.Leaf, error)) *MockAuthorityLeafForGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LeafGroupFromPemCertKey mocks base method.
func (m *MockAuthority) LeafGroupFromPemCertKey(arg0 string, arg1, arg2 []byte) (pki.Leaf, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeafGroupFromPemCertKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(pki.Leaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeafGroupFromPemCertKey indicates an expected call of LeafGroupFromPemCertKey.
func (mr *MockAuthorityMockRecorder) LeafGroupFromPemCertKey(arg0, arg1, arg2 any) *MockAuthorityLeafGroupFromPemCertKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeafGroupFromPemCertKey", reflect.TypeOf((*MockAuthority)(nil).LeafGroupFromPemCertKey), arg0, arg1, arg2)
	return &MockAuthorityLeafGroupFromPemCertKeyCall{Call: call}
}

// MockAuthorityLeafGroupFromPemCertKeyCall wrap *gomock.Call
type MockAuthorityLeafGroupFromPemCertKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthorityLeafGroupFromPemCertKeyCall) Return(arg0 pki.Leaf, arg1 error) *MockAuthorityLeafGroupFromPemCertKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthorityLeafGroupFromPemCertKeyCall) Do(f func(string, []byte, []byte) (pki.Leaf, error)) *MockAuthorityLeafGroupFromPemCertKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthorityLeafGroupFromPemCertKeyCall) DoAndReturn(f func(string, []byte, []byte) (pki.Leaf, error)) *MockAuthorityLeafGroupFromPemCertKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LeafRange mocks base method.
func (m *MockAuthority) LeafRange(arg0 func(pki.Leaf) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LeafRange", arg0)
}

// LeafRange indicates an expected call of LeafRange.
func (mr *MockAuthorityMockRecorder) LeafRange(arg0 any) *MockAuthorityLeafRangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeafRange", reflect.TypeOf((*MockAuthority)(nil).LeafRange), arg0)
	return &MockAuthorityLeafRangeCall{Call: call}
}

// MockAuthorityLeafRangeCall wrap *gomock.Call
type MockAuthorityLeafRangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthorityLeafRangeCall) Return() *MockAuthorityLeafRangeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthorityLeafRangeCall) Do(f func(func(pki.Leaf) bool)) *MockAuthorityLeafRangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthorityLeafRangeCall) DoAndReturn(f func(func(pki.Leaf) bool)) *MockAuthorityLeafRangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LeafRequestForGroup mocks base method.
func (m *MockAuthority) LeafRequestForGroup(arg0 string) pki.LeafRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeafRequestForGroup", arg0)
	ret0, _ := ret[0].(pki.LeafRequest)
	return ret0
}

// LeafRequestForGroup indicates an expected call of LeafRequestForGroup.
func (mr *MockAuthorityMockRecorder) LeafRequestForGroup(arg0 any) *MockAuthorityLeafRequestForGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeafRequestForGroup", reflect.TypeOf((*MockAuthority)(nil).LeafRequestForGroup), arg0)
	return &MockAuthorityLeafRequestForGroupCall{Call: call}
}

// MockAuthorityLeafRequestForGroupCall wrap *gomock.Call
type MockAuthorityLeafRequestForGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthorityLeafRequestForGroupCall) Return(arg0 pki.LeafRequest) *MockAuthorityLeafRequestForGroupCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthorityLeafRequestForGroupCall) Do(f func(string) pki.LeafRequest) *MockAuthorityLeafRequestForGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthorityLeafRequestForGroupCall) DoAndReturn(f func(string) pki.LeafRequest) *MockAuthorityLeafRequestForGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Signer mocks base method.
func (m *MockAuthority) Signer() crypto.Signer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signer")
	ret0, _ := ret[0].(crypto.Signer)
	return ret0
}

// Signer indicates an expected call of Signer.
func (mr *MockAuthorityMockRecorder) Signer() *MockAuthoritySignerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signer", reflect.TypeOf((*MockAuthority)(nil).Signer))
	return &MockAuthoritySignerCall{Call: call}
}

// MockAuthoritySignerCall wrap *gomock.Call
type MockAuthoritySignerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthoritySignerCall) Return(arg0 crypto.Signer) *MockAuthoritySignerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthoritySignerCall) Do(f func() crypto.Signer) *MockAuthoritySignerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthoritySignerCall) DoAndReturn(f func() crypto.Signer) *MockAuthoritySignerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TLSCertificate mocks base method.
func (m *MockAuthority) TLSCertificate() *tls.Certificate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TLSCertificate")
	ret0, _ := ret[0].(*tls.Certificate)
	return ret0
}

// TLSCertificate indicates an expected call of TLSCertificate.
func (mr *MockAuthorityMockRecorder) TLSCertificate() *MockAuthorityTLSCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TLSCertificate", reflect.TypeOf((*MockAuthority)(nil).TLSCertificate))
	return &MockAuthorityTLSCertificateCall{Call: call}
}

// MockAuthorityTLSCertificateCall wrap *gomock.Call
type MockAuthorityTLSCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthorityTLSCertificateCall) Return(arg0 *tls.Certificate) *MockAuthorityTLSCertificateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthorityTLSCertificateCall) Do(f func() *tls.Certificate) *MockAuthorityTLSCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthorityTLSCertificateCall) DoAndReturn(f func() *tls.Certificate) *MockAuthorityTLSCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ToPemParts mocks base method.
func (m *MockAuthority) ToPemParts() ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToPemParts")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ToPemParts indicates an expected call of ToPemParts.
func (mr *MockAuthorityMockRecorder) ToPemParts() *MockAuthorityToPemPartsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToPemParts", reflect.TypeOf((*MockAuthority)(nil).ToPemParts))
	return &MockAuthorityToPemPartsCall{Call: call}
}

// MockAuthorityToPemPartsCall wrap *gomock.Call
type MockAuthorityToPemPartsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuthorityToPemPartsCall) Return(arg0, arg1 []byte, arg2 error) *MockAuthorityToPemPartsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuthorityToPemPartsCall) Do(f func() ([]byte, []byte, error)) *MockAuthorityToPemPartsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuthorityToPemPartsCall) DoAndReturn(f func() ([]byte, []byte, error)) *MockAuthorityToPemPartsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLeafRequest is a mock of LeafRequest interface.
type MockLeafRequest struct {
	ctrl     *gomock.Controller
	recorder *MockLeafRequestMockRecorder
}

// MockLeafRequestMockRecorder is the mock recorder for MockLeafRequest.
type MockLeafRequestMockRecorder struct {
	mock *MockLeafRequest
}

// NewMockLeafRequest creates a new mock instance.
func NewMockLeafRequest(ctrl *gomock.Controller) *MockLeafRequest {
	mock := &MockLeafRequest{ctrl: ctrl}
	mock.recorder = &MockLeafRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeafRequest) EXPECT() *MockLeafRequestMockRecorder {
	return m.recorder
}

// AddDNSNames mocks base method.
func (m *MockLeafRequest) AddDNSNames(arg0 ...string) pki.LeafRequest {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddDNSNames", varargs...)
	ret0, _ := ret[0].(pki.LeafRequest)
	return ret0
}

// AddDNSNames indicates an expected call of AddDNSNames.
func (mr *MockLeafRequestMockRecorder) AddDNSNames(arg0 ...any) *MockLeafRequestAddDNSNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDNSNames", reflect.TypeOf((*MockLeafRequest)(nil).AddDNSNames), arg0...)
	return &MockLeafRequestAddDNSNamesCall{Call: call}
}

// MockLeafRequestAddDNSNamesCall wrap *gomock.Call
type MockLeafRequestAddDNSNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeafRequestAddDNSNamesCall) Return(arg0 pki.LeafRequest) *MockLeafRequestAddDNSNamesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeafRequestAddDNSNamesCall) Do(f func(...string) pki.LeafRequest) *MockLeafRequestAddDNSNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeafRequestAddDNSNamesCall) DoAndReturn(f func(...string) pki.LeafRequest) *MockLeafRequestAddDNSNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddIPAddresses mocks base method.
func (m *MockLeafRequest) AddIPAddresses(arg0 ...net.IP) pki.LeafRequest {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddIPAddresses", varargs...)
	ret0, _ := ret[0].(pki.LeafRequest)
	return ret0
}

// AddIPAddresses indicates an expected call of AddIPAddresses.
func (mr *MockLeafRequestMockRecorder) AddIPAddresses(arg0 ...any) *MockLeafRequestAddIPAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIPAddresses", reflect.TypeOf((*MockLeafRequest)(nil).AddIPAddresses), arg0...)
	return &MockLeafRequestAddIPAddressesCall{Call: call}
}

// MockLeafRequestAddIPAddressesCall wrap *gomock.Call
type MockLeafRequestAddIPAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeafRequestAddIPAddressesCall) Return(arg0 pki.LeafRequest) *MockLeafRequestAddIPAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeafRequestAddIPAddressesCall) Do(f func(...net.IP) pki.LeafRequest) *MockLeafRequestAddIPAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeafRequestAddIPAddressesCall) DoAndReturn(f func(...net.IP) pki.LeafRequest) *MockLeafRequestAddIPAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Commit mocks base method.
func (m *MockLeafRequest) Commit() (pki.Leaf, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(pki.Leaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockLeafRequestMockRecorder) Commit() *MockLeafRequestCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockLeafRequest)(nil).Commit))
	return &MockLeafRequestCommitCall{Call: call}
}

// MockLeafRequestCommitCall wrap *gomock.Call
type MockLeafRequestCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeafRequestCommitCall) Return(arg0 pki.Leaf, arg1 error) *MockLeafRequestCommitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeafRequestCommitCall) Do(f func() (pki.Leaf, error)) *MockLeafRequestCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeafRequestCommitCall) DoAndReturn(f func() (pki.Leaf, error)) *MockLeafRequestCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
