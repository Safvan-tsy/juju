// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/certupdater (interfaces: ControllerNodeService,ControllerDomainServices)
//
// Generated by this command:
//
//	mockgen -typed -package certupdater -destination package_mock_test.go github.com/juju/juju/internal/worker/certupdater ControllerNodeService,ControllerDomainServices
//

// Package certupdater is a generated GoMock package.
package certupdater

import (
	context "context"
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerNodeService is a mock of ControllerNodeService interface.
type MockControllerNodeService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerNodeServiceMockRecorder
}

// MockControllerNodeServiceMockRecorder is the mock recorder for MockControllerNodeService.
type MockControllerNodeServiceMockRecorder struct {
	mock *MockControllerNodeService
}

// NewMockControllerNodeService creates a new mock instance.
func NewMockControllerNodeService(ctrl *gomock.Controller) *MockControllerNodeService {
	mock := &MockControllerNodeService{ctrl: ctrl}
	mock.recorder = &MockControllerNodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerNodeService) EXPECT() *MockControllerNodeServiceMockRecorder {
	return m.recorder
}

// GetAllCloudLocalAPIAddresses mocks base method.
func (m *MockControllerNodeService) GetAllCloudLocalAPIAddresses(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCloudLocalAPIAddresses", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCloudLocalAPIAddresses indicates an expected call of GetAllCloudLocalAPIAddresses.
func (mr *MockControllerNodeServiceMockRecorder) GetAllCloudLocalAPIAddresses(arg0 any) *MockControllerNodeServiceGetAllCloudLocalAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCloudLocalAPIAddresses", reflect.TypeOf((*MockControllerNodeService)(nil).GetAllCloudLocalAPIAddresses), arg0)
	return &MockControllerNodeServiceGetAllCloudLocalAPIAddressesCall{Call: call}
}

// MockControllerNodeServiceGetAllCloudLocalAPIAddressesCall wrap *gomock.Call
type MockControllerNodeServiceGetAllCloudLocalAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceGetAllCloudLocalAPIAddressesCall) Return(arg0 []string, arg1 error) *MockControllerNodeServiceGetAllCloudLocalAPIAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceGetAllCloudLocalAPIAddressesCall) Do(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetAllCloudLocalAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceGetAllCloudLocalAPIAddressesCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetAllCloudLocalAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchControllerAPIAddresses mocks base method.
func (m *MockControllerNodeService) WatchControllerAPIAddresses(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchControllerAPIAddresses", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchControllerAPIAddresses indicates an expected call of WatchControllerAPIAddresses.
func (mr *MockControllerNodeServiceMockRecorder) WatchControllerAPIAddresses(arg0 any) *MockControllerNodeServiceWatchControllerAPIAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchControllerAPIAddresses", reflect.TypeOf((*MockControllerNodeService)(nil).WatchControllerAPIAddresses), arg0)
	return &MockControllerNodeServiceWatchControllerAPIAddressesCall{Call: call}
}

// MockControllerNodeServiceWatchControllerAPIAddressesCall wrap *gomock.Call
type MockControllerNodeServiceWatchControllerAPIAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceWatchControllerAPIAddressesCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockControllerNodeServiceWatchControllerAPIAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceWatchControllerAPIAddressesCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockControllerNodeServiceWatchControllerAPIAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceWatchControllerAPIAddressesCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockControllerNodeServiceWatchControllerAPIAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerDomainServices is a mock of ControllerDomainServices interface.
type MockControllerDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockControllerDomainServicesMockRecorder
}

// MockControllerDomainServicesMockRecorder is the mock recorder for MockControllerDomainServices.
type MockControllerDomainServicesMockRecorder struct {
	mock *MockControllerDomainServices
}

// NewMockControllerDomainServices creates a new mock instance.
func NewMockControllerDomainServices(ctrl *gomock.Controller) *MockControllerDomainServices {
	mock := &MockControllerDomainServices{ctrl: ctrl}
	mock.recorder = &MockControllerDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerDomainServices) EXPECT() *MockControllerDomainServicesMockRecorder {
	return m.recorder
}

// ControllerNode mocks base method.
func (m *MockControllerDomainServices) ControllerNode() ControllerNodeService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerNode")
	ret0, _ := ret[0].(ControllerNodeService)
	return ret0
}

// ControllerNode indicates an expected call of ControllerNode.
func (mr *MockControllerDomainServicesMockRecorder) ControllerNode() *MockControllerDomainServicesControllerNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerNode", reflect.TypeOf((*MockControllerDomainServices)(nil).ControllerNode))
	return &MockControllerDomainServicesControllerNodeCall{Call: call}
}

// MockControllerDomainServicesControllerNodeCall wrap *gomock.Call
type MockControllerDomainServicesControllerNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesControllerNodeCall) Return(arg0 ControllerNodeService) *MockControllerDomainServicesControllerNodeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesControllerNodeCall) Do(f func() ControllerNodeService) *MockControllerDomainServicesControllerNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesControllerNodeCall) DoAndReturn(f func() ControllerNodeService) *MockControllerDomainServicesControllerNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
