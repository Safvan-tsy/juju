// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/fortress (interfaces: Guest)
//
// Generated by this command:
//
//	mockgen -typed -package objectstorefacade -destination fortress_mock_test.go github.com/juju/juju/internal/worker/fortress Guest
//

// Package objectstorefacade is a generated GoMock package.
package objectstorefacade

import (
	context "context"
	reflect "reflect"

	fortress "github.com/juju/juju/internal/worker/fortress"
	gomock "go.uber.org/mock/gomock"
)

// MockGuest is a mock of Guest interface.
type MockGuest struct {
	ctrl     *gomock.Controller
	recorder *MockGuestMockRecorder
}

// MockGuestMockRecorder is the mock recorder for MockGuest.
type MockGuestMockRecorder struct {
	mock *MockGuest
}

// NewMockGuest creates a new mock instance.
func NewMockGuest(ctrl *gomock.Controller) *MockGuest {
	mock := &MockGuest{ctrl: ctrl}
	mock.recorder = &MockGuestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuest) EXPECT() *MockGuestMockRecorder {
	return m.recorder
}

// Visit mocks base method.
func (m *MockGuest) Visit(arg0 context.Context, arg1 fortress.Visit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Visit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Visit indicates an expected call of Visit.
func (mr *MockGuestMockRecorder) Visit(arg0, arg1 any) *MockGuestVisitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Visit", reflect.TypeOf((*MockGuest)(nil).Visit), arg0, arg1)
	return &MockGuestVisitCall{Call: call}
}

// MockGuestVisitCall wrap *gomock.Call
type MockGuestVisitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGuestVisitCall) Return(arg0 error) *MockGuestVisitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGuestVisitCall) Do(f func(context.Context, fortress.Visit) error) *MockGuestVisitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGuestVisitCall) DoAndReturn(f func(context.Context, fortress.Visit) error) *MockGuestVisitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
