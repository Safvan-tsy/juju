// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/agentconfigupdater (interfaces: ControllerDomainServices,ControllerConfigService)
//
// Generated by this command:
//
//	mockgen -typed -package agentconfigupdater_test -destination service_mock_test.go github.com/juju/juju/internal/worker/agentconfigupdater ControllerDomainServices,ControllerConfigService
//

// Package agentconfigupdater_test is a generated GoMock package.
package agentconfigupdater_test

import (
	context "context"
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	watcher "github.com/juju/juju/core/watcher"
	agentconfigupdater "github.com/juju/juju/internal/worker/agentconfigupdater"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerDomainServices is a mock of ControllerDomainServices interface.
type MockControllerDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockControllerDomainServicesMockRecorder
}

// MockControllerDomainServicesMockRecorder is the mock recorder for MockControllerDomainServices.
type MockControllerDomainServicesMockRecorder struct {
	mock *MockControllerDomainServices
}

// NewMockControllerDomainServices creates a new mock instance.
func NewMockControllerDomainServices(ctrl *gomock.Controller) *MockControllerDomainServices {
	mock := &MockControllerDomainServices{ctrl: ctrl}
	mock.recorder = &MockControllerDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerDomainServices) EXPECT() *MockControllerDomainServicesMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerDomainServices) ControllerConfig() agentconfigupdater.ControllerConfigService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(agentconfigupdater.ControllerConfigService)
	return ret0
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerDomainServicesMockRecorder) ControllerConfig() *MockControllerDomainServicesControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerDomainServices)(nil).ControllerConfig))
	return &MockControllerDomainServicesControllerConfigCall{Call: call}
}

// MockControllerDomainServicesControllerConfigCall wrap *gomock.Call
type MockControllerDomainServicesControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesControllerConfigCall) Return(arg0 agentconfigupdater.ControllerConfigService) *MockControllerDomainServicesControllerConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesControllerConfigCall) Do(f func() agentconfigupdater.ControllerConfigService) *MockControllerDomainServicesControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesControllerConfigCall) DoAndReturn(f func() agentconfigupdater.ControllerConfigService) *MockControllerDomainServicesControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchControllerConfig mocks base method.
func (m *MockControllerConfigService) WatchControllerConfig(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchControllerConfig", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchControllerConfig indicates an expected call of WatchControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) WatchControllerConfig(arg0 any) *MockControllerConfigServiceWatchControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).WatchControllerConfig), arg0)
	return &MockControllerConfigServiceWatchControllerConfigCall{Call: call}
}

// MockControllerConfigServiceWatchControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceWatchControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceWatchControllerConfigCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockControllerConfigServiceWatchControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceWatchControllerConfigCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockControllerConfigServiceWatchControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceWatchControllerConfigCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockControllerConfigServiceWatchControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
