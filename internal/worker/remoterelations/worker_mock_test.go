// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/remoterelations (interfaces: RemoteRelationClientGetter)
//
// Generated by this command:
//
//	mockgen -typed -package remoterelations -destination worker_mock_test.go github.com/juju/juju/internal/worker/remoterelations RemoteRelationClientGetter
//

// Package remoterelations is a generated GoMock package.
package remoterelations

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRemoteRelationClientGetter is a mock of RemoteRelationClientGetter interface.
type MockRemoteRelationClientGetter struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteRelationClientGetterMockRecorder
}

// MockRemoteRelationClientGetterMockRecorder is the mock recorder for MockRemoteRelationClientGetter.
type MockRemoteRelationClientGetterMockRecorder struct {
	mock *MockRemoteRelationClientGetter
}

// NewMockRemoteRelationClientGetter creates a new mock instance.
func NewMockRemoteRelationClientGetter(ctrl *gomock.Controller) *MockRemoteRelationClientGetter {
	mock := &MockRemoteRelationClientGetter{ctrl: ctrl}
	mock.recorder = &MockRemoteRelationClientGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteRelationClientGetter) EXPECT() *MockRemoteRelationClientGetterMockRecorder {
	return m.recorder
}

// GetRemoteRelationClient mocks base method.
func (m *MockRemoteRelationClientGetter) GetRemoteRelationClient(arg0 context.Context, arg1 string) (RemoteModelRelationsClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteRelationClient", arg0, arg1)
	ret0, _ := ret[0].(RemoteModelRelationsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteRelationClient indicates an expected call of GetRemoteRelationClient.
func (mr *MockRemoteRelationClientGetterMockRecorder) GetRemoteRelationClient(arg0, arg1 any) *MockRemoteRelationClientGetterGetRemoteRelationClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteRelationClient", reflect.TypeOf((*MockRemoteRelationClientGetter)(nil).GetRemoteRelationClient), arg0, arg1)
	return &MockRemoteRelationClientGetterGetRemoteRelationClientCall{Call: call}
}

// MockRemoteRelationClientGetterGetRemoteRelationClientCall wrap *gomock.Call
type MockRemoteRelationClientGetterGetRemoteRelationClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemoteRelationClientGetterGetRemoteRelationClientCall) Return(arg0 RemoteModelRelationsClient, arg1 error) *MockRemoteRelationClientGetterGetRemoteRelationClientCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemoteRelationClientGetterGetRemoteRelationClientCall) Do(f func(context.Context, string) (RemoteModelRelationsClient, error)) *MockRemoteRelationClientGetterGetRemoteRelationClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemoteRelationClientGetterGetRemoteRelationClientCall) DoAndReturn(f func(context.Context, string) (RemoteModelRelationsClient, error)) *MockRemoteRelationClientGetterGetRemoteRelationClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
