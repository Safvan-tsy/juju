// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/caas (interfaces: ServiceManager)
//
// Generated by this command:
//
//	mockgen -typed -package bootstrap -destination caas_broker_mock_test.go github.com/juju/juju/caas ServiceManager
//

// Package bootstrap is a generated GoMock package.
package bootstrap

import (
	context "context"
	reflect "reflect"

	caas "github.com/juju/juju/caas"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceManager is a mock of ServiceManager interface.
type MockServiceManager struct {
	ctrl     *gomock.Controller
	recorder *MockServiceManagerMockRecorder
}

// MockServiceManagerMockRecorder is the mock recorder for MockServiceManager.
type MockServiceManagerMockRecorder struct {
	mock *MockServiceManager
}

// NewMockServiceManager creates a new mock instance.
func NewMockServiceManager(ctrl *gomock.Controller) *MockServiceManager {
	mock := &MockServiceManager{ctrl: ctrl}
	mock.recorder = &MockServiceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceManager) EXPECT() *MockServiceManagerMockRecorder {
	return m.recorder
}

// GetService mocks base method.
func (m *MockServiceManager) GetService(arg0 context.Context, arg1 string, arg2 bool) (*caas.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0, arg1, arg2)
	ret0, _ := ret[0].(*caas.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockServiceManagerMockRecorder) GetService(arg0, arg1, arg2 any) *MockServiceManagerGetServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockServiceManager)(nil).GetService), arg0, arg1, arg2)
	return &MockServiceManagerGetServiceCall{Call: call}
}

// MockServiceManagerGetServiceCall wrap *gomock.Call
type MockServiceManagerGetServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceManagerGetServiceCall) Return(arg0 *caas.Service, arg1 error) *MockServiceManagerGetServiceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceManagerGetServiceCall) Do(f func(context.Context, string, bool) (*caas.Service, error)) *MockServiceManagerGetServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceManagerGetServiceCall) DoAndReturn(f func(context.Context, string, bool) (*caas.Service, error)) *MockServiceManagerGetServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
