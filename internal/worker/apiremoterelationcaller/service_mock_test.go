// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/apiremoterelationcaller (interfaces: DomainServicesGetter,DomainServices,APIInfoGetter)
//
// Generated by this command:
//
//	mockgen -typed -package apiremoterelationcaller -destination service_mock_test.go github.com/juju/juju/internal/worker/apiremoterelationcaller DomainServicesGetter,DomainServices,APIInfoGetter
//

// Package apiremoterelationcaller is a generated GoMock package.
package apiremoterelationcaller

import (
	context "context"
	reflect "reflect"

	api "github.com/juju/juju/api"
	model "github.com/juju/juju/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockDomainServicesGetter is a mock of DomainServicesGetter interface.
type MockDomainServicesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServicesGetterMockRecorder
}

// MockDomainServicesGetterMockRecorder is the mock recorder for MockDomainServicesGetter.
type MockDomainServicesGetterMockRecorder struct {
	mock *MockDomainServicesGetter
}

// NewMockDomainServicesGetter creates a new mock instance.
func NewMockDomainServicesGetter(ctrl *gomock.Controller) *MockDomainServicesGetter {
	mock := &MockDomainServicesGetter{ctrl: ctrl}
	mock.recorder = &MockDomainServicesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServicesGetter) EXPECT() *MockDomainServicesGetterMockRecorder {
	return m.recorder
}

// ServicesForModel mocks base method.
func (m *MockDomainServicesGetter) ServicesForModel(arg0 context.Context, arg1 model.UUID) (DomainServices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesForModel", arg0, arg1)
	ret0, _ := ret[0].(DomainServices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicesForModel indicates an expected call of ServicesForModel.
func (mr *MockDomainServicesGetterMockRecorder) ServicesForModel(arg0, arg1 any) *MockDomainServicesGetterServicesForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesForModel", reflect.TypeOf((*MockDomainServicesGetter)(nil).ServicesForModel), arg0, arg1)
	return &MockDomainServicesGetterServicesForModelCall{Call: call}
}

// MockDomainServicesGetterServicesForModelCall wrap *gomock.Call
type MockDomainServicesGetterServicesForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesGetterServicesForModelCall) Return(arg0 DomainServices, arg1 error) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesGetterServicesForModelCall) Do(f func(context.Context, model.UUID) (DomainServices, error)) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesGetterServicesForModelCall) DoAndReturn(f func(context.Context, model.UUID) (DomainServices, error)) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDomainServices is a mock of DomainServices interface.
type MockDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServicesMockRecorder
}

// MockDomainServicesMockRecorder is the mock recorder for MockDomainServices.
type MockDomainServicesMockRecorder struct {
	mock *MockDomainServices
}

// NewMockDomainServices creates a new mock instance.
func NewMockDomainServices(ctrl *gomock.Controller) *MockDomainServices {
	mock := &MockDomainServices{ctrl: ctrl}
	mock.recorder = &MockDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServices) EXPECT() *MockDomainServicesMockRecorder {
	return m.recorder
}

// MockAPIInfoGetter is a mock of APIInfoGetter interface.
type MockAPIInfoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockAPIInfoGetterMockRecorder
}

// MockAPIInfoGetterMockRecorder is the mock recorder for MockAPIInfoGetter.
type MockAPIInfoGetterMockRecorder struct {
	mock *MockAPIInfoGetter
}

// NewMockAPIInfoGetter creates a new mock instance.
func NewMockAPIInfoGetter(ctrl *gomock.Controller) *MockAPIInfoGetter {
	mock := &MockAPIInfoGetter{ctrl: ctrl}
	mock.recorder = &MockAPIInfoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIInfoGetter) EXPECT() *MockAPIInfoGetterMockRecorder {
	return m.recorder
}

// GetAPIInfoForModel mocks base method.
func (m *MockAPIInfoGetter) GetAPIInfoForModel(arg0 context.Context, arg1 model.UUID) (api.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIInfoForModel", arg0, arg1)
	ret0, _ := ret[0].(api.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIInfoForModel indicates an expected call of GetAPIInfoForModel.
func (mr *MockAPIInfoGetterMockRecorder) GetAPIInfoForModel(arg0, arg1 any) *MockAPIInfoGetterGetAPIInfoForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIInfoForModel", reflect.TypeOf((*MockAPIInfoGetter)(nil).GetAPIInfoForModel), arg0, arg1)
	return &MockAPIInfoGetterGetAPIInfoForModelCall{Call: call}
}

// MockAPIInfoGetterGetAPIInfoForModelCall wrap *gomock.Call
type MockAPIInfoGetterGetAPIInfoForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIInfoGetterGetAPIInfoForModelCall) Return(arg0 api.Info, arg1 error) *MockAPIInfoGetterGetAPIInfoForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIInfoGetterGetAPIInfoForModelCall) Do(f func(context.Context, model.UUID) (api.Info, error)) *MockAPIInfoGetterGetAPIInfoForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIInfoGetterGetAPIInfoForModelCall) DoAndReturn(f func(context.Context, model.UUID) (api.Info, error)) *MockAPIInfoGetterGetAPIInfoForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
