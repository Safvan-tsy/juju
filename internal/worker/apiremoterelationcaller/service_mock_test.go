// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/apiremoterelationcaller (interfaces: DomainServicesGetter,DomainServices,APIInfoGetter,ConnectionGetter,ExternalControllerService)
//
// Generated by this command:
//
//	mockgen -typed -package apiremoterelationcaller -destination service_mock_test.go github.com/juju/juju/internal/worker/apiremoterelationcaller DomainServicesGetter,DomainServices,APIInfoGetter,ConnectionGetter,ExternalControllerService
//

// Package apiremoterelationcaller is a generated GoMock package.
package apiremoterelationcaller

import (
	context "context"
	reflect "reflect"

	api "github.com/juju/juju/api"
	crossmodel "github.com/juju/juju/core/crossmodel"
	model "github.com/juju/juju/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockDomainServicesGetter is a mock of DomainServicesGetter interface.
type MockDomainServicesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServicesGetterMockRecorder
}

// MockDomainServicesGetterMockRecorder is the mock recorder for MockDomainServicesGetter.
type MockDomainServicesGetterMockRecorder struct {
	mock *MockDomainServicesGetter
}

// NewMockDomainServicesGetter creates a new mock instance.
func NewMockDomainServicesGetter(ctrl *gomock.Controller) *MockDomainServicesGetter {
	mock := &MockDomainServicesGetter{ctrl: ctrl}
	mock.recorder = &MockDomainServicesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServicesGetter) EXPECT() *MockDomainServicesGetterMockRecorder {
	return m.recorder
}

// ServicesForModel mocks base method.
func (m *MockDomainServicesGetter) ServicesForModel(arg0 context.Context, arg1 model.UUID) (DomainServices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesForModel", arg0, arg1)
	ret0, _ := ret[0].(DomainServices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicesForModel indicates an expected call of ServicesForModel.
func (mr *MockDomainServicesGetterMockRecorder) ServicesForModel(arg0, arg1 any) *MockDomainServicesGetterServicesForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesForModel", reflect.TypeOf((*MockDomainServicesGetter)(nil).ServicesForModel), arg0, arg1)
	return &MockDomainServicesGetterServicesForModelCall{Call: call}
}

// MockDomainServicesGetterServicesForModelCall wrap *gomock.Call
type MockDomainServicesGetterServicesForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesGetterServicesForModelCall) Return(arg0 DomainServices, arg1 error) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesGetterServicesForModelCall) Do(f func(context.Context, model.UUID) (DomainServices, error)) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesGetterServicesForModelCall) DoAndReturn(f func(context.Context, model.UUID) (DomainServices, error)) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDomainServices is a mock of DomainServices interface.
type MockDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServicesMockRecorder
}

// MockDomainServicesMockRecorder is the mock recorder for MockDomainServices.
type MockDomainServicesMockRecorder struct {
	mock *MockDomainServices
}

// NewMockDomainServices creates a new mock instance.
func NewMockDomainServices(ctrl *gomock.Controller) *MockDomainServices {
	mock := &MockDomainServices{ctrl: ctrl}
	mock.recorder = &MockDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServices) EXPECT() *MockDomainServicesMockRecorder {
	return m.recorder
}

// ExternalController mocks base method.
func (m *MockDomainServices) ExternalController() ExternalControllerService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalController")
	ret0, _ := ret[0].(ExternalControllerService)
	return ret0
}

// ExternalController indicates an expected call of ExternalController.
func (mr *MockDomainServicesMockRecorder) ExternalController() *MockDomainServicesExternalControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalController", reflect.TypeOf((*MockDomainServices)(nil).ExternalController))
	return &MockDomainServicesExternalControllerCall{Call: call}
}

// MockDomainServicesExternalControllerCall wrap *gomock.Call
type MockDomainServicesExternalControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesExternalControllerCall) Return(arg0 ExternalControllerService) *MockDomainServicesExternalControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesExternalControllerCall) Do(f func() ExternalControllerService) *MockDomainServicesExternalControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesExternalControllerCall) DoAndReturn(f func() ExternalControllerService) *MockDomainServicesExternalControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAPIInfoGetter is a mock of APIInfoGetter interface.
type MockAPIInfoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockAPIInfoGetterMockRecorder
}

// MockAPIInfoGetterMockRecorder is the mock recorder for MockAPIInfoGetter.
type MockAPIInfoGetterMockRecorder struct {
	mock *MockAPIInfoGetter
}

// NewMockAPIInfoGetter creates a new mock instance.
func NewMockAPIInfoGetter(ctrl *gomock.Controller) *MockAPIInfoGetter {
	mock := &MockAPIInfoGetter{ctrl: ctrl}
	mock.recorder = &MockAPIInfoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIInfoGetter) EXPECT() *MockAPIInfoGetterMockRecorder {
	return m.recorder
}

// GetAPIInfoForModel mocks base method.
func (m *MockAPIInfoGetter) GetAPIInfoForModel(arg0 context.Context, arg1 model.UUID) (api.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIInfoForModel", arg0, arg1)
	ret0, _ := ret[0].(api.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIInfoForModel indicates an expected call of GetAPIInfoForModel.
func (mr *MockAPIInfoGetterMockRecorder) GetAPIInfoForModel(arg0, arg1 any) *MockAPIInfoGetterGetAPIInfoForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIInfoForModel", reflect.TypeOf((*MockAPIInfoGetter)(nil).GetAPIInfoForModel), arg0, arg1)
	return &MockAPIInfoGetterGetAPIInfoForModelCall{Call: call}
}

// MockAPIInfoGetterGetAPIInfoForModelCall wrap *gomock.Call
type MockAPIInfoGetterGetAPIInfoForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIInfoGetterGetAPIInfoForModelCall) Return(arg0 api.Info, arg1 error) *MockAPIInfoGetterGetAPIInfoForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIInfoGetterGetAPIInfoForModelCall) Do(f func(context.Context, model.UUID) (api.Info, error)) *MockAPIInfoGetterGetAPIInfoForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIInfoGetterGetAPIInfoForModelCall) DoAndReturn(f func(context.Context, model.UUID) (api.Info, error)) *MockAPIInfoGetterGetAPIInfoForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockConnectionGetter is a mock of ConnectionGetter interface.
type MockConnectionGetter struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionGetterMockRecorder
}

// MockConnectionGetterMockRecorder is the mock recorder for MockConnectionGetter.
type MockConnectionGetterMockRecorder struct {
	mock *MockConnectionGetter
}

// NewMockConnectionGetter creates a new mock instance.
func NewMockConnectionGetter(ctrl *gomock.Controller) *MockConnectionGetter {
	mock := &MockConnectionGetter{ctrl: ctrl}
	mock.recorder = &MockConnectionGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionGetter) EXPECT() *MockConnectionGetterMockRecorder {
	return m.recorder
}

// GetConnectionForModel mocks base method.
func (m *MockConnectionGetter) GetConnectionForModel(arg0 context.Context, arg1 model.UUID, arg2 api.Info) (api.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionForModel", arg0, arg1, arg2)
	ret0, _ := ret[0].(api.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionForModel indicates an expected call of GetConnectionForModel.
func (mr *MockConnectionGetterMockRecorder) GetConnectionForModel(arg0, arg1, arg2 any) *MockConnectionGetterGetConnectionForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionForModel", reflect.TypeOf((*MockConnectionGetter)(nil).GetConnectionForModel), arg0, arg1, arg2)
	return &MockConnectionGetterGetConnectionForModelCall{Call: call}
}

// MockConnectionGetterGetConnectionForModelCall wrap *gomock.Call
type MockConnectionGetterGetConnectionForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConnectionGetterGetConnectionForModelCall) Return(arg0 api.Connection, arg1 error) *MockConnectionGetterGetConnectionForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConnectionGetterGetConnectionForModelCall) Do(f func(context.Context, model.UUID, api.Info) (api.Connection, error)) *MockConnectionGetterGetConnectionForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConnectionGetterGetConnectionForModelCall) DoAndReturn(f func(context.Context, model.UUID, api.Info) (api.Connection, error)) *MockConnectionGetterGetConnectionForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExternalControllerService is a mock of ExternalControllerService interface.
type MockExternalControllerService struct {
	ctrl     *gomock.Controller
	recorder *MockExternalControllerServiceMockRecorder
}

// MockExternalControllerServiceMockRecorder is the mock recorder for MockExternalControllerService.
type MockExternalControllerServiceMockRecorder struct {
	mock *MockExternalControllerService
}

// NewMockExternalControllerService creates a new mock instance.
func NewMockExternalControllerService(ctrl *gomock.Controller) *MockExternalControllerService {
	mock := &MockExternalControllerService{ctrl: ctrl}
	mock.recorder = &MockExternalControllerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalControllerService) EXPECT() *MockExternalControllerServiceMockRecorder {
	return m.recorder
}

// UpdateExternalController mocks base method.
func (m *MockExternalControllerService) UpdateExternalController(arg0 context.Context, arg1 crossmodel.ControllerInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExternalController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalController indicates an expected call of UpdateExternalController.
func (mr *MockExternalControllerServiceMockRecorder) UpdateExternalController(arg0, arg1 any) *MockExternalControllerServiceUpdateExternalControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalController", reflect.TypeOf((*MockExternalControllerService)(nil).UpdateExternalController), arg0, arg1)
	return &MockExternalControllerServiceUpdateExternalControllerCall{Call: call}
}

// MockExternalControllerServiceUpdateExternalControllerCall wrap *gomock.Call
type MockExternalControllerServiceUpdateExternalControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalControllerServiceUpdateExternalControllerCall) Return(arg0 error) *MockExternalControllerServiceUpdateExternalControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalControllerServiceUpdateExternalControllerCall) Do(f func(context.Context, crossmodel.ControllerInfo) error) *MockExternalControllerServiceUpdateExternalControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalControllerServiceUpdateExternalControllerCall) DoAndReturn(f func(context.Context, crossmodel.ControllerInfo) error) *MockExternalControllerServiceUpdateExternalControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
