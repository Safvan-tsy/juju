// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/apiremoterelationcaller (interfaces: DomainServicesGetter,DomainServices,APIInfoGetter,ConnectionGetter,ExternalControllerService,ControllerConfigService,ModelService,ControllerNodeService)
//
// Generated by this command:
//
//	mockgen -typed -package apiremoterelationcaller -destination service_mock_test.go github.com/juju/juju/internal/worker/apiremoterelationcaller DomainServicesGetter,DomainServices,APIInfoGetter,ConnectionGetter,ExternalControllerService,ControllerConfigService,ModelService,ControllerNodeService
//

// Package apiremoterelationcaller is a generated GoMock package.
package apiremoterelationcaller

import (
	context "context"
	reflect "reflect"

	api "github.com/juju/juju/api"
	controller "github.com/juju/juju/controller"
	crossmodel "github.com/juju/juju/core/crossmodel"
	model "github.com/juju/juju/core/model"
	model0 "github.com/juju/juju/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockDomainServicesGetter is a mock of DomainServicesGetter interface.
type MockDomainServicesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServicesGetterMockRecorder
}

// MockDomainServicesGetterMockRecorder is the mock recorder for MockDomainServicesGetter.
type MockDomainServicesGetterMockRecorder struct {
	mock *MockDomainServicesGetter
}

// NewMockDomainServicesGetter creates a new mock instance.
func NewMockDomainServicesGetter(ctrl *gomock.Controller) *MockDomainServicesGetter {
	mock := &MockDomainServicesGetter{ctrl: ctrl}
	mock.recorder = &MockDomainServicesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServicesGetter) EXPECT() *MockDomainServicesGetterMockRecorder {
	return m.recorder
}

// ServicesForModel mocks base method.
func (m *MockDomainServicesGetter) ServicesForModel(arg0 context.Context, arg1 model.UUID) (DomainServices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesForModel", arg0, arg1)
	ret0, _ := ret[0].(DomainServices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicesForModel indicates an expected call of ServicesForModel.
func (mr *MockDomainServicesGetterMockRecorder) ServicesForModel(arg0, arg1 any) *MockDomainServicesGetterServicesForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesForModel", reflect.TypeOf((*MockDomainServicesGetter)(nil).ServicesForModel), arg0, arg1)
	return &MockDomainServicesGetterServicesForModelCall{Call: call}
}

// MockDomainServicesGetterServicesForModelCall wrap *gomock.Call
type MockDomainServicesGetterServicesForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesGetterServicesForModelCall) Return(arg0 DomainServices, arg1 error) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesGetterServicesForModelCall) Do(f func(context.Context, model.UUID) (DomainServices, error)) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesGetterServicesForModelCall) DoAndReturn(f func(context.Context, model.UUID) (DomainServices, error)) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDomainServices is a mock of DomainServices interface.
type MockDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServicesMockRecorder
}

// MockDomainServicesMockRecorder is the mock recorder for MockDomainServices.
type MockDomainServicesMockRecorder struct {
	mock *MockDomainServices
}

// NewMockDomainServices creates a new mock instance.
func NewMockDomainServices(ctrl *gomock.Controller) *MockDomainServices {
	mock := &MockDomainServices{ctrl: ctrl}
	mock.recorder = &MockDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServices) EXPECT() *MockDomainServicesMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockDomainServices) ControllerConfig() ControllerConfigService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(ControllerConfigService)
	return ret0
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockDomainServicesMockRecorder) ControllerConfig() *MockDomainServicesControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockDomainServices)(nil).ControllerConfig))
	return &MockDomainServicesControllerConfigCall{Call: call}
}

// MockDomainServicesControllerConfigCall wrap *gomock.Call
type MockDomainServicesControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesControllerConfigCall) Return(arg0 ControllerConfigService) *MockDomainServicesControllerConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesControllerConfigCall) Do(f func() ControllerConfigService) *MockDomainServicesControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesControllerConfigCall) DoAndReturn(f func() ControllerConfigService) *MockDomainServicesControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ControllerNode mocks base method.
func (m *MockDomainServices) ControllerNode() ControllerNodeService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerNode")
	ret0, _ := ret[0].(ControllerNodeService)
	return ret0
}

// ControllerNode indicates an expected call of ControllerNode.
func (mr *MockDomainServicesMockRecorder) ControllerNode() *MockDomainServicesControllerNodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerNode", reflect.TypeOf((*MockDomainServices)(nil).ControllerNode))
	return &MockDomainServicesControllerNodeCall{Call: call}
}

// MockDomainServicesControllerNodeCall wrap *gomock.Call
type MockDomainServicesControllerNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesControllerNodeCall) Return(arg0 ControllerNodeService) *MockDomainServicesControllerNodeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesControllerNodeCall) Do(f func() ControllerNodeService) *MockDomainServicesControllerNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesControllerNodeCall) DoAndReturn(f func() ControllerNodeService) *MockDomainServicesControllerNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExternalController mocks base method.
func (m *MockDomainServices) ExternalController() ExternalControllerService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalController")
	ret0, _ := ret[0].(ExternalControllerService)
	return ret0
}

// ExternalController indicates an expected call of ExternalController.
func (mr *MockDomainServicesMockRecorder) ExternalController() *MockDomainServicesExternalControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalController", reflect.TypeOf((*MockDomainServices)(nil).ExternalController))
	return &MockDomainServicesExternalControllerCall{Call: call}
}

// MockDomainServicesExternalControllerCall wrap *gomock.Call
type MockDomainServicesExternalControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesExternalControllerCall) Return(arg0 ExternalControllerService) *MockDomainServicesExternalControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesExternalControllerCall) Do(f func() ExternalControllerService) *MockDomainServicesExternalControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesExternalControllerCall) DoAndReturn(f func() ExternalControllerService) *MockDomainServicesExternalControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Model mocks base method.
func (m *MockDomainServices) Model() ModelService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(ModelService)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockDomainServicesMockRecorder) Model() *MockDomainServicesModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockDomainServices)(nil).Model))
	return &MockDomainServicesModelCall{Call: call}
}

// MockDomainServicesModelCall wrap *gomock.Call
type MockDomainServicesModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesModelCall) Return(arg0 ModelService) *MockDomainServicesModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesModelCall) Do(f func() ModelService) *MockDomainServicesModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesModelCall) DoAndReturn(f func() ModelService) *MockDomainServicesModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAPIInfoGetter is a mock of APIInfoGetter interface.
type MockAPIInfoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockAPIInfoGetterMockRecorder
}

// MockAPIInfoGetterMockRecorder is the mock recorder for MockAPIInfoGetter.
type MockAPIInfoGetterMockRecorder struct {
	mock *MockAPIInfoGetter
}

// NewMockAPIInfoGetter creates a new mock instance.
func NewMockAPIInfoGetter(ctrl *gomock.Controller) *MockAPIInfoGetter {
	mock := &MockAPIInfoGetter{ctrl: ctrl}
	mock.recorder = &MockAPIInfoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIInfoGetter) EXPECT() *MockAPIInfoGetterMockRecorder {
	return m.recorder
}

// GetAPIInfoForModel mocks base method.
func (m *MockAPIInfoGetter) GetAPIInfoForModel(arg0 context.Context, arg1 model.UUID) (api.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIInfoForModel", arg0, arg1)
	ret0, _ := ret[0].(api.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIInfoForModel indicates an expected call of GetAPIInfoForModel.
func (mr *MockAPIInfoGetterMockRecorder) GetAPIInfoForModel(arg0, arg1 any) *MockAPIInfoGetterGetAPIInfoForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIInfoForModel", reflect.TypeOf((*MockAPIInfoGetter)(nil).GetAPIInfoForModel), arg0, arg1)
	return &MockAPIInfoGetterGetAPIInfoForModelCall{Call: call}
}

// MockAPIInfoGetterGetAPIInfoForModelCall wrap *gomock.Call
type MockAPIInfoGetterGetAPIInfoForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIInfoGetterGetAPIInfoForModelCall) Return(arg0 api.Info, arg1 error) *MockAPIInfoGetterGetAPIInfoForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIInfoGetterGetAPIInfoForModelCall) Do(f func(context.Context, model.UUID) (api.Info, error)) *MockAPIInfoGetterGetAPIInfoForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIInfoGetterGetAPIInfoForModelCall) DoAndReturn(f func(context.Context, model.UUID) (api.Info, error)) *MockAPIInfoGetterGetAPIInfoForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockConnectionGetter is a mock of ConnectionGetter interface.
type MockConnectionGetter struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionGetterMockRecorder
}

// MockConnectionGetterMockRecorder is the mock recorder for MockConnectionGetter.
type MockConnectionGetterMockRecorder struct {
	mock *MockConnectionGetter
}

// NewMockConnectionGetter creates a new mock instance.
func NewMockConnectionGetter(ctrl *gomock.Controller) *MockConnectionGetter {
	mock := &MockConnectionGetter{ctrl: ctrl}
	mock.recorder = &MockConnectionGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionGetter) EXPECT() *MockConnectionGetterMockRecorder {
	return m.recorder
}

// GetConnectionForModel mocks base method.
func (m *MockConnectionGetter) GetConnectionForModel(arg0 context.Context, arg1 model.UUID, arg2 api.Info) (api.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionForModel", arg0, arg1, arg2)
	ret0, _ := ret[0].(api.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionForModel indicates an expected call of GetConnectionForModel.
func (mr *MockConnectionGetterMockRecorder) GetConnectionForModel(arg0, arg1, arg2 any) *MockConnectionGetterGetConnectionForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionForModel", reflect.TypeOf((*MockConnectionGetter)(nil).GetConnectionForModel), arg0, arg1, arg2)
	return &MockConnectionGetterGetConnectionForModelCall{Call: call}
}

// MockConnectionGetterGetConnectionForModelCall wrap *gomock.Call
type MockConnectionGetterGetConnectionForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConnectionGetterGetConnectionForModelCall) Return(arg0 api.Connection, arg1 error) *MockConnectionGetterGetConnectionForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConnectionGetterGetConnectionForModelCall) Do(f func(context.Context, model.UUID, api.Info) (api.Connection, error)) *MockConnectionGetterGetConnectionForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConnectionGetterGetConnectionForModelCall) DoAndReturn(f func(context.Context, model.UUID, api.Info) (api.Connection, error)) *MockConnectionGetterGetConnectionForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExternalControllerService is a mock of ExternalControllerService interface.
type MockExternalControllerService struct {
	ctrl     *gomock.Controller
	recorder *MockExternalControllerServiceMockRecorder
}

// MockExternalControllerServiceMockRecorder is the mock recorder for MockExternalControllerService.
type MockExternalControllerServiceMockRecorder struct {
	mock *MockExternalControllerService
}

// NewMockExternalControllerService creates a new mock instance.
func NewMockExternalControllerService(ctrl *gomock.Controller) *MockExternalControllerService {
	mock := &MockExternalControllerService{ctrl: ctrl}
	mock.recorder = &MockExternalControllerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalControllerService) EXPECT() *MockExternalControllerServiceMockRecorder {
	return m.recorder
}

// ControllerForModel mocks base method.
func (m *MockExternalControllerService) ControllerForModel(arg0 context.Context, arg1 string) (*crossmodel.ControllerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerForModel", arg0, arg1)
	ret0, _ := ret[0].(*crossmodel.ControllerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerForModel indicates an expected call of ControllerForModel.
func (mr *MockExternalControllerServiceMockRecorder) ControllerForModel(arg0, arg1 any) *MockExternalControllerServiceControllerForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerForModel", reflect.TypeOf((*MockExternalControllerService)(nil).ControllerForModel), arg0, arg1)
	return &MockExternalControllerServiceControllerForModelCall{Call: call}
}

// MockExternalControllerServiceControllerForModelCall wrap *gomock.Call
type MockExternalControllerServiceControllerForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalControllerServiceControllerForModelCall) Return(arg0 *crossmodel.ControllerInfo, arg1 error) *MockExternalControllerServiceControllerForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalControllerServiceControllerForModelCall) Do(f func(context.Context, string) (*crossmodel.ControllerInfo, error)) *MockExternalControllerServiceControllerForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalControllerServiceControllerForModelCall) DoAndReturn(f func(context.Context, string) (*crossmodel.ControllerInfo, error)) *MockExternalControllerServiceControllerForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateExternalController mocks base method.
func (m *MockExternalControllerService) UpdateExternalController(arg0 context.Context, arg1 crossmodel.ControllerInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExternalController", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalController indicates an expected call of UpdateExternalController.
func (mr *MockExternalControllerServiceMockRecorder) UpdateExternalController(arg0, arg1 any) *MockExternalControllerServiceUpdateExternalControllerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalController", reflect.TypeOf((*MockExternalControllerService)(nil).UpdateExternalController), arg0, arg1)
	return &MockExternalControllerServiceUpdateExternalControllerCall{Call: call}
}

// MockExternalControllerServiceUpdateExternalControllerCall wrap *gomock.Call
type MockExternalControllerServiceUpdateExternalControllerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalControllerServiceUpdateExternalControllerCall) Return(arg0 error) *MockExternalControllerServiceUpdateExternalControllerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalControllerServiceUpdateExternalControllerCall) Do(f func(context.Context, crossmodel.ControllerInfo) error) *MockExternalControllerServiceUpdateExternalControllerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalControllerServiceUpdateExternalControllerCall) DoAndReturn(f func(context.Context, crossmodel.ControllerInfo) error) *MockExternalControllerServiceUpdateExternalControllerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// CheckModelExists mocks base method.
func (m *MockModelService) CheckModelExists(arg0 context.Context, arg1 model.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckModelExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckModelExists indicates an expected call of CheckModelExists.
func (mr *MockModelServiceMockRecorder) CheckModelExists(arg0, arg1 any) *MockModelServiceCheckModelExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckModelExists", reflect.TypeOf((*MockModelService)(nil).CheckModelExists), arg0, arg1)
	return &MockModelServiceCheckModelExistsCall{Call: call}
}

// MockModelServiceCheckModelExistsCall wrap *gomock.Call
type MockModelServiceCheckModelExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceCheckModelExistsCall) Return(arg0 bool, arg1 error) *MockModelServiceCheckModelExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceCheckModelExistsCall) Do(f func(context.Context, model.UUID) (bool, error)) *MockModelServiceCheckModelExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceCheckModelExistsCall) DoAndReturn(f func(context.Context, model.UUID) (bool, error)) *MockModelServiceCheckModelExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelRedirection mocks base method.
func (m *MockModelService) ModelRedirection(arg0 context.Context, arg1 model.UUID) (model0.ModelRedirection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelRedirection", arg0, arg1)
	ret0, _ := ret[0].(model0.ModelRedirection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelRedirection indicates an expected call of ModelRedirection.
func (mr *MockModelServiceMockRecorder) ModelRedirection(arg0, arg1 any) *MockModelServiceModelRedirectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelRedirection", reflect.TypeOf((*MockModelService)(nil).ModelRedirection), arg0, arg1)
	return &MockModelServiceModelRedirectionCall{Call: call}
}

// MockModelServiceModelRedirectionCall wrap *gomock.Call
type MockModelServiceModelRedirectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceModelRedirectionCall) Return(arg0 model0.ModelRedirection, arg1 error) *MockModelServiceModelRedirectionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceModelRedirectionCall) Do(f func(context.Context, model.UUID) (model0.ModelRedirection, error)) *MockModelServiceModelRedirectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceModelRedirectionCall) DoAndReturn(f func(context.Context, model.UUID) (model0.ModelRedirection, error)) *MockModelServiceModelRedirectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerNodeService is a mock of ControllerNodeService interface.
type MockControllerNodeService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerNodeServiceMockRecorder
}

// MockControllerNodeServiceMockRecorder is the mock recorder for MockControllerNodeService.
type MockControllerNodeServiceMockRecorder struct {
	mock *MockControllerNodeService
}

// NewMockControllerNodeService creates a new mock instance.
func NewMockControllerNodeService(ctrl *gomock.Controller) *MockControllerNodeService {
	mock := &MockControllerNodeService{ctrl: ctrl}
	mock.recorder = &MockControllerNodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerNodeService) EXPECT() *MockControllerNodeServiceMockRecorder {
	return m.recorder
}

// GetAllAPIAddressesForAgents mocks base method.
func (m *MockControllerNodeService) GetAllAPIAddressesForAgents(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAPIAddressesForAgents", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAPIAddressesForAgents indicates an expected call of GetAllAPIAddressesForAgents.
func (mr *MockControllerNodeServiceMockRecorder) GetAllAPIAddressesForAgents(arg0 any) *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAPIAddressesForAgents", reflect.TypeOf((*MockControllerNodeService)(nil).GetAllAPIAddressesForAgents), arg0)
	return &MockControllerNodeServiceGetAllAPIAddressesForAgentsCall{Call: call}
}

// MockControllerNodeServiceGetAllAPIAddressesForAgentsCall wrap *gomock.Call
type MockControllerNodeServiceGetAllAPIAddressesForAgentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall) Return(arg0 []string, arg1 error) *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall) Do(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockControllerNodeServiceGetAllAPIAddressesForAgentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
