// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/objectstoreflag (interfaces: ObjectStoreService)
//
// Generated by this command:
//
//	mockgen -typed -package objectstoredrainer -destination service_mock_test.go github.com/juju/juju/internal/worker/objectstoreflag ObjectStoreService
//

// Package objectstoredrainer is a generated GoMock package.
package objectstoredrainer

import (
	context "context"
	reflect "reflect"

	objectstore "github.com/juju/juju/core/objectstore"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockObjectStoreService is a mock of ObjectStoreService interface.
type MockObjectStoreService struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreServiceMockRecorder
}

// MockObjectStoreServiceMockRecorder is the mock recorder for MockObjectStoreService.
type MockObjectStoreServiceMockRecorder struct {
	mock *MockObjectStoreService
}

// NewMockObjectStoreService creates a new mock instance.
func NewMockObjectStoreService(ctrl *gomock.Controller) *MockObjectStoreService {
	mock := &MockObjectStoreService{ctrl: ctrl}
	mock.recorder = &MockObjectStoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStoreService) EXPECT() *MockObjectStoreServiceMockRecorder {
	return m.recorder
}

// GetDrainingPhase mocks base method.
func (m *MockObjectStoreService) GetDrainingPhase(arg0 context.Context) (objectstore.Phase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrainingPhase", arg0)
	ret0, _ := ret[0].(objectstore.Phase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrainingPhase indicates an expected call of GetDrainingPhase.
func (mr *MockObjectStoreServiceMockRecorder) GetDrainingPhase(arg0 any) *MockObjectStoreServiceGetDrainingPhaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrainingPhase", reflect.TypeOf((*MockObjectStoreService)(nil).GetDrainingPhase), arg0)
	return &MockObjectStoreServiceGetDrainingPhaseCall{Call: call}
}

// MockObjectStoreServiceGetDrainingPhaseCall wrap *gomock.Call
type MockObjectStoreServiceGetDrainingPhaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreServiceGetDrainingPhaseCall) Return(arg0 objectstore.Phase, arg1 error) *MockObjectStoreServiceGetDrainingPhaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreServiceGetDrainingPhaseCall) Do(f func(context.Context) (objectstore.Phase, error)) *MockObjectStoreServiceGetDrainingPhaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreServiceGetDrainingPhaseCall) DoAndReturn(f func(context.Context) (objectstore.Phase, error)) *MockObjectStoreServiceGetDrainingPhaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchDraining mocks base method.
func (m *MockObjectStoreService) WatchDraining(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchDraining", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchDraining indicates an expected call of WatchDraining.
func (mr *MockObjectStoreServiceMockRecorder) WatchDraining(arg0 any) *MockObjectStoreServiceWatchDrainingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchDraining", reflect.TypeOf((*MockObjectStoreService)(nil).WatchDraining), arg0)
	return &MockObjectStoreServiceWatchDrainingCall{Call: call}
}

// MockObjectStoreServiceWatchDrainingCall wrap *gomock.Call
type MockObjectStoreServiceWatchDrainingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreServiceWatchDrainingCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockObjectStoreServiceWatchDrainingCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreServiceWatchDrainingCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockObjectStoreServiceWatchDrainingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreServiceWatchDrainingCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockObjectStoreServiceWatchDrainingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
