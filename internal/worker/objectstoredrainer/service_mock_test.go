// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/objectstoredrainer (interfaces: ObjectStoreService,ObjectStoreServicesGetter,GuardService,ControllerService,ControllerConfigService,HashFileSystemAccessor)
//
// Generated by this command:
//
//	mockgen -typed -package objectstoredrainer -destination service_mock_test.go github.com/juju/juju/internal/worker/objectstoredrainer ObjectStoreService,ObjectStoreServicesGetter,GuardService,ControllerService,ControllerConfigService,HashFileSystemAccessor
//

// Package objectstoredrainer is a generated GoMock package.
package objectstoredrainer

import (
	context "context"
	io "io"
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	model "github.com/juju/juju/core/model"
	objectstore "github.com/juju/juju/core/objectstore"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockObjectStoreService is a mock of ObjectStoreService interface.
type MockObjectStoreService struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreServiceMockRecorder
}

// MockObjectStoreServiceMockRecorder is the mock recorder for MockObjectStoreService.
type MockObjectStoreServiceMockRecorder struct {
	mock *MockObjectStoreService
}

// NewMockObjectStoreService creates a new mock instance.
func NewMockObjectStoreService(ctrl *gomock.Controller) *MockObjectStoreService {
	mock := &MockObjectStoreService{ctrl: ctrl}
	mock.recorder = &MockObjectStoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStoreService) EXPECT() *MockObjectStoreServiceMockRecorder {
	return m.recorder
}

// ObjectStore mocks base method.
func (m *MockObjectStoreService) ObjectStore() objectstore.ObjectStoreMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStore")
	ret0, _ := ret[0].(objectstore.ObjectStoreMetadata)
	return ret0
}

// ObjectStore indicates an expected call of ObjectStore.
func (mr *MockObjectStoreServiceMockRecorder) ObjectStore() *MockObjectStoreServiceObjectStoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStore", reflect.TypeOf((*MockObjectStoreService)(nil).ObjectStore))
	return &MockObjectStoreServiceObjectStoreCall{Call: call}
}

// MockObjectStoreServiceObjectStoreCall wrap *gomock.Call
type MockObjectStoreServiceObjectStoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreServiceObjectStoreCall) Return(arg0 objectstore.ObjectStoreMetadata) *MockObjectStoreServiceObjectStoreCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreServiceObjectStoreCall) Do(f func() objectstore.ObjectStoreMetadata) *MockObjectStoreServiceObjectStoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreServiceObjectStoreCall) DoAndReturn(f func() objectstore.ObjectStoreMetadata) *MockObjectStoreServiceObjectStoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockObjectStoreServicesGetter is a mock of ObjectStoreServicesGetter interface.
type MockObjectStoreServicesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreServicesGetterMockRecorder
}

// MockObjectStoreServicesGetterMockRecorder is the mock recorder for MockObjectStoreServicesGetter.
type MockObjectStoreServicesGetterMockRecorder struct {
	mock *MockObjectStoreServicesGetter
}

// NewMockObjectStoreServicesGetter creates a new mock instance.
func NewMockObjectStoreServicesGetter(ctrl *gomock.Controller) *MockObjectStoreServicesGetter {
	mock := &MockObjectStoreServicesGetter{ctrl: ctrl}
	mock.recorder = &MockObjectStoreServicesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStoreServicesGetter) EXPECT() *MockObjectStoreServicesGetterMockRecorder {
	return m.recorder
}

// ServicesForModel mocks base method.
func (m *MockObjectStoreServicesGetter) ServicesForModel(arg0 model.UUID) ObjectStoreService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesForModel", arg0)
	ret0, _ := ret[0].(ObjectStoreService)
	return ret0
}

// ServicesForModel indicates an expected call of ServicesForModel.
func (mr *MockObjectStoreServicesGetterMockRecorder) ServicesForModel(arg0 any) *MockObjectStoreServicesGetterServicesForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesForModel", reflect.TypeOf((*MockObjectStoreServicesGetter)(nil).ServicesForModel), arg0)
	return &MockObjectStoreServicesGetterServicesForModelCall{Call: call}
}

// MockObjectStoreServicesGetterServicesForModelCall wrap *gomock.Call
type MockObjectStoreServicesGetterServicesForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreServicesGetterServicesForModelCall) Return(arg0 ObjectStoreService) *MockObjectStoreServicesGetterServicesForModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreServicesGetterServicesForModelCall) Do(f func(model.UUID) ObjectStoreService) *MockObjectStoreServicesGetterServicesForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreServicesGetterServicesForModelCall) DoAndReturn(f func(model.UUID) ObjectStoreService) *MockObjectStoreServicesGetterServicesForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockGuardService is a mock of GuardService interface.
type MockGuardService struct {
	ctrl     *gomock.Controller
	recorder *MockGuardServiceMockRecorder
}

// MockGuardServiceMockRecorder is the mock recorder for MockGuardService.
type MockGuardServiceMockRecorder struct {
	mock *MockGuardService
}

// NewMockGuardService creates a new mock instance.
func NewMockGuardService(ctrl *gomock.Controller) *MockGuardService {
	mock := &MockGuardService{ctrl: ctrl}
	mock.recorder = &MockGuardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuardService) EXPECT() *MockGuardServiceMockRecorder {
	return m.recorder
}

// GetDrainingPhase mocks base method.
func (m *MockGuardService) GetDrainingPhase(arg0 context.Context) (objectstore.Phase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrainingPhase", arg0)
	ret0, _ := ret[0].(objectstore.Phase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrainingPhase indicates an expected call of GetDrainingPhase.
func (mr *MockGuardServiceMockRecorder) GetDrainingPhase(arg0 any) *MockGuardServiceGetDrainingPhaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrainingPhase", reflect.TypeOf((*MockGuardService)(nil).GetDrainingPhase), arg0)
	return &MockGuardServiceGetDrainingPhaseCall{Call: call}
}

// MockGuardServiceGetDrainingPhaseCall wrap *gomock.Call
type MockGuardServiceGetDrainingPhaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGuardServiceGetDrainingPhaseCall) Return(arg0 objectstore.Phase, arg1 error) *MockGuardServiceGetDrainingPhaseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGuardServiceGetDrainingPhaseCall) Do(f func(context.Context) (objectstore.Phase, error)) *MockGuardServiceGetDrainingPhaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGuardServiceGetDrainingPhaseCall) DoAndReturn(f func(context.Context) (objectstore.Phase, error)) *MockGuardServiceGetDrainingPhaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetDrainingPhase mocks base method.
func (m *MockGuardService) SetDrainingPhase(arg0 context.Context, arg1 objectstore.Phase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDrainingPhase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDrainingPhase indicates an expected call of SetDrainingPhase.
func (mr *MockGuardServiceMockRecorder) SetDrainingPhase(arg0, arg1 any) *MockGuardServiceSetDrainingPhaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDrainingPhase", reflect.TypeOf((*MockGuardService)(nil).SetDrainingPhase), arg0, arg1)
	return &MockGuardServiceSetDrainingPhaseCall{Call: call}
}

// MockGuardServiceSetDrainingPhaseCall wrap *gomock.Call
type MockGuardServiceSetDrainingPhaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGuardServiceSetDrainingPhaseCall) Return(arg0 error) *MockGuardServiceSetDrainingPhaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGuardServiceSetDrainingPhaseCall) Do(f func(context.Context, objectstore.Phase) error) *MockGuardServiceSetDrainingPhaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGuardServiceSetDrainingPhaseCall) DoAndReturn(f func(context.Context, objectstore.Phase) error) *MockGuardServiceSetDrainingPhaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchDraining mocks base method.
func (m *MockGuardService) WatchDraining(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchDraining", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchDraining indicates an expected call of WatchDraining.
func (mr *MockGuardServiceMockRecorder) WatchDraining(arg0 any) *MockGuardServiceWatchDrainingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchDraining", reflect.TypeOf((*MockGuardService)(nil).WatchDraining), arg0)
	return &MockGuardServiceWatchDrainingCall{Call: call}
}

// MockGuardServiceWatchDrainingCall wrap *gomock.Call
type MockGuardServiceWatchDrainingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGuardServiceWatchDrainingCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockGuardServiceWatchDrainingCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGuardServiceWatchDrainingCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockGuardServiceWatchDrainingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGuardServiceWatchDrainingCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockGuardServiceWatchDrainingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerService is a mock of ControllerService interface.
type MockControllerService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerServiceMockRecorder
}

// MockControllerServiceMockRecorder is the mock recorder for MockControllerService.
type MockControllerServiceMockRecorder struct {
	mock *MockControllerService
}

// NewMockControllerService creates a new mock instance.
func NewMockControllerService(ctrl *gomock.Controller) *MockControllerService {
	mock := &MockControllerService{ctrl: ctrl}
	mock.recorder = &MockControllerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerService) EXPECT() *MockControllerServiceMockRecorder {
	return m.recorder
}

// GetModelNamespaces mocks base method.
func (m *MockControllerService) GetModelNamespaces(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelNamespaces", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelNamespaces indicates an expected call of GetModelNamespaces.
func (mr *MockControllerServiceMockRecorder) GetModelNamespaces(arg0 any) *MockControllerServiceGetModelNamespacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelNamespaces", reflect.TypeOf((*MockControllerService)(nil).GetModelNamespaces), arg0)
	return &MockControllerServiceGetModelNamespacesCall{Call: call}
}

// MockControllerServiceGetModelNamespacesCall wrap *gomock.Call
type MockControllerServiceGetModelNamespacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerServiceGetModelNamespacesCall) Return(arg0 []string, arg1 error) *MockControllerServiceGetModelNamespacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerServiceGetModelNamespacesCall) Do(f func(context.Context) ([]string, error)) *MockControllerServiceGetModelNamespacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerServiceGetModelNamespacesCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockControllerServiceGetModelNamespacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockHashFileSystemAccessor is a mock of HashFileSystemAccessor interface.
type MockHashFileSystemAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockHashFileSystemAccessorMockRecorder
}

// MockHashFileSystemAccessorMockRecorder is the mock recorder for MockHashFileSystemAccessor.
type MockHashFileSystemAccessorMockRecorder struct {
	mock *MockHashFileSystemAccessor
}

// NewMockHashFileSystemAccessor creates a new mock instance.
func NewMockHashFileSystemAccessor(ctrl *gomock.Controller) *MockHashFileSystemAccessor {
	mock := &MockHashFileSystemAccessor{ctrl: ctrl}
	mock.recorder = &MockHashFileSystemAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashFileSystemAccessor) EXPECT() *MockHashFileSystemAccessorMockRecorder {
	return m.recorder
}

// DeleteByHash mocks base method.
func (m *MockHashFileSystemAccessor) DeleteByHash(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByHash", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByHash indicates an expected call of DeleteByHash.
func (mr *MockHashFileSystemAccessorMockRecorder) DeleteByHash(arg0, arg1 any) *MockHashFileSystemAccessorDeleteByHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByHash", reflect.TypeOf((*MockHashFileSystemAccessor)(nil).DeleteByHash), arg0, arg1)
	return &MockHashFileSystemAccessorDeleteByHashCall{Call: call}
}

// MockHashFileSystemAccessorDeleteByHashCall wrap *gomock.Call
type MockHashFileSystemAccessorDeleteByHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHashFileSystemAccessorDeleteByHashCall) Return(arg0 error) *MockHashFileSystemAccessorDeleteByHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHashFileSystemAccessorDeleteByHashCall) Do(f func(context.Context, string) error) *MockHashFileSystemAccessorDeleteByHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHashFileSystemAccessorDeleteByHashCall) DoAndReturn(f func(context.Context, string) error) *MockHashFileSystemAccessorDeleteByHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByHash mocks base method.
func (m *MockHashFileSystemAccessor) GetByHash(arg0 context.Context, arg1 string) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHash", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByHash indicates an expected call of GetByHash.
func (mr *MockHashFileSystemAccessorMockRecorder) GetByHash(arg0, arg1 any) *MockHashFileSystemAccessorGetByHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHash", reflect.TypeOf((*MockHashFileSystemAccessor)(nil).GetByHash), arg0, arg1)
	return &MockHashFileSystemAccessorGetByHashCall{Call: call}
}

// MockHashFileSystemAccessorGetByHashCall wrap *gomock.Call
type MockHashFileSystemAccessorGetByHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHashFileSystemAccessorGetByHashCall) Return(arg0 io.ReadCloser, arg1 int64, arg2 error) *MockHashFileSystemAccessorGetByHashCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHashFileSystemAccessorGetByHashCall) Do(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockHashFileSystemAccessorGetByHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHashFileSystemAccessorGetByHashCall) DoAndReturn(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockHashFileSystemAccessorGetByHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HashExists mocks base method.
func (m *MockHashFileSystemAccessor) HashExists(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashExists", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HashExists indicates an expected call of HashExists.
func (mr *MockHashFileSystemAccessorMockRecorder) HashExists(arg0, arg1 any) *MockHashFileSystemAccessorHashExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashExists", reflect.TypeOf((*MockHashFileSystemAccessor)(nil).HashExists), arg0, arg1)
	return &MockHashFileSystemAccessorHashExistsCall{Call: call}
}

// MockHashFileSystemAccessorHashExistsCall wrap *gomock.Call
type MockHashFileSystemAccessorHashExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHashFileSystemAccessorHashExistsCall) Return(arg0 error) *MockHashFileSystemAccessorHashExistsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHashFileSystemAccessorHashExistsCall) Do(f func(context.Context, string) error) *MockHashFileSystemAccessorHashExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHashFileSystemAccessorHashExistsCall) DoAndReturn(f func(context.Context, string) error) *MockHashFileSystemAccessorHashExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
