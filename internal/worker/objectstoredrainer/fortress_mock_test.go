// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/fortress (interfaces: Guard)
//
// Generated by this command:
//
//	mockgen -typed -package objectstoredrainer -destination fortress_mock_test.go github.com/juju/juju/internal/worker/fortress Guard
//

// Package objectstoredrainer is a generated GoMock package.
package objectstoredrainer

import (
	reflect "reflect"

	fortress "github.com/juju/juju/internal/worker/fortress"
	gomock "go.uber.org/mock/gomock"
)

// MockGuard is a mock of Guard interface.
type MockGuard struct {
	ctrl     *gomock.Controller
	recorder *MockGuardMockRecorder
}

// MockGuardMockRecorder is the mock recorder for MockGuard.
type MockGuardMockRecorder struct {
	mock *MockGuard
}

// NewMockGuard creates a new mock instance.
func NewMockGuard(ctrl *gomock.Controller) *MockGuard {
	mock := &MockGuard{ctrl: ctrl}
	mock.recorder = &MockGuardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuard) EXPECT() *MockGuardMockRecorder {
	return m.recorder
}

// Lockdown mocks base method.
func (m *MockGuard) Lockdown(arg0 fortress.Abort) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lockdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lockdown indicates an expected call of Lockdown.
func (mr *MockGuardMockRecorder) Lockdown(arg0 any) *MockGuardLockdownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lockdown", reflect.TypeOf((*MockGuard)(nil).Lockdown), arg0)
	return &MockGuardLockdownCall{Call: call}
}

// MockGuardLockdownCall wrap *gomock.Call
type MockGuardLockdownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGuardLockdownCall) Return(arg0 error) *MockGuardLockdownCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGuardLockdownCall) Do(f func(fortress.Abort) error) *MockGuardLockdownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGuardLockdownCall) DoAndReturn(f func(fortress.Abort) error) *MockGuardLockdownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unlock mocks base method.
func (m *MockGuard) Unlock() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock.
func (mr *MockGuardMockRecorder) Unlock() *MockGuardUnlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockGuard)(nil).Unlock))
	return &MockGuardUnlockCall{Call: call}
}

// MockGuardUnlockCall wrap *gomock.Call
type MockGuardUnlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGuardUnlockCall) Return(arg0 error) *MockGuardUnlockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGuardUnlockCall) Do(f func() error) *MockGuardUnlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGuardUnlockCall) DoAndReturn(f func() error) *MockGuardUnlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
