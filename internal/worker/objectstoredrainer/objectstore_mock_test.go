// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/objectstore (interfaces: Client,ObjectStoreMetadata)
//
// Generated by this command:
//
//	mockgen -typed -package objectstoredrainer -destination objectstore_mock_test.go github.com/juju/juju/core/objectstore Client,ObjectStoreMetadata
//

// Package objectstoredrainer is a generated GoMock package.
package objectstoredrainer

import (
	context "context"
	reflect "reflect"

	objectstore "github.com/juju/juju/core/objectstore"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Session mocks base method.
func (m *MockClient) Session(arg0 context.Context, arg1 func(context.Context, objectstore.Session) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockClientMockRecorder) Session(arg0, arg1 any) *MockClientSessionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockClient)(nil).Session), arg0, arg1)
	return &MockClientSessionCall{Call: call}
}

// MockClientSessionCall wrap *gomock.Call
type MockClientSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientSessionCall) Return(arg0 error) *MockClientSessionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientSessionCall) Do(f func(context.Context, func(context.Context, objectstore.Session) error) error) *MockClientSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientSessionCall) DoAndReturn(f func(context.Context, func(context.Context, objectstore.Session) error) error) *MockClientSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockObjectStoreMetadata is a mock of ObjectStoreMetadata interface.
type MockObjectStoreMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreMetadataMockRecorder
}

// MockObjectStoreMetadataMockRecorder is the mock recorder for MockObjectStoreMetadata.
type MockObjectStoreMetadataMockRecorder struct {
	mock *MockObjectStoreMetadata
}

// NewMockObjectStoreMetadata creates a new mock instance.
func NewMockObjectStoreMetadata(ctrl *gomock.Controller) *MockObjectStoreMetadata {
	mock := &MockObjectStoreMetadata{ctrl: ctrl}
	mock.recorder = &MockObjectStoreMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStoreMetadata) EXPECT() *MockObjectStoreMetadataMockRecorder {
	return m.recorder
}

// GetMetadata mocks base method.
func (m *MockObjectStoreMetadata) GetMetadata(arg0 context.Context, arg1 string) (objectstore.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", arg0, arg1)
	ret0, _ := ret[0].(objectstore.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockObjectStoreMetadataMockRecorder) GetMetadata(arg0, arg1 any) *MockObjectStoreMetadataGetMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockObjectStoreMetadata)(nil).GetMetadata), arg0, arg1)
	return &MockObjectStoreMetadataGetMetadataCall{Call: call}
}

// MockObjectStoreMetadataGetMetadataCall wrap *gomock.Call
type MockObjectStoreMetadataGetMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreMetadataGetMetadataCall) Return(arg0 objectstore.Metadata, arg1 error) *MockObjectStoreMetadataGetMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreMetadataGetMetadataCall) Do(f func(context.Context, string) (objectstore.Metadata, error)) *MockObjectStoreMetadataGetMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreMetadataGetMetadataCall) DoAndReturn(f func(context.Context, string) (objectstore.Metadata, error)) *MockObjectStoreMetadataGetMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMetadataBySHA256 mocks base method.
func (m *MockObjectStoreMetadata) GetMetadataBySHA256(arg0 context.Context, arg1 string) (objectstore.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadataBySHA256", arg0, arg1)
	ret0, _ := ret[0].(objectstore.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadataBySHA256 indicates an expected call of GetMetadataBySHA256.
func (mr *MockObjectStoreMetadataMockRecorder) GetMetadataBySHA256(arg0, arg1 any) *MockObjectStoreMetadataGetMetadataBySHA256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataBySHA256", reflect.TypeOf((*MockObjectStoreMetadata)(nil).GetMetadataBySHA256), arg0, arg1)
	return &MockObjectStoreMetadataGetMetadataBySHA256Call{Call: call}
}

// MockObjectStoreMetadataGetMetadataBySHA256Call wrap *gomock.Call
type MockObjectStoreMetadataGetMetadataBySHA256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreMetadataGetMetadataBySHA256Call) Return(arg0 objectstore.Metadata, arg1 error) *MockObjectStoreMetadataGetMetadataBySHA256Call {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreMetadataGetMetadataBySHA256Call) Do(f func(context.Context, string) (objectstore.Metadata, error)) *MockObjectStoreMetadataGetMetadataBySHA256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreMetadataGetMetadataBySHA256Call) DoAndReturn(f func(context.Context, string) (objectstore.Metadata, error)) *MockObjectStoreMetadataGetMetadataBySHA256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMetadataBySHA256Prefix mocks base method.
func (m *MockObjectStoreMetadata) GetMetadataBySHA256Prefix(arg0 context.Context, arg1 string) (objectstore.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadataBySHA256Prefix", arg0, arg1)
	ret0, _ := ret[0].(objectstore.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadataBySHA256Prefix indicates an expected call of GetMetadataBySHA256Prefix.
func (mr *MockObjectStoreMetadataMockRecorder) GetMetadataBySHA256Prefix(arg0, arg1 any) *MockObjectStoreMetadataGetMetadataBySHA256PrefixCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataBySHA256Prefix", reflect.TypeOf((*MockObjectStoreMetadata)(nil).GetMetadataBySHA256Prefix), arg0, arg1)
	return &MockObjectStoreMetadataGetMetadataBySHA256PrefixCall{Call: call}
}

// MockObjectStoreMetadataGetMetadataBySHA256PrefixCall wrap *gomock.Call
type MockObjectStoreMetadataGetMetadataBySHA256PrefixCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreMetadataGetMetadataBySHA256PrefixCall) Return(arg0 objectstore.Metadata, arg1 error) *MockObjectStoreMetadataGetMetadataBySHA256PrefixCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreMetadataGetMetadataBySHA256PrefixCall) Do(f func(context.Context, string) (objectstore.Metadata, error)) *MockObjectStoreMetadataGetMetadataBySHA256PrefixCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreMetadataGetMetadataBySHA256PrefixCall) DoAndReturn(f func(context.Context, string) (objectstore.Metadata, error)) *MockObjectStoreMetadataGetMetadataBySHA256PrefixCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListMetadata mocks base method.
func (m *MockObjectStoreMetadata) ListMetadata(arg0 context.Context) ([]objectstore.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetadata", arg0)
	ret0, _ := ret[0].([]objectstore.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetadata indicates an expected call of ListMetadata.
func (mr *MockObjectStoreMetadataMockRecorder) ListMetadata(arg0 any) *MockObjectStoreMetadataListMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetadata", reflect.TypeOf((*MockObjectStoreMetadata)(nil).ListMetadata), arg0)
	return &MockObjectStoreMetadataListMetadataCall{Call: call}
}

// MockObjectStoreMetadataListMetadataCall wrap *gomock.Call
type MockObjectStoreMetadataListMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreMetadataListMetadataCall) Return(arg0 []objectstore.Metadata, arg1 error) *MockObjectStoreMetadataListMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreMetadataListMetadataCall) Do(f func(context.Context) ([]objectstore.Metadata, error)) *MockObjectStoreMetadataListMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreMetadataListMetadataCall) DoAndReturn(f func(context.Context) ([]objectstore.Metadata, error)) *MockObjectStoreMetadataListMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutMetadata mocks base method.
func (m *MockObjectStoreMetadata) PutMetadata(arg0 context.Context, arg1 objectstore.Metadata) (objectstore.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMetadata", arg0, arg1)
	ret0, _ := ret[0].(objectstore.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMetadata indicates an expected call of PutMetadata.
func (mr *MockObjectStoreMetadataMockRecorder) PutMetadata(arg0, arg1 any) *MockObjectStoreMetadataPutMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetadata", reflect.TypeOf((*MockObjectStoreMetadata)(nil).PutMetadata), arg0, arg1)
	return &MockObjectStoreMetadataPutMetadataCall{Call: call}
}

// MockObjectStoreMetadataPutMetadataCall wrap *gomock.Call
type MockObjectStoreMetadataPutMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreMetadataPutMetadataCall) Return(arg0 objectstore.UUID, arg1 error) *MockObjectStoreMetadataPutMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreMetadataPutMetadataCall) Do(f func(context.Context, objectstore.Metadata) (objectstore.UUID, error)) *MockObjectStoreMetadataPutMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreMetadataPutMetadataCall) DoAndReturn(f func(context.Context, objectstore.Metadata) (objectstore.UUID, error)) *MockObjectStoreMetadataPutMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveMetadata mocks base method.
func (m *MockObjectStoreMetadata) RemoveMetadata(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMetadata indicates an expected call of RemoveMetadata.
func (mr *MockObjectStoreMetadataMockRecorder) RemoveMetadata(arg0, arg1 any) *MockObjectStoreMetadataRemoveMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMetadata", reflect.TypeOf((*MockObjectStoreMetadata)(nil).RemoveMetadata), arg0, arg1)
	return &MockObjectStoreMetadataRemoveMetadataCall{Call: call}
}

// MockObjectStoreMetadataRemoveMetadataCall wrap *gomock.Call
type MockObjectStoreMetadataRemoveMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreMetadataRemoveMetadataCall) Return(arg0 error) *MockObjectStoreMetadataRemoveMetadataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreMetadataRemoveMetadataCall) Do(f func(context.Context, string) error) *MockObjectStoreMetadataRemoveMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreMetadataRemoveMetadataCall) DoAndReturn(f func(context.Context, string) error) *MockObjectStoreMetadataRemoveMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockObjectStoreMetadata) Watch() (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch")
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockObjectStoreMetadataMockRecorder) Watch() *MockObjectStoreMetadataWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockObjectStoreMetadata)(nil).Watch))
	return &MockObjectStoreMetadataWatchCall{Call: call}
}

// MockObjectStoreMetadataWatchCall wrap *gomock.Call
type MockObjectStoreMetadataWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreMetadataWatchCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockObjectStoreMetadataWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreMetadataWatchCall) Do(f func() (watcher.Watcher[[]string], error)) *MockObjectStoreMetadataWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreMetadataWatchCall) DoAndReturn(f func() (watcher.Watcher[[]string], error)) *MockObjectStoreMetadataWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
