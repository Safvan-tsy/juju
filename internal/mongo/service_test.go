// Copyright 2015 Canonical Ltd.
// Licensed under the AGPLv3, see LICENCE file for details.

package mongo_test

import (
	"fmt"
	"os"
	"path/filepath"
	"testing"
	"time"

	"github.com/juju/clock/testclock"
	"github.com/juju/tc"

	"github.com/juju/juju/internal/mongo"
	coretesting "github.com/juju/juju/internal/testing"
)

type serviceSuite struct {
	coretesting.BaseSuite
}

func TestServiceSuite(t *testing.T) {
	tc.Run(t, &serviceSuite{})
}

func (s *serviceSuite) TestNewConfSnap(c *tc.C) {
	dataDir := "/var/lib/juju"
	dbDir := dataDir + "/db"
	logPath := dataDir + "/logs/mongodb.log"
	confArgs := mongo.ConfigArgs{
		Clock:          testclock.NewClock(time.Now()),
		DataDir:        dataDir,
		DBDir:          dbDir,
		Port:           12345,
		OplogSizeMB:    10,
		IPv6:           true,
		LogPath:        logPath,
		ReplicaSet:     "juju",
		PEMKeyFile:     "/var/lib/juju/server.pem",
		PEMKeyPassword: "ignored",
		AuthKeyFile:    "/var/lib/juju/shared-secret",
		Syslog:         true,
		Quiet:          true,
		TLSMode:        "requireTLS",
		BindToAllIP:    true,
	}
	confFile := filepath.Join(c.MkDir(), "conf")
	err := mongo.WriteConfig(confArgs, confFile)
	c.Assert(err, tc.ErrorIsNil)

	contents, err := os.ReadFile(confFile)
	c.Assert(err, tc.ErrorIsNil)
	expected := fmt.Sprintf(`
# WARNING
# autogenerated by juju on %s
# manual changes to this file are likely to be overwritten
auth = true
bind_ip_all = true
dbpath = %s/db
ipv6 = true
journal = true
keyFile = %s/shared-secret
logpath = %s/logs/mongodb.log
oplogSize = 10
port = 12345
quiet = true
replSet = juju
storageEngine = wiredTiger
syslog = true
tlsCertificateKeyFile = %s/server.pem
tlsCertificateKeyFilePassword=ignored
tlsMode = requireTLS`[1:], confArgs.Clock.Now().UTC().Format(time.RFC822), dataDir, dataDir, dataDir, dataDir)

	c.Assert(string(contents), tc.DeepEquals, expected)

}
