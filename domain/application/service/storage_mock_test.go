// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/application/service (interfaces: StorageProviderState,StorageProviderValidator)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination storage_mock_test.go github.com/juju/juju/domain/application/service StorageProviderState,StorageProviderValidator
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	storage "github.com/juju/juju/domain/storage"
	charm "github.com/juju/juju/internal/charm"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageProviderState is a mock of StorageProviderState interface.
type MockStorageProviderState struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProviderStateMockRecorder
}

// MockStorageProviderStateMockRecorder is the mock recorder for MockStorageProviderState.
type MockStorageProviderStateMockRecorder struct {
	mock *MockStorageProviderState
}

// NewMockStorageProviderState creates a new mock instance.
func NewMockStorageProviderState(ctrl *gomock.Controller) *MockStorageProviderState {
	mock := &MockStorageProviderState{ctrl: ctrl}
	mock.recorder = &MockStorageProviderStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageProviderState) EXPECT() *MockStorageProviderStateMockRecorder {
	return m.recorder
}

// GetProviderTypeOfPool mocks base method.
func (m *MockStorageProviderState) GetProviderTypeOfPool(arg0 context.Context, arg1 storage.StoragePoolUUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderTypeOfPool", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderTypeOfPool indicates an expected call of GetProviderTypeOfPool.
func (mr *MockStorageProviderStateMockRecorder) GetProviderTypeOfPool(arg0, arg1 any) *MockStorageProviderStateGetProviderTypeOfPoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderTypeOfPool", reflect.TypeOf((*MockStorageProviderState)(nil).GetProviderTypeOfPool), arg0, arg1)
	return &MockStorageProviderStateGetProviderTypeOfPoolCall{Call: call}
}

// MockStorageProviderStateGetProviderTypeOfPoolCall wrap *gomock.Call
type MockStorageProviderStateGetProviderTypeOfPoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProviderStateGetProviderTypeOfPoolCall) Return(arg0 string, arg1 error) *MockStorageProviderStateGetProviderTypeOfPoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProviderStateGetProviderTypeOfPoolCall) Do(f func(context.Context, storage.StoragePoolUUID) (string, error)) *MockStorageProviderStateGetProviderTypeOfPoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProviderStateGetProviderTypeOfPoolCall) DoAndReturn(f func(context.Context, storage.StoragePoolUUID) (string, error)) *MockStorageProviderStateGetProviderTypeOfPoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStorageProviderValidator is a mock of StorageProviderValidator interface.
type MockStorageProviderValidator struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProviderValidatorMockRecorder
}

// MockStorageProviderValidatorMockRecorder is the mock recorder for MockStorageProviderValidator.
type MockStorageProviderValidatorMockRecorder struct {
	mock *MockStorageProviderValidator
}

// NewMockStorageProviderValidator creates a new mock instance.
func NewMockStorageProviderValidator(ctrl *gomock.Controller) *MockStorageProviderValidator {
	mock := &MockStorageProviderValidator{ctrl: ctrl}
	mock.recorder = &MockStorageProviderValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageProviderValidator) EXPECT() *MockStorageProviderValidatorMockRecorder {
	return m.recorder
}

// CheckPoolSupportsCharmStorage mocks base method.
func (m *MockStorageProviderValidator) CheckPoolSupportsCharmStorage(arg0 context.Context, arg1 storage.StoragePoolUUID, arg2 charm.StorageType) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPoolSupportsCharmStorage", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPoolSupportsCharmStorage indicates an expected call of CheckPoolSupportsCharmStorage.
func (mr *MockStorageProviderValidatorMockRecorder) CheckPoolSupportsCharmStorage(arg0, arg1, arg2 any) *MockStorageProviderValidatorCheckPoolSupportsCharmStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPoolSupportsCharmStorage", reflect.TypeOf((*MockStorageProviderValidator)(nil).CheckPoolSupportsCharmStorage), arg0, arg1, arg2)
	return &MockStorageProviderValidatorCheckPoolSupportsCharmStorageCall{Call: call}
}

// MockStorageProviderValidatorCheckPoolSupportsCharmStorageCall wrap *gomock.Call
type MockStorageProviderValidatorCheckPoolSupportsCharmStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProviderValidatorCheckPoolSupportsCharmStorageCall) Return(arg0 bool, arg1 error) *MockStorageProviderValidatorCheckPoolSupportsCharmStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProviderValidatorCheckPoolSupportsCharmStorageCall) Do(f func(context.Context, storage.StoragePoolUUID, charm.StorageType) (bool, error)) *MockStorageProviderValidatorCheckPoolSupportsCharmStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProviderValidatorCheckPoolSupportsCharmStorageCall) DoAndReturn(f func(context.Context, storage.StoragePoolUUID, charm.StorageType) (bool, error)) *MockStorageProviderValidatorCheckPoolSupportsCharmStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
