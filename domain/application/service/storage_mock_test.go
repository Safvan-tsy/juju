// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/application/service (interfaces: StorageProviderState,StoragePoolProvider)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination storage_mock_test.go github.com/juju/juju/domain/application/service StorageProviderState,StoragePoolProvider
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	storage "github.com/juju/juju/domain/storage"
	charm "github.com/juju/juju/internal/charm"
	storage0 "github.com/juju/juju/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageProviderState is a mock of StorageProviderState interface.
type MockStorageProviderState struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProviderStateMockRecorder
}

// MockStorageProviderStateMockRecorder is the mock recorder for MockStorageProviderState.
type MockStorageProviderStateMockRecorder struct {
	mock *MockStorageProviderState
}

// NewMockStorageProviderState creates a new mock instance.
func NewMockStorageProviderState(ctrl *gomock.Controller) *MockStorageProviderState {
	mock := &MockStorageProviderState{ctrl: ctrl}
	mock.recorder = &MockStorageProviderStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageProviderState) EXPECT() *MockStorageProviderStateMockRecorder {
	return m.recorder
}

// GetProviderTypeForPool mocks base method.
func (m *MockStorageProviderState) GetProviderTypeForPool(arg0 context.Context, arg1 storage.StoragePoolUUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderTypeForPool", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderTypeForPool indicates an expected call of GetProviderTypeForPool.
func (mr *MockStorageProviderStateMockRecorder) GetProviderTypeForPool(arg0, arg1 any) *MockStorageProviderStateGetProviderTypeForPoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderTypeForPool", reflect.TypeOf((*MockStorageProviderState)(nil).GetProviderTypeForPool), arg0, arg1)
	return &MockStorageProviderStateGetProviderTypeForPoolCall{Call: call}
}

// MockStorageProviderStateGetProviderTypeForPoolCall wrap *gomock.Call
type MockStorageProviderStateGetProviderTypeForPoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProviderStateGetProviderTypeForPoolCall) Return(arg0 string, arg1 error) *MockStorageProviderStateGetProviderTypeForPoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProviderStateGetProviderTypeForPoolCall) Do(f func(context.Context, storage.StoragePoolUUID) (string, error)) *MockStorageProviderStateGetProviderTypeForPoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProviderStateGetProviderTypeForPoolCall) DoAndReturn(f func(context.Context, storage.StoragePoolUUID) (string, error)) *MockStorageProviderStateGetProviderTypeForPoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStoragePoolProvider is a mock of StoragePoolProvider interface.
type MockStoragePoolProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStoragePoolProviderMockRecorder
}

// MockStoragePoolProviderMockRecorder is the mock recorder for MockStoragePoolProvider.
type MockStoragePoolProviderMockRecorder struct {
	mock *MockStoragePoolProvider
}

// NewMockStoragePoolProvider creates a new mock instance.
func NewMockStoragePoolProvider(ctrl *gomock.Controller) *MockStoragePoolProvider {
	mock := &MockStoragePoolProvider{ctrl: ctrl}
	mock.recorder = &MockStoragePoolProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoragePoolProvider) EXPECT() *MockStoragePoolProviderMockRecorder {
	return m.recorder
}

// CheckPoolSupportsCharmStorage mocks base method.
func (m *MockStoragePoolProvider) CheckPoolSupportsCharmStorage(arg0 context.Context, arg1 storage.StoragePoolUUID, arg2 charm.StorageType) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPoolSupportsCharmStorage", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPoolSupportsCharmStorage indicates an expected call of CheckPoolSupportsCharmStorage.
func (mr *MockStoragePoolProviderMockRecorder) CheckPoolSupportsCharmStorage(arg0, arg1, arg2 any) *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPoolSupportsCharmStorage", reflect.TypeOf((*MockStoragePoolProvider)(nil).CheckPoolSupportsCharmStorage), arg0, arg1, arg2)
	return &MockStoragePoolProviderCheckPoolSupportsCharmStorageCall{Call: call}
}

// MockStoragePoolProviderCheckPoolSupportsCharmStorageCall wrap *gomock.Call
type MockStoragePoolProviderCheckPoolSupportsCharmStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall) Return(arg0 bool, arg1 error) *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall) Do(f func(context.Context, storage.StoragePoolUUID, charm.StorageType) (bool, error)) *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall) DoAndReturn(f func(context.Context, storage.StoragePoolUUID, charm.StorageType) (bool, error)) *MockStoragePoolProviderCheckPoolSupportsCharmStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProviderForPool mocks base method.
func (m *MockStoragePoolProvider) GetProviderForPool(arg0 context.Context, arg1 storage.StoragePoolUUID) (storage0.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderForPool", arg0, arg1)
	ret0, _ := ret[0].(storage0.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderForPool indicates an expected call of GetProviderForPool.
func (mr *MockStoragePoolProviderMockRecorder) GetProviderForPool(arg0, arg1 any) *MockStoragePoolProviderGetProviderForPoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderForPool", reflect.TypeOf((*MockStoragePoolProvider)(nil).GetProviderForPool), arg0, arg1)
	return &MockStoragePoolProviderGetProviderForPoolCall{Call: call}
}

// MockStoragePoolProviderGetProviderForPoolCall wrap *gomock.Call
type MockStoragePoolProviderGetProviderForPoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoragePoolProviderGetProviderForPoolCall) Return(arg0 storage0.Provider, arg1 error) *MockStoragePoolProviderGetProviderForPoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoragePoolProviderGetProviderForPoolCall) Do(f func(context.Context, storage.StoragePoolUUID) (storage0.Provider, error)) *MockStoragePoolProviderGetProviderForPoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoragePoolProviderGetProviderForPoolCall) DoAndReturn(f func(context.Context, storage.StoragePoolUUID) (storage0.Provider, error)) *MockStoragePoolProviderGetProviderForPoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
