// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/application/service (interfaces: StorageProviderRegistry,StorageProviderState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination storage_mock_test.go github.com/juju/juju/domain/application/service StorageProviderRegistry,StorageProviderState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	storage "github.com/juju/juju/domain/storage"
	storage0 "github.com/juju/juju/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageProviderRegistry is a mock of StorageProviderRegistry interface.
type MockStorageProviderRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProviderRegistryMockRecorder
}

// MockStorageProviderRegistryMockRecorder is the mock recorder for MockStorageProviderRegistry.
type MockStorageProviderRegistryMockRecorder struct {
	mock *MockStorageProviderRegistry
}

// NewMockStorageProviderRegistry creates a new mock instance.
func NewMockStorageProviderRegistry(ctrl *gomock.Controller) *MockStorageProviderRegistry {
	mock := &MockStorageProviderRegistry{ctrl: ctrl}
	mock.recorder = &MockStorageProviderRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageProviderRegistry) EXPECT() *MockStorageProviderRegistryMockRecorder {
	return m.recorder
}

// StorageProvider mocks base method.
func (m *MockStorageProviderRegistry) StorageProvider(arg0 storage0.ProviderType) (storage0.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageProvider", arg0)
	ret0, _ := ret[0].(storage0.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageProvider indicates an expected call of StorageProvider.
func (mr *MockStorageProviderRegistryMockRecorder) StorageProvider(arg0 any) *MockStorageProviderRegistryStorageProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageProvider", reflect.TypeOf((*MockStorageProviderRegistry)(nil).StorageProvider), arg0)
	return &MockStorageProviderRegistryStorageProviderCall{Call: call}
}

// MockStorageProviderRegistryStorageProviderCall wrap *gomock.Call
type MockStorageProviderRegistryStorageProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProviderRegistryStorageProviderCall) Return(arg0 storage0.Provider, arg1 error) *MockStorageProviderRegistryStorageProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProviderRegistryStorageProviderCall) Do(f func(storage0.ProviderType) (storage0.Provider, error)) *MockStorageProviderRegistryStorageProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProviderRegistryStorageProviderCall) DoAndReturn(f func(storage0.ProviderType) (storage0.Provider, error)) *MockStorageProviderRegistryStorageProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStorageProviderState is a mock of StorageProviderState interface.
type MockStorageProviderState struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProviderStateMockRecorder
}

// MockStorageProviderStateMockRecorder is the mock recorder for MockStorageProviderState.
type MockStorageProviderStateMockRecorder struct {
	mock *MockStorageProviderState
}

// NewMockStorageProviderState creates a new mock instance.
func NewMockStorageProviderState(ctrl *gomock.Controller) *MockStorageProviderState {
	mock := &MockStorageProviderState{ctrl: ctrl}
	mock.recorder = &MockStorageProviderStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageProviderState) EXPECT() *MockStorageProviderStateMockRecorder {
	return m.recorder
}

// GetProviderTypeOfPool mocks base method.
func (m *MockStorageProviderState) GetProviderTypeOfPool(arg0 context.Context, arg1 storage.StoragePoolUUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderTypeOfPool", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderTypeOfPool indicates an expected call of GetProviderTypeOfPool.
func (mr *MockStorageProviderStateMockRecorder) GetProviderTypeOfPool(arg0, arg1 any) *MockStorageProviderStateGetProviderTypeOfPoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderTypeOfPool", reflect.TypeOf((*MockStorageProviderState)(nil).GetProviderTypeOfPool), arg0, arg1)
	return &MockStorageProviderStateGetProviderTypeOfPoolCall{Call: call}
}

// MockStorageProviderStateGetProviderTypeOfPoolCall wrap *gomock.Call
type MockStorageProviderStateGetProviderTypeOfPoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProviderStateGetProviderTypeOfPoolCall) Return(arg0 string, arg1 error) *MockStorageProviderStateGetProviderTypeOfPoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProviderStateGetProviderTypeOfPoolCall) Do(f func(context.Context, storage.StoragePoolUUID) (string, error)) *MockStorageProviderStateGetProviderTypeOfPoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProviderStateGetProviderTypeOfPoolCall) DoAndReturn(f func(context.Context, storage.StoragePoolUUID) (string, error)) *MockStorageProviderStateGetProviderTypeOfPoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
