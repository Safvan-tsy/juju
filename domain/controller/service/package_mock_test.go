// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/controller/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/controller/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	model "github.com/juju/juju/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// GetControllerModelUUID mocks base method.
func (m *MockState) GetControllerModelUUID(arg0 context.Context) (model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerModelUUID", arg0)
	ret0, _ := ret[0].(model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerModelUUID indicates an expected call of GetControllerModelUUID.
func (mr *MockStateMockRecorder) GetControllerModelUUID(arg0 any) *MockStateGetControllerModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerModelUUID", reflect.TypeOf((*MockState)(nil).GetControllerModelUUID), arg0)
	return &MockStateGetControllerModelUUIDCall{Call: call}
}

// MockStateGetControllerModelUUIDCall wrap *gomock.Call
type MockStateGetControllerModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetControllerModelUUIDCall) Return(arg0 model.UUID, arg1 error) *MockStateGetControllerModelUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetControllerModelUUIDCall) Do(f func(context.Context) (model.UUID, error)) *MockStateGetControllerModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetControllerModelUUIDCall) DoAndReturn(f func(context.Context) (model.UUID, error)) *MockStateGetControllerModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStateServingInfo mocks base method.
func (m *MockState) GetStateServingInfo(arg0 context.Context) (controller.StateServingInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateServingInfo", arg0)
	ret0, _ := ret[0].(controller.StateServingInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateServingInfo indicates an expected call of GetStateServingInfo.
func (mr *MockStateMockRecorder) GetStateServingInfo(arg0 any) *MockStateGetStateServingInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateServingInfo", reflect.TypeOf((*MockState)(nil).GetStateServingInfo), arg0)
	return &MockStateGetStateServingInfoCall{Call: call}
}

// MockStateGetStateServingInfoCall wrap *gomock.Call
type MockStateGetStateServingInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetStateServingInfoCall) Return(arg0 controller.StateServingInfo, arg1 error) *MockStateGetStateServingInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetStateServingInfoCall) Do(f func(context.Context) (controller.StateServingInfo, error)) *MockStateGetStateServingInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetStateServingInfoCall) DoAndReturn(f func(context.Context) (controller.StateServingInfo, error)) *MockStateGetStateServingInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
