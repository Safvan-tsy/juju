// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go -source=./service.go
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	time "time"

	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	operation "github.com/juju/juju/domain/operation"
	internal "github.com/juju/juju/domain/operation/internal"
	uuid "github.com/juju/juju/internal/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// CancelTask mocks base method.
func (m *MockState) CancelTask(ctx context.Context, taskID string) (operation.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTask", ctx, taskID)
	ret0, _ := ret[0].(operation.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTask indicates an expected call of CancelTask.
func (mr *MockStateMockRecorder) CancelTask(ctx, taskID any) *MockStateCancelTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTask", reflect.TypeOf((*MockState)(nil).CancelTask), ctx, taskID)
	return &MockStateCancelTaskCall{Call: call}
}

// MockStateCancelTaskCall wrap *gomock.Call
type MockStateCancelTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCancelTaskCall) Return(arg0 operation.Task, arg1 error) *MockStateCancelTaskCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCancelTaskCall) Do(f func(context.Context, string) (operation.Task, error)) *MockStateCancelTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCancelTaskCall) DoAndReturn(f func(context.Context, string) (operation.Task, error)) *MockStateCancelTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIDsForAbortingTaskOfReceiver mocks base method.
func (m *MockState) GetIDsForAbortingTaskOfReceiver(ctx context.Context, receiverUUID uuid.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDsForAbortingTaskOfReceiver", ctx, receiverUUID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDsForAbortingTaskOfReceiver indicates an expected call of GetIDsForAbortingTaskOfReceiver.
func (mr *MockStateMockRecorder) GetIDsForAbortingTaskOfReceiver(ctx, receiverUUID any) *MockStateGetIDsForAbortingTaskOfReceiverCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDsForAbortingTaskOfReceiver", reflect.TypeOf((*MockState)(nil).GetIDsForAbortingTaskOfReceiver), ctx, receiverUUID)
	return &MockStateGetIDsForAbortingTaskOfReceiverCall{Call: call}
}

// MockStateGetIDsForAbortingTaskOfReceiverCall wrap *gomock.Call
type MockStateGetIDsForAbortingTaskOfReceiverCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetIDsForAbortingTaskOfReceiverCall) Return(arg0 []string, arg1 error) *MockStateGetIDsForAbortingTaskOfReceiverCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetIDsForAbortingTaskOfReceiverCall) Do(f func(context.Context, uuid.UUID) ([]string, error)) *MockStateGetIDsForAbortingTaskOfReceiverCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetIDsForAbortingTaskOfReceiverCall) DoAndReturn(f func(context.Context, uuid.UUID) ([]string, error)) *MockStateGetIDsForAbortingTaskOfReceiverCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPaginatedTaskLogsByUUID mocks base method.
func (m *MockState) GetPaginatedTaskLogsByUUID(ctx context.Context, taskUUID string, page int) ([]internal.TaskLogMessage, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginatedTaskLogsByUUID", ctx, taskUUID, page)
	ret0, _ := ret[0].([]internal.TaskLogMessage)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPaginatedTaskLogsByUUID indicates an expected call of GetPaginatedTaskLogsByUUID.
func (mr *MockStateMockRecorder) GetPaginatedTaskLogsByUUID(ctx, taskUUID, page any) *MockStateGetPaginatedTaskLogsByUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginatedTaskLogsByUUID", reflect.TypeOf((*MockState)(nil).GetPaginatedTaskLogsByUUID), ctx, taskUUID, page)
	return &MockStateGetPaginatedTaskLogsByUUIDCall{Call: call}
}

// MockStateGetPaginatedTaskLogsByUUIDCall wrap *gomock.Call
type MockStateGetPaginatedTaskLogsByUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetPaginatedTaskLogsByUUIDCall) Return(arg0 []internal.TaskLogMessage, arg1 int, arg2 error) *MockStateGetPaginatedTaskLogsByUUIDCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetPaginatedTaskLogsByUUIDCall) Do(f func(context.Context, string, int) ([]internal.TaskLogMessage, int, error)) *MockStateGetPaginatedTaskLogsByUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetPaginatedTaskLogsByUUIDCall) DoAndReturn(f func(context.Context, string, int) ([]internal.TaskLogMessage, int, error)) *MockStateGetPaginatedTaskLogsByUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTask mocks base method.
func (m *MockState) GetTask(ctx context.Context, taskID string) (operation.Task, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, taskID)
	ret0, _ := ret[0].(operation.Task)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTask indicates an expected call of GetTask.
func (mr *MockStateMockRecorder) GetTask(ctx, taskID any) *MockStateGetTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockState)(nil).GetTask), ctx, taskID)
	return &MockStateGetTaskCall{Call: call}
}

// MockStateGetTaskCall wrap *gomock.Call
type MockStateGetTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetTaskCall) Return(arg0 operation.Task, arg1 *string, arg2 error) *MockStateGetTaskCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetTaskCall) Do(f func(context.Context, string) (operation.Task, *string, error)) *MockStateGetTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetTaskCall) DoAndReturn(f func(context.Context, string) (operation.Task, *string, error)) *MockStateGetTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTaskIDsByUUIDsFilteredByReceiverUUID mocks base method.
func (m *MockState) GetTaskIDsByUUIDsFilteredByReceiverUUID(ctx context.Context, receiverUUID uuid.UUID, taskUUIDs []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskIDsByUUIDsFilteredByReceiverUUID", ctx, receiverUUID, taskUUIDs)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskIDsByUUIDsFilteredByReceiverUUID indicates an expected call of GetTaskIDsByUUIDsFilteredByReceiverUUID.
func (mr *MockStateMockRecorder) GetTaskIDsByUUIDsFilteredByReceiverUUID(ctx, receiverUUID, taskUUIDs any) *MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskIDsByUUIDsFilteredByReceiverUUID", reflect.TypeOf((*MockState)(nil).GetTaskIDsByUUIDsFilteredByReceiverUUID), ctx, receiverUUID, taskUUIDs)
	return &MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall{Call: call}
}

// MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall wrap *gomock.Call
type MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall) Return(arg0 []string, arg1 error) *MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall) Do(f func(context.Context, uuid.UUID, []string) ([]string, error)) *MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall) DoAndReturn(f func(context.Context, uuid.UUID, []string) ([]string, error)) *MockStateGetTaskIDsByUUIDsFilteredByReceiverUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTaskUUIDByID mocks base method.
func (m *MockState) GetTaskUUIDByID(ctx context.Context, taskID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskUUIDByID", ctx, taskID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskUUIDByID indicates an expected call of GetTaskUUIDByID.
func (mr *MockStateMockRecorder) GetTaskUUIDByID(ctx, taskID any) *MockStateGetTaskUUIDByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskUUIDByID", reflect.TypeOf((*MockState)(nil).GetTaskUUIDByID), ctx, taskID)
	return &MockStateGetTaskUUIDByIDCall{Call: call}
}

// MockStateGetTaskUUIDByIDCall wrap *gomock.Call
type MockStateGetTaskUUIDByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetTaskUUIDByIDCall) Return(arg0 string, arg1 error) *MockStateGetTaskUUIDByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetTaskUUIDByIDCall) Do(f func(context.Context, string) (string, error)) *MockStateGetTaskUUIDByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetTaskUUIDByIDCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockStateGetTaskUUIDByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForTaskAbortingWatcher mocks base method.
func (m *MockState) NamespaceForTaskAbortingWatcher() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForTaskAbortingWatcher")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForTaskAbortingWatcher indicates an expected call of NamespaceForTaskAbortingWatcher.
func (mr *MockStateMockRecorder) NamespaceForTaskAbortingWatcher() *MockStateNamespaceForTaskAbortingWatcherCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForTaskAbortingWatcher", reflect.TypeOf((*MockState)(nil).NamespaceForTaskAbortingWatcher))
	return &MockStateNamespaceForTaskAbortingWatcherCall{Call: call}
}

// MockStateNamespaceForTaskAbortingWatcherCall wrap *gomock.Call
type MockStateNamespaceForTaskAbortingWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForTaskAbortingWatcherCall) Return(arg0 string) *MockStateNamespaceForTaskAbortingWatcherCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForTaskAbortingWatcherCall) Do(f func() string) *MockStateNamespaceForTaskAbortingWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForTaskAbortingWatcherCall) DoAndReturn(f func() string) *MockStateNamespaceForTaskAbortingWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForTaskLogWatcher mocks base method.
func (m *MockState) NamespaceForTaskLogWatcher() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForTaskLogWatcher")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForTaskLogWatcher indicates an expected call of NamespaceForTaskLogWatcher.
func (mr *MockStateMockRecorder) NamespaceForTaskLogWatcher() *MockStateNamespaceForTaskLogWatcherCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForTaskLogWatcher", reflect.TypeOf((*MockState)(nil).NamespaceForTaskLogWatcher))
	return &MockStateNamespaceForTaskLogWatcherCall{Call: call}
}

// MockStateNamespaceForTaskLogWatcherCall wrap *gomock.Call
type MockStateNamespaceForTaskLogWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForTaskLogWatcherCall) Return(arg0 string) *MockStateNamespaceForTaskLogWatcherCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForTaskLogWatcherCall) Do(f func() string) *MockStateNamespaceForTaskLogWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForTaskLogWatcherCall) DoAndReturn(f func() string) *MockStateNamespaceForTaskLogWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PruneOperations mocks base method.
func (m *MockState) PruneOperations(ctx context.Context, maxAge time.Duration, maxSizeMB int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PruneOperations", ctx, maxAge, maxSizeMB)
	ret0, _ := ret[0].(error)
	return ret0
}

// PruneOperations indicates an expected call of PruneOperations.
func (mr *MockStateMockRecorder) PruneOperations(ctx, maxAge, maxSizeMB any) *MockStatePruneOperationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneOperations", reflect.TypeOf((*MockState)(nil).PruneOperations), ctx, maxAge, maxSizeMB)
	return &MockStatePruneOperationsCall{Call: call}
}

// MockStatePruneOperationsCall wrap *gomock.Call
type MockStatePruneOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatePruneOperationsCall) Return(arg0 error) *MockStatePruneOperationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatePruneOperationsCall) Do(f func(context.Context, time.Duration, int) error) *MockStatePruneOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatePruneOperationsCall) DoAndReturn(f func(context.Context, time.Duration, int) error) *MockStatePruneOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNamespaceMapperWatcher mocks base method.
func (m *MockWatcherFactory) NewNamespaceMapperWatcher(ctx context.Context, initialQuery eventsource.NamespaceQuery, summary string, mapper eventsource.Mapper, filterOption eventsource.FilterOption, filterOptions ...eventsource.FilterOption) (watcher.StringsWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, initialQuery, summary, mapper, filterOption}
	for _, a := range filterOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNamespaceMapperWatcher", varargs...)
	ret0, _ := ret[0].(watcher.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamespaceMapperWatcher indicates an expected call of NewNamespaceMapperWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNamespaceMapperWatcher(ctx, initialQuery, summary, mapper, filterOption any, filterOptions ...any) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, initialQuery, summary, mapper, filterOption}, filterOptions...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamespaceMapperWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNamespaceMapperWatcher), varargs...)
	return &MockWatcherFactoryNewNamespaceMapperWatcherCall{Call: call}
}

// MockWatcherFactoryNewNamespaceMapperWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNamespaceMapperWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Return(arg0 watcher.StringsWatcher, arg1 error) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Do(f func(context.Context, eventsource.NamespaceQuery, string, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.StringsWatcher, error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) DoAndReturn(f func(context.Context, eventsource.NamespaceQuery, string, eventsource.Mapper, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.StringsWatcher, error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
