// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go -source=./service.go
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	operation "github.com/juju/juju/domain/operation"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// CancelAction mocks base method.
func (m *MockState) CancelAction(ctx context.Context, actionUUID string) (operation.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAction", ctx, actionUUID)
	ret0, _ := ret[0].(operation.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelAction indicates an expected call of CancelAction.
func (mr *MockStateMockRecorder) CancelAction(ctx, actionUUID any) *MockStateCancelActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAction", reflect.TypeOf((*MockState)(nil).CancelAction), ctx, actionUUID)
	return &MockStateCancelActionCall{Call: call}
}

// MockStateCancelActionCall wrap *gomock.Call
type MockStateCancelActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCancelActionCall) Return(arg0 operation.Action, arg1 error) *MockStateCancelActionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCancelActionCall) Do(f func(context.Context, string) (operation.Action, error)) *MockStateCancelActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCancelActionCall) DoAndReturn(f func(context.Context, string) (operation.Action, error)) *MockStateCancelActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAction mocks base method.
func (m *MockState) GetAction(ctx context.Context, actionUUID string) (operation.Action, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAction", ctx, actionUUID)
	ret0, _ := ret[0].(operation.Action)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAction indicates an expected call of GetAction.
func (mr *MockStateMockRecorder) GetAction(ctx, actionUUID any) *MockStateGetActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAction", reflect.TypeOf((*MockState)(nil).GetAction), ctx, actionUUID)
	return &MockStateGetActionCall{Call: call}
}

// MockStateGetActionCall wrap *gomock.Call
type MockStateGetActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetActionCall) Return(arg0 operation.Action, arg1 string, arg2 error) *MockStateGetActionCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetActionCall) Do(f func(context.Context, string) (operation.Action, string, error)) *MockStateGetActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetActionCall) DoAndReturn(f func(context.Context, string) (operation.Action, string, error)) *MockStateGetActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
