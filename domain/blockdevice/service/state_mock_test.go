// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/blockdevice/service (interfaces: State,WatcherFactory)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/blockdevice/service State,WatcherFactory
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	blockdevice "github.com/juju/juju/core/blockdevice"
	machine "github.com/juju/juju/core/machine"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// BlockDevices mocks base method.
func (m *MockState) BlockDevices(arg0 context.Context, arg1 machine.UUID) (map[string]blockdevice.BlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockDevices", arg0, arg1)
	ret0, _ := ret[0].(map[string]blockdevice.BlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockDevices indicates an expected call of BlockDevices.
func (mr *MockStateMockRecorder) BlockDevices(arg0, arg1 any) *MockStateBlockDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockDevices", reflect.TypeOf((*MockState)(nil).BlockDevices), arg0, arg1)
	return &MockStateBlockDevicesCall{Call: call}
}

// MockStateBlockDevicesCall wrap *gomock.Call
type MockStateBlockDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateBlockDevicesCall) Return(arg0 map[string]blockdevice.BlockDevice, arg1 error) *MockStateBlockDevicesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateBlockDevicesCall) Do(f func(context.Context, machine.UUID) (map[string]blockdevice.BlockDevice, error)) *MockStateBlockDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateBlockDevicesCall) DoAndReturn(f func(context.Context, machine.UUID) (map[string]blockdevice.BlockDevice, error)) *MockStateBlockDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUID mocks base method.
func (m *MockState) GetMachineUUID(arg0 context.Context, arg1 machine.Name) (machine.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUID", arg0, arg1)
	ret0, _ := ret[0].(machine.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUID indicates an expected call of GetMachineUUID.
func (mr *MockStateMockRecorder) GetMachineUUID(arg0, arg1 any) *MockStateGetMachineUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUID", reflect.TypeOf((*MockState)(nil).GetMachineUUID), arg0, arg1)
	return &MockStateGetMachineUUIDCall{Call: call}
}

// MockStateGetMachineUUIDCall wrap *gomock.Call
type MockStateGetMachineUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineUUIDCall) Return(arg0 machine.UUID, arg1 error) *MockStateGetMachineUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineUUIDCall) Do(f func(context.Context, machine.Name) (machine.UUID, error)) *MockStateGetMachineUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineUUIDCall) DoAndReturn(f func(context.Context, machine.Name) (machine.UUID, error)) *MockStateGetMachineUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MachineBlockDevices mocks base method.
func (m *MockState) MachineBlockDevices(arg0 context.Context) (map[machine.Name][]blockdevice.BlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachineBlockDevices", arg0)
	ret0, _ := ret[0].(map[machine.Name][]blockdevice.BlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MachineBlockDevices indicates an expected call of MachineBlockDevices.
func (mr *MockStateMockRecorder) MachineBlockDevices(arg0 any) *MockStateMachineBlockDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineBlockDevices", reflect.TypeOf((*MockState)(nil).MachineBlockDevices), arg0)
	return &MockStateMachineBlockDevicesCall{Call: call}
}

// MockStateMachineBlockDevicesCall wrap *gomock.Call
type MockStateMachineBlockDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateMachineBlockDevicesCall) Return(arg0 map[machine.Name][]blockdevice.BlockDevice, arg1 error) *MockStateMachineBlockDevicesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateMachineBlockDevicesCall) Do(f func(context.Context) (map[machine.Name][]blockdevice.BlockDevice, error)) *MockStateMachineBlockDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateMachineBlockDevicesCall) DoAndReturn(f func(context.Context) (map[machine.Name][]blockdevice.BlockDevice, error)) *MockStateMachineBlockDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchBlockDevices mocks base method.
func (m *MockState) NamespaceForWatchBlockDevices() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchBlockDevices")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchBlockDevices indicates an expected call of NamespaceForWatchBlockDevices.
func (mr *MockStateMockRecorder) NamespaceForWatchBlockDevices() *MockStateNamespaceForWatchBlockDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchBlockDevices", reflect.TypeOf((*MockState)(nil).NamespaceForWatchBlockDevices))
	return &MockStateNamespaceForWatchBlockDevicesCall{Call: call}
}

// MockStateNamespaceForWatchBlockDevicesCall wrap *gomock.Call
type MockStateNamespaceForWatchBlockDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchBlockDevicesCall) Return(arg0 string) *MockStateNamespaceForWatchBlockDevicesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchBlockDevicesCall) Do(f func() string) *MockStateNamespaceForWatchBlockDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchBlockDevicesCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchBlockDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateMachineBlockDevices mocks base method.
func (m *MockState) UpdateMachineBlockDevices(arg0 context.Context, arg1 machine.UUID, arg2, arg3 map[string]blockdevice.BlockDevice, arg4 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMachineBlockDevices", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMachineBlockDevices indicates an expected call of UpdateMachineBlockDevices.
func (mr *MockStateMockRecorder) UpdateMachineBlockDevices(arg0, arg1, arg2, arg3, arg4 any) *MockStateUpdateMachineBlockDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMachineBlockDevices", reflect.TypeOf((*MockState)(nil).UpdateMachineBlockDevices), arg0, arg1, arg2, arg3, arg4)
	return &MockStateUpdateMachineBlockDevicesCall{Call: call}
}

// MockStateUpdateMachineBlockDevicesCall wrap *gomock.Call
type MockStateUpdateMachineBlockDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateMachineBlockDevicesCall) Return(arg0 error) *MockStateUpdateMachineBlockDevicesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateMachineBlockDevicesCall) Do(f func(context.Context, machine.UUID, map[string]blockdevice.BlockDevice, map[string]blockdevice.BlockDevice, []string) error) *MockStateUpdateMachineBlockDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateMachineBlockDevicesCall) DoAndReturn(f func(context.Context, machine.UUID, map[string]blockdevice.BlockDevice, map[string]blockdevice.BlockDevice, []string) error) *MockStateUpdateMachineBlockDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNotifyWatcher mocks base method.
func (m *MockWatcherFactory) NewNotifyWatcher(arg0 context.Context, arg1 string, arg2 eventsource.FilterOption, arg3 ...eventsource.FilterOption) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewNotifyWatcher", varargs...)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNotifyWatcher indicates an expected call of NewNotifyWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNotifyWatcher(arg0, arg1, arg2 any, arg3 ...any) *MockWatcherFactoryNewNotifyWatcherCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNotifyWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNotifyWatcher), varargs...)
	return &MockWatcherFactoryNewNotifyWatcherCall{Call: call}
}

// MockWatcherFactoryNewNotifyWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNotifyWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNotifyWatcherCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNotifyWatcherCall) Do(f func(context.Context, string, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNotifyWatcherCall) DoAndReturn(f func(context.Context, string, eventsource.FilterOption, ...eventsource.FilterOption) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewNotifyWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
