// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"

	"github.com/juju/juju/core/database/schema"
)


// ChangeLogTriggersForStorageFilesystemAttachment generates the triggers for the
// storage_filesystem_attachment table.
func ChangeLogTriggersForStorageFilesystemAttachment(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for StorageFilesystemAttachment
INSERT INTO change_log_namespace VALUES (%[2]d, 'storage_filesystem_attachment', 'StorageFilesystemAttachment changes based on %[1]s');

-- insert trigger for StorageFilesystemAttachment
CREATE TRIGGER trg_log_storage_filesystem_attachment_insert
AFTER INSERT ON storage_filesystem_attachment FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for StorageFilesystemAttachment
CREATE TRIGGER trg_log_storage_filesystem_attachment_update
AFTER UPDATE ON storage_filesystem_attachment FOR EACH ROW
WHEN 
	NEW.uuid != OLD.uuid OR
	NEW.storage_filesystem_uuid != OLD.storage_filesystem_uuid OR
	NEW.net_node_uuid != OLD.net_node_uuid OR
	NEW.life_id != OLD.life_id OR
	(NEW.mount_point != OLD.mount_point OR (NEW.mount_point IS NOT NULL AND OLD.mount_point IS NULL) OR (NEW.mount_point IS NULL AND OLD.mount_point IS NOT NULL)) OR
	(NEW.read_only != OLD.read_only OR (NEW.read_only IS NOT NULL AND OLD.read_only IS NULL) OR (NEW.read_only IS NULL AND OLD.read_only IS NOT NULL)) OR
	(NEW.provision_scope_id != OLD.provision_scope_id OR (NEW.provision_scope_id IS NOT NULL AND OLD.provision_scope_id IS NULL) OR (NEW.provision_scope_id IS NULL AND OLD.provision_scope_id IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for StorageFilesystemAttachment
CREATE TRIGGER trg_log_storage_filesystem_attachment_delete
AFTER DELETE ON storage_filesystem_attachment FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForStorageVolumeAttachment generates the triggers for the
// storage_volume_attachment table.
func ChangeLogTriggersForStorageVolumeAttachment(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for StorageVolumeAttachment
INSERT INTO change_log_namespace VALUES (%[2]d, 'storage_volume_attachment', 'StorageVolumeAttachment changes based on %[1]s');

-- insert trigger for StorageVolumeAttachment
CREATE TRIGGER trg_log_storage_volume_attachment_insert
AFTER INSERT ON storage_volume_attachment FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for StorageVolumeAttachment
CREATE TRIGGER trg_log_storage_volume_attachment_update
AFTER UPDATE ON storage_volume_attachment FOR EACH ROW
WHEN 
	NEW.uuid != OLD.uuid OR
	NEW.storage_volume_uuid != OLD.storage_volume_uuid OR
	NEW.net_node_uuid != OLD.net_node_uuid OR
	NEW.life_id != OLD.life_id OR
	(NEW.block_device_uuid != OLD.block_device_uuid OR (NEW.block_device_uuid IS NOT NULL AND OLD.block_device_uuid IS NULL) OR (NEW.block_device_uuid IS NULL AND OLD.block_device_uuid IS NOT NULL)) OR
	(NEW.read_only != OLD.read_only OR (NEW.read_only IS NOT NULL AND OLD.read_only IS NULL) OR (NEW.read_only IS NULL AND OLD.read_only IS NOT NULL)) OR
	(NEW.provision_scope_id != OLD.provision_scope_id OR (NEW.provision_scope_id IS NOT NULL AND OLD.provision_scope_id IS NULL) OR (NEW.provision_scope_id IS NULL AND OLD.provision_scope_id IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for StorageVolumeAttachment
CREATE TRIGGER trg_log_storage_volume_attachment_delete
AFTER DELETE ON storage_volume_attachment FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

