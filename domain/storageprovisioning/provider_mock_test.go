// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/storageprovisioning (interfaces: StorageProvider)
//
// Generated by this command:
//
//	mockgen -typed -package storageprovisioning -destination provider_mock_test.go github.com/juju/juju/domain/storageprovisioning StorageProvider
//

// Package storageprovisioning is a generated GoMock package.
package storageprovisioning

import (
	reflect "reflect"

	storage "github.com/juju/juju/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageProvider is a mock of StorageProvider interface.
type MockStorageProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProviderMockRecorder
}

// MockStorageProviderMockRecorder is the mock recorder for MockStorageProvider.
type MockStorageProviderMockRecorder struct {
	mock *MockStorageProvider
}

// NewMockStorageProvider creates a new mock instance.
func NewMockStorageProvider(ctrl *gomock.Controller) *MockStorageProvider {
	mock := &MockStorageProvider{ctrl: ctrl}
	mock.recorder = &MockStorageProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageProvider) EXPECT() *MockStorageProviderMockRecorder {
	return m.recorder
}

// Scope mocks base method.
func (m *MockStorageProvider) Scope() storage.Scope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scope")
	ret0, _ := ret[0].(storage.Scope)
	return ret0
}

// Scope indicates an expected call of Scope.
func (mr *MockStorageProviderMockRecorder) Scope() *MockStorageProviderScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scope", reflect.TypeOf((*MockStorageProvider)(nil).Scope))
	return &MockStorageProviderScopeCall{Call: call}
}

// MockStorageProviderScopeCall wrap *gomock.Call
type MockStorageProviderScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProviderScopeCall) Return(arg0 storage.Scope) *MockStorageProviderScopeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProviderScopeCall) Do(f func() storage.Scope) *MockStorageProviderScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProviderScopeCall) DoAndReturn(f func() storage.Scope) *MockStorageProviderScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Supports mocks base method.
func (m *MockStorageProvider) Supports(arg0 storage.StorageKind) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Supports", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Supports indicates an expected call of Supports.
func (mr *MockStorageProviderMockRecorder) Supports(arg0 any) *MockStorageProviderSupportsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supports", reflect.TypeOf((*MockStorageProvider)(nil).Supports), arg0)
	return &MockStorageProviderSupportsCall{Call: call}
}

// MockStorageProviderSupportsCall wrap *gomock.Call
type MockStorageProviderSupportsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageProviderSupportsCall) Return(arg0 bool) *MockStorageProviderSupportsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageProviderSupportsCall) Do(f func(storage.StorageKind) bool) *MockStorageProviderSupportsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageProviderSupportsCall) DoAndReturn(f func(storage.StorageKind) bool) *MockStorageProviderSupportsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
