// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/offer/service (interfaces: ModelDBState,ControllerDBState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination facade_mock_test.go github.com/juju/juju/domain/offer/service ModelDBState,ControllerDBState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	user "github.com/juju/juju/core/user"
	offer "github.com/juju/juju/domain/offer"
	uuid "github.com/juju/juju/internal/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockModelDBState is a mock of ModelDBState interface.
type MockModelDBState struct {
	ctrl     *gomock.Controller
	recorder *MockModelDBStateMockRecorder
}

// MockModelDBStateMockRecorder is the mock recorder for MockModelDBState.
type MockModelDBStateMockRecorder struct {
	mock *MockModelDBState
}

// NewMockModelDBState creates a new mock instance.
func NewMockModelDBState(ctrl *gomock.Controller) *MockModelDBState {
	mock := &MockModelDBState{ctrl: ctrl}
	mock.recorder = &MockModelDBStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelDBState) EXPECT() *MockModelDBStateMockRecorder {
	return m.recorder
}

// CreateOffer mocks base method.
func (m *MockModelDBState) CreateOffer(arg0 context.Context, arg1 offer.ApplicationOfferArgs) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffer", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOffer indicates an expected call of CreateOffer.
func (mr *MockModelDBStateMockRecorder) CreateOffer(arg0, arg1 any) *MockModelDBStateCreateOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffer", reflect.TypeOf((*MockModelDBState)(nil).CreateOffer), arg0, arg1)
	return &MockModelDBStateCreateOfferCall{Call: call}
}

// MockModelDBStateCreateOfferCall wrap *gomock.Call
type MockModelDBStateCreateOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateCreateOfferCall) Return(arg0 uuid.UUID, arg1 error) *MockModelDBStateCreateOfferCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateCreateOfferCall) Do(f func(context.Context, offer.ApplicationOfferArgs) (uuid.UUID, error)) *MockModelDBStateCreateOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateCreateOfferCall) DoAndReturn(f func(context.Context, offer.ApplicationOfferArgs) (uuid.UUID, error)) *MockModelDBStateCreateOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteOffer mocks base method.
func (m *MockModelDBState) DeleteOffer(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOffer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOffer indicates an expected call of DeleteOffer.
func (mr *MockModelDBStateMockRecorder) DeleteOffer(arg0, arg1 any) *MockModelDBStateDeleteOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOffer", reflect.TypeOf((*MockModelDBState)(nil).DeleteOffer), arg0, arg1)
	return &MockModelDBStateDeleteOfferCall{Call: call}
}

// MockModelDBStateDeleteOfferCall wrap *gomock.Call
type MockModelDBStateDeleteOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateDeleteOfferCall) Return(arg0 error) *MockModelDBStateDeleteOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateDeleteOfferCall) Do(f func(context.Context, uuid.UUID) error) *MockModelDBStateDeleteOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateDeleteOfferCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *MockModelDBStateDeleteOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateOffer mocks base method.
func (m *MockModelDBState) UpdateOffer(arg0 context.Context, arg1 offer.ApplicationOfferArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOffer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOffer indicates an expected call of UpdateOffer.
func (mr *MockModelDBStateMockRecorder) UpdateOffer(arg0, arg1 any) *MockModelDBStateUpdateOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOffer", reflect.TypeOf((*MockModelDBState)(nil).UpdateOffer), arg0, arg1)
	return &MockModelDBStateUpdateOfferCall{Call: call}
}

// MockModelDBStateUpdateOfferCall wrap *gomock.Call
type MockModelDBStateUpdateOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDBStateUpdateOfferCall) Return(arg0 error) *MockModelDBStateUpdateOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDBStateUpdateOfferCall) Do(f func(context.Context, offer.ApplicationOfferArgs) error) *MockModelDBStateUpdateOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDBStateUpdateOfferCall) DoAndReturn(f func(context.Context, offer.ApplicationOfferArgs) error) *MockModelDBStateUpdateOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerDBState is a mock of ControllerDBState interface.
type MockControllerDBState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerDBStateMockRecorder
}

// MockControllerDBStateMockRecorder is the mock recorder for MockControllerDBState.
type MockControllerDBStateMockRecorder struct {
	mock *MockControllerDBState
}

// NewMockControllerDBState creates a new mock instance.
func NewMockControllerDBState(ctrl *gomock.Controller) *MockControllerDBState {
	mock := &MockControllerDBState{ctrl: ctrl}
	mock.recorder = &MockControllerDBStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerDBState) EXPECT() *MockControllerDBStateMockRecorder {
	return m.recorder
}

// CreateOfferAccess mocks base method.
func (m *MockControllerDBState) CreateOfferAccess(arg0 context.Context, arg1 uuid.UUID, arg2 user.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOfferAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOfferAccess indicates an expected call of CreateOfferAccess.
func (mr *MockControllerDBStateMockRecorder) CreateOfferAccess(arg0, arg1, arg2 any) *MockControllerDBStateCreateOfferAccessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOfferAccess", reflect.TypeOf((*MockControllerDBState)(nil).CreateOfferAccess), arg0, arg1, arg2)
	return &MockControllerDBStateCreateOfferAccessCall{Call: call}
}

// MockControllerDBStateCreateOfferAccessCall wrap *gomock.Call
type MockControllerDBStateCreateOfferAccessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDBStateCreateOfferAccessCall) Return(arg0 error) *MockControllerDBStateCreateOfferAccessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDBStateCreateOfferAccessCall) Do(f func(context.Context, uuid.UUID, user.Name) error) *MockControllerDBStateCreateOfferAccessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDBStateCreateOfferAccessCall) DoAndReturn(f func(context.Context, uuid.UUID, user.Name) error) *MockControllerDBStateCreateOfferAccessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
