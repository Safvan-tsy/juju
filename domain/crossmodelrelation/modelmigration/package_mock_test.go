// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/crossmodelrelation/modelmigration (interfaces: ImportService)
//
// Generated by this command:
//
//	mockgen -typed -package modelmigration -destination package_mock_test.go github.com/juju/juju/domain/crossmodelrelation/modelmigration ImportService
//

// Package modelmigration is a generated GoMock package.
package modelmigration

import (
	context "context"
	reflect "reflect"

	crossmodelrelation "github.com/juju/juju/domain/crossmodelrelation"
	gomock "go.uber.org/mock/gomock"
)

// MockImportService is a mock of ImportService interface.
type MockImportService struct {
	ctrl     *gomock.Controller
	recorder *MockImportServiceMockRecorder
}

// MockImportServiceMockRecorder is the mock recorder for MockImportService.
type MockImportServiceMockRecorder struct {
	mock *MockImportService
}

// NewMockImportService creates a new mock instance.
func NewMockImportService(ctrl *gomock.Controller) *MockImportService {
	mock := &MockImportService{ctrl: ctrl}
	mock.recorder = &MockImportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImportService) EXPECT() *MockImportServiceMockRecorder {
	return m.recorder
}

// ImportOffers mocks base method.
func (m *MockImportService) ImportOffers(arg0 context.Context, arg1 []crossmodelrelation.OfferImport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportOffers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportOffers indicates an expected call of ImportOffers.
func (mr *MockImportServiceMockRecorder) ImportOffers(arg0, arg1 any) *MockImportServiceImportOffersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportOffers", reflect.TypeOf((*MockImportService)(nil).ImportOffers), arg0, arg1)
	return &MockImportServiceImportOffersCall{Call: call}
}

// MockImportServiceImportOffersCall wrap *gomock.Call
type MockImportServiceImportOffersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceImportOffersCall) Return(arg0 error) *MockImportServiceImportOffersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceImportOffersCall) Do(f func(context.Context, []crossmodelrelation.OfferImport) error) *MockImportServiceImportOffersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceImportOffersCall) DoAndReturn(f func(context.Context, []crossmodelrelation.OfferImport) error) *MockImportServiceImportOffersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
